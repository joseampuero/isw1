

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (22 March 2021 16:45:13) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


a = 1.!

a == 1.!

a == a. false !

a == a. !

1 + 1.!

a === a. !

a === a. !

a = a.!

a == a.  !

----End fileIn of /home/jampuero/Documentos/isw1/tps-2021/Numeros de Peano Tests De Verificacion.st----!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #NameOfSubclass category: 'Numeros de Peano' stamp: 'ja 3/22/2021 18:05:37'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano 3'!

!classDefinition: #NameOfSubclass category: 'Numeros de Peano 3' stamp: 'ja 3/22/2021 18:05:51'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano 3'!

!classRemoval: #NameOfSubclass stamp: 'ja 3/22/2021 18:06:00'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano 3'!

DenotativeObject subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #NameOfSubclass category: 'Numeros de Peano' stamp: 'ja 3/22/2021 18:16:10'!
DenotativeObject subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #I category: 'Numeros de Peano' stamp: 'ja 3/22/2021 18:16:35'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classRemoval: #NameOfSubclass stamp: 'ja 3/22/2021 18:16:41'!
DenotativeObject subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!
!I class methodsFor: 'no messages' stamp: 'ja 3/22/2021 18:20:12'!
+ aNumber
	^ aNumber next
! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 3/22/2021 18:20:38' prior: 50859505!
+ aNumber
	^ aNumber next.
! !

Assert!

self!

!classRemoval: #I stamp: 'ja 3/22/2021 18:40:06'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classRemoval: #TestsDeVerificacion stamp: 'ja 3/22/2021 18:40:09'!
DenotativeObject subclass: #TestsDeVerificacion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano Tests De Verificacion'!

ObjectBuilder create: #Pepe
	collaboratorNames: ''
	in: 'Actividad1'
	!

!classDefinition: #Pepe category: 'Actividad1' stamp: 'ja 3/22/2021 19:03:19'!
DenotativeObject subclass: #Pepe
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Actividad1'!

!classDefinition: 'Pepe class' category: 'Actividad1' stamp: 'ja 3/22/2021 19:03:19'!
Pepe class
	instanceVariableNames: ''!

Pepe hola!
!Pepe class methodsFor: 'no messages' stamp: 'ja 3/22/2021 19:07:02'!
hola
	^ 'hola rey'.! !

Pepe hola!

ImageMorph new!

----QUIT----(22 March 2021 20:23:37) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (27 March 2021 17:50:54) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


ObjectBuilder create: #anObject
	collaboratorNames: ''
	in: 'Ejercicio2'
	!

!classDefinition: #anObject category: 'Ejercicio2' stamp: 'ja 3/27/2021 17:51:59'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio2'!

!classDefinition: 'anObject class' category: 'Ejercicio2' stamp: 'ja 3/27/2021 17:51:59'!
anObject class
	instanceVariableNames: ''!
!anObject class methodsFor: 'nil' stamp: 'ja 3/27/2021 17:52:48'!
turnOn! !
!anObject class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:52:58'!
turnOff! !
!anObject class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:53:13'!
speedUp! !
!anObject class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:53:19' overrides: 16880755!
break! !
!anObject class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:53:48'!
openTrunk! !

!classRenamed: #anObject as: #Vehicle stamp: 'ja 3/27/2021 17:54:11'!
Smalltalk renameClassNamed: #anObject as: #Vehicle!
!Vehicle class methodsFor: 'nil' stamp: 'ja 3/27/2021 17:54:46'!
asHtml! !
!Vehicle class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:54:48'!
save! !
!Vehicle class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 17:54:54'!
asJson! !

ObjectBuilder create: #AlanTuring
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlanTuring category: 'Ejercicio3' stamp: 'ja 3/27/2021 17:55:26'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanTuring class' category: 'Ejercicio3' stamp: 'ja 3/27/2021 17:55:26'!
AlanTuring class
	instanceVariableNames: ''!

AlanTuring!

 AlanTuring !

 AlanTuring !

AlanTuring dateOfBirth!

 AlanTuring printString.!

printString!

printString!

printString!

ObjectBuilder!

ObjectBuilder!

ObjectBuilder!

 AlanTuring printString. !

 AlanTuring dateOfBirth!
!AlanTuring class methodsFor: 'date' stamp: 'ja 3/27/2021 18:02:40'!
dateOfBirth
	self shouldBeImplemented.! !
!AlanTuring class methodsFor: 'date' stamp: 'ja 3/27/2021 18:03:06' prior: 50859614!
dateOfBirth
	^ June/23/1912.! !

 AlanTuring dateOfBirth.!

ObjectBuilder create: #AlonsoChurch
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlonsoChurch category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:04:10'!
DenotativeObject subclass: #AlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlonsoChurch class' category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:04:10'!
AlonsoChurch class
	instanceVariableNames: ''!
!AlonsoChurch class methodsFor: 'nil' stamp: 'ja 3/27/2021 18:04:23'!
dateOfBirth
	^June/14/1903! !

AlonsoChurch dateOfBirth inspect!

ObjectBuilder create: #AlanKay
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlanKay category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:07:19'!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanKay class' category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:07:19'!
AlanKay class
	instanceVariableNames: ''!

ObjectBuilder create: #DanIngalls
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #DanIngalls category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:07:29'!
DenotativeObject subclass: #DanIngalls
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'DanIngalls class' category: 'Ejercicio3' stamp: 'ja 3/27/2021 18:07:29'!
DanIngalls class
	instanceVariableNames: ''!
!AlanKay class methodsFor: 'no messages' stamp: 'ja 3/27/2021 18:07:42'!
dateOfBirth! !
!DanIngalls class methodsFor: 'no messages' stamp: 'ja 3/27/2021 18:07:48'!
dateOfBirth! !
!DanIngalls class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:08:10' prior: 50859672!
dateOfBirth
	^ January/1/1945! !
!AlanKay class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:08:32' prior: 50859669!
dateOfBirth
	^ January/1/1945
! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:11:23'!
ageDifferenceWithAlanTuring
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !

AlonsoChurch ageDifferenceWithAlanTuring .!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:13:48' prior: 50859685!
ageDifferenceWithAlanTuring
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !

	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:14:40' prior: 50859693!
ageDifferenceWithAlanTuring
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !

June!

	^June/14/1903!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:15:50' prior: 50859637!
dateOfBirth
	^June/14/1903! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:15:55' prior: 50859708!
dateOfBirth
	^June/14/1903! !

	^June/14/1903!

	^June/14/1903!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:17:56'!
ageDifferenceWithAlonsoChurch
	^ self dateOfBirth distanceTo: AlonsoChurch dateOfBirth .! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:18:04'!
ageDifferenceWithDanIngalls
	^ self dateOfBirth distanceTo: DanIngalls dateOfBirth .! !

AlonsoChurch ageDifferenceWithDanIngalls !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:18:46'!
ageDifferenceWithAlanKay
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !

!methodRemoval: AlonsoChurch class #ageDifferenceWithAlonsoChurch stamp: 'ja 3/27/2021 18:18:50'!
ageDifferenceWithAlonsoChurch
	^ self dateOfBirth distanceTo: AlonsoChurch dateOfBirth .!

AlonsoChurch ageDifferenceWithAlanKay !

self dateOfBirth distanceTo: DanIngalls dateOfBirth!

1 days !

year!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/27/2021 18:23:46' prior: 50859724!
ageDifferenceWithDanIngalls
	^ self dateOfBirth distanceTo: DanIngalls dateOfBirth .! !

'hola', 'chau' size.!

('hola', 'chau') size.!

'hola', 'chau' size.!

'hola', 'chau' size.!

aStringOrText appendToString: self!

----QUIT----(27 March 2021 18:39:40) CuisUniversity-4532.image priorSource: 16892595!

----STARTUP---- (28 March 2021 15:55:53) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


AlanTuring hola.!

ObjectBuilder!

AlanTuring hola.!
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:03:33' overrides: 50849697!
doesNotUnderstand: aMessage

	^'No entiendo lo que me decis'! !

AlanTuring hola.!

AlanTuring chau. 'No entiendo lo que me decis' !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:06:13' prior: 50859765 overrides: 50849697!
doesNotUnderstand: aMessage

	^'No entiendo lo que me decis con ' , aMessage ! !

AlanTuring hola. 	!

AlanTuring hola. 	!
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:06:41' prior: 50859773 overrides: 50849697!
doesNotUnderstand: aMessage

	^ 'No entiendo lo que me decis con ' , aMessage ! !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:06:51' prior: 50859781 overrides: 50849697!
doesNotUnderstand: aMessage

	^ 'No entiendo lo que me decis con ' ! !

AlanTuring hola. 	!
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:07:15' prior: 50859788 overrides: 50849697!
doesNotUnderstand: aMessage

	^ 'No entiendo lo que me decis con ' , aMessage asString ! !

AlanTuring hola. 	 'No entiendo lo que me decis con ' !

AlanTuring hola.!
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:07:36' prior: 50859795 overrides: 50849697!
doesNotUnderstand: aMessage

	^ 'No entiendo lo que me decis con el mensaje ' , aMessage asString ! !

AlanTuring hola. !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/28/2021 16:10:24'!
ageDifferenceWith: aPerson 

	^ 'La diferencia es muy grande'! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/28/2021 16:10:57' prior: 50859811!
ageDifferenceWith: aPerson 

	^ self dateOfBirth distanceTo: aPerson dateOfBirth .! !

#dateOfBirth asMessage sendTo: AlanTuring.!

#dateOfBirth asMessage sendTo: AlanTuring. !

#dateOfBirth asMessage sendTo: AlanTuring. !

#dateOfBirth asMessage sendTo: AlanTuring. !

(#ageDifferenceWith: asMessageWith: Pepe) sendTo: AlonsoChurch .!

#dateOfBirth asMessage.!

#dateOfBirth asMessage.!

#dateOfBirth asMessage lookupClass .!

#ageDifferenceWith: asMessageWith: AlanTuring.!

#ageDifferenceWith: asMessageWith: AlanTuring.!

self sendTo: Pepe.!

self sendTo: AlanTuring.!

self sendTo: AlanTuring.!

self !

self class!

AlanTuring methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #dateOfBirth. (AlanTuring class>>#dateOfBirth "a CompiledMethod(293759)") !

#methodNamed: asMessageWith: #dateOfBirth.!

#methodNamed: asMessageWith: #dateOfBirth.!

#methodNamed: asMessageWith: #dateOfBirth.!

self class!

self class !

AlanTuring methodNamed: #hola. !

AlonsoChurch methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #hola. !

AlanTuring methodNamed: #dateOfBirth. !

AlanTuring methodNamed: #dateOfBirth. !

AlanTuring superclassName .!

AlanTuring superclass .!

DenotativeObject methodNamed: #dateOfBirth. !

self sourceCode !

self linesOfCode !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:57:36' prior: 50859618!
dateOfBirth

	^ June/23/1912.! !

AlanTuring methodNamed: #dateOfBirth. !

AlanTuring methodNamed: #dateOfBirth. !

self linesOfCode !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:58:01' prior: 50859860!
dateOfBirth
	"sdsdsds"
	^ June/23/1912.! !

self linesOfCode !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:58:20' prior: 50859868!
dateOfBirth
	"sdsdsds"
	| x |
	x _ 1.
	^ June/23/1912.! !

self linesOfCode !

AlanTuring methodNamed: #dateOfBirth. !

AlanTuring methodNamed: #dateOfBirth. !

self linesOfCode !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:58:47' prior: 50859873!
dateOfBirth
	
	^ June/23/1912.! !

self linesOfCode !

AlanTuring methodNamed: #dateOfBirth. !

self linesOfCode !
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 3/28/2021 16:59:11' prior: 50859882!
dateOfBirth
	^ June/23/1912.! !

AlanTuring methodNamed: #dateOfBirth. !

self valueWithReceiver: AlanTuring arguments: #().!

(AlanTuring methodNamed: #dateOfBirth) valueWithReceiver: AlanTuring arguments: #(). !

ObjectBuilder create: #Examples
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #Examples category: 'Ejercicio3' stamp: 'ja 3/28/2021 17:08:10'!
DenotativeObject subclass: #Examples
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'Examples class' category: 'Ejercicio3' stamp: 'ja 3/28/2021 17:08:10'!
Examples class
	instanceVariableNames: ''!
!Examples class methodsFor: 'no messages' stamp: 'ja 3/28/2021 17:08:40'!
moreExamples
"
#dateOfBirth asMessage sendTo: AlanTuring. 
(#ageDifferenceWith: asMessageWith: Pepe) sendTo: AlonsoChurch .
#dateOfBirth asMessage .
#ageDifferenceWith: asMessageWith: AlanTuring.
(AlanTuring methodNamed: #dateOfBirth) valueWithReceiver: AlanTuring arguments: #(). 
AlonsoChurch methodNamed: #dateOfBirth. 
#methodNamed: asMessageWith: #dateOfBirth.
AlanTuring superclass . DenotativeObject 
DenotativeObject methodNamed: #dateOfBirth. "! !

self valueWithReceiver: AlanTuring arguments: #().!

self valueWithReceiver: AlonsoChurch arguments: #().!

self valueWithReceiver: Examples arguments: #().!

self valueWithReceiver: Random arguments: #(). !

'hola gente!!' copyFrom: 'hola' size + 1 to: 11. !

6+2*5.!

(6+2)*5.!

2*6+5.!

6+2*5+6+2*5.!

6+2*5+6+2*5. !

6+2*5+6+(2*5). !

#dateOfBirth asMessage sendTo: AlanTuring. !

#dateOfBirth asMessage .!

self sendTo: AlanTuring .!

#dateOfBirth asMessage .!

#dateOfBirth asMessage .!

self !

self !

self class!

self selector !

AlonsoChurch methodNamed: #dateOfBirth.!

self primitive !

self methodClass !

self doesNotUnderstand: self !

----QUIT----(28 March 2021 20:24:47) CuisUniversity-4532.image priorSource: 16899386!

----STARTUP---- (29 March 2021 18:43:16) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!Examples class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 18:55:30' prior: 50859912!
moreExamples
"
#dateOfBirth asMessage sendTo: AlanTuring. 
(#ageDifferenceWith: asMessageWith: Pepe) sendTo: AlonsoChurch .
#dateOfBirth asMessage .
#ageDifferenceWith: asMessageWith: AlanTuring.
(AlanTuring methodNamed: #dateOfBirth) valueWithReceiver: AlanTuring arguments: #(). 
AlonsoChurch methodNamed: #dateOfBirth
#methodNamed: asMessageWith: #dateOfBirth.
AlanTuring superclass . DenotativeObject 
DenotativeObject methodNamed: #dateOfBirth. "! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'ja 3/29/2021 18:56:42'!
isOlderThan: aPerson

    ^(self ageDifferenceWith: aPerson) positive! !

AlanKay  _ 1 .!

AlanKay  := 1 .!

AlanKay  := 1 .!

AlanKay  := 1 .!

1 + AlanKay .!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 18:59:43' prior: 50859973!
isOlderThan: aPerson

    ^(self ageDifferenceWith: aPerson) positive! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:00:48' prior: 50859982!
isOlderThan: aPerson
	
    ^(self ageDifferenceWith: aPerson) positive! !

AlanKay!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:01:38' prior: 50859988!
isOlderThan: aPerson
	
 	   ^(self ageDifferenceWith: aPerson) positive! !

AlanTuring  _ 2.!

ObjectBuilder create: #otraClase
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #otraClase category: 'Ejercicio3' stamp: 'ja 3/29/2021 19:02:47'!
DenotativeObject subclass: #otraClase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'otraClase class' category: 'Ejercicio3' stamp: 'ja 3/29/2021 19:02:47'!
otraClase class
	instanceVariableNames: ''!
!otraClase class methodsFor: 'no messages' stamp: 'ja 3/29/2021 19:05:28'!
pp
	otraClase := String.! !
!otraClase class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:06:02' prior: 50860013!
pp
	otraClase := Examples .! !

	self!
!otraClase class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:09:37' prior: 50860017!
pp
	otraClase := Examples .
! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:09:40'!
m1: collaborator1

   

   ^thisContext! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:09:48' prior: 50860026!
m1: collaborator1

   | tmp |

   ^thisContext! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:09:59' prior: 50860031!
m1: collaborator1

   | tmp1 |

   ^thisContext! !

self tempsAndValues.!

self tempAt: 1.!

self tempAt: 2.!

self tempAt: 2 put: 20.!

self tempAt: 2.!

AlanTuring!

----STARTUP---- (29 March 2021 19:45:53) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!Examples class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:46:09' prior: 50859912!
moreExamples
"
#dateOfBirth asMessage sendTo: AlanTuring. 
(#ageDifferenceWith: asMessageWith: Pepe) sendTo: AlonsoChurch .
#dateOfBirth asMessage .
#ageDifferenceWith: asMessageWith: AlanTuring.
(AlanTuring methodNamed: #dateOfBirth) valueWithReceiver: AlanTuring arguments: #(). 
AlonsoChurch methodNamed: #dateOfBirth
#methodNamed: asMessageWith: #dateOfBirth.
AlanTuring superclass . DenotativeObject 
DenotativeObject methodNamed: #dateOfBirth. "! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:46:29'!
isOlderThan: aPerson

    ^(self ageDifferenceWith: aPerson) positive! !

	^ AlonsoChurch isOlderThan: AlanTuring.!

    ^(self ageDifferenceWith: aPerson) positive.!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 3/29/2021 19:54:42' prior: 50859973!
isOlderThan: aPerson

    ^(self ageDifferenceWith: aPerson) positive! !

	^ self dateOfBirth distanceTo: aPerson dateOfBirth .!

----QUIT----(29 March 2021 21:00:44) CuisUniversity-4532.image priorSource: 16905556!

----STARTUP---- (31 March 2021 23:01:29) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(31 March 2021 23:01:33) CuisUniversity-4532.image priorSource: 16906816!

----STARTUP---- (1 April 2021 15:48:13) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


self getListSize .!

self selector.!

self.!

self name.!

self list.!

self list.!

self list size.!

self getList size.!

----QUIT----(1 April 2021 15:59:46) CuisUniversity-4532.image priorSource: 16907015!

----STARTUP---- (2 April 2021 16:50:00) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


[10 factorial].!

10 factorial .!

[10 factorial].!

[10 factorial] value.!

10 factorial print .!

[10 factorial] print.!

[10 factorial] .!

[10 factorial] .!

10 factorial print .!

10 factorial .!

10 factorial . !

[10 factorial] .!

[10 factorial] value.!
!AlanTuring class methodsFor: 'personal info' stamp: 'ja 4/2/2021 17:20:10' prior: 50859804 overrides: 50849697!
doesNotUnderstand: aMessage

	^ 'No entiendo lo que me decis con el mensaje ' , aMessage asString ! !

[ :anInteger :other | anInteger factorial ] value: 10 value:4.!

factorialSumBlock valueWithArguments: #(10 20).!

factorialSumBlock valueWithArguments: #(10 20).!

factorialSumBlock := [ :anIntegerToFact1 :anIntegerToFact2 | anIntegerToFact1 factorial + anIntegerToFact2 factorial ].!

factorialSumBlock valueWithArguments: #(10 20).!

#(1 2 3 4 5) inject: 0 into: [ :acum :anInteger | acum + anInteger ].!

#(1 2 3 4 5) inject: 0 into: [ :acum :anInteger | acum + anInteger ]. 15 !

----End fileIn of /home/jampuero/Documentos/isw1/linux64/Packages/TerseGuide.pck.st----!

DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: #CloneOfAlonsoChurch category: 'Ejercicio3' stamp: 'ja 4/2/2021 17:33:41'!
DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

CloneOfAlonsoChurch class
	instanceVariableNames: ''!

!classDefinition: 'CloneOfAlonsoChurch class' category: 'Ejercicio3' stamp: 'ja 4/2/2021 17:33:41'!
CloneOfAlonsoChurch class
	instanceVariableNames: ''!
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
ageDifferenceWith: aPerson 

	^ self dateOfBirth distanceTo: aPerson dateOfBirth .! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
ageDifferenceWithAlanKay
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
ageDifferenceWithAlanTuring
	^ self dateOfBirth distanceTo: AlanKay dateOfBirth .! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
ageDifferenceWithDanIngalls
	^ self dateOfBirth distanceTo: DanIngalls dateOfBirth .! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
dateOfBirth
	^June/14/1903! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'ja 4/2/2021 17:33:41'!
isOlderThan: aPerson

    ^(self ageDifferenceWith: aPerson) positive! !

(June/23/2019) = (June/23/2019).!

(June/23/2019) = (June/23/2019).!

(June/23/2019) == (June/23/2019). !

100 factorial = 100 factorial. !

100 factorial == 100 factorial. !

('ho','la') = ('ho','la').  !

('ho','la') == ('ho', 'la').!

AlonsoChurch = CloneOfAlonsoChurch .!

AlonsoChurch == CloneOfAlonsoChurch . !

AlonsoChurch == AlonsoChurch . !

AlonsoChurch = AlonsoChurch . !

AlonsoChurch == AlonsoChurch .  !

self list.!

self getList .!

self getList size.!

self setSelectionIndex: 1.!

self setSelectionIndex: 3.!

self setSelectionIndex: 2. !

self setSelectionIndex: 5.  !

self setSelectionIndex: 1.   !

self selection: #fail.!

self selection: #browseMethodFull.!

self browseMethodFull .!

self browseMethodFull . !

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

----QUIT----(2 April 2021 18:09:30) CuisUniversity-4532.image priorSource: 16907337!

----STARTUP---- (5 April 2021 20:17:31) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Numeros Naturales'
	!

!classDefinition: #I category: 'Numeros Naturales' stamp: 'ja 4/5/2021 20:18:51'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'I class' category: 'Numeros Naturales' stamp: 'ja 4/5/2021 20:18:51'!
I class
	instanceVariableNames: ''!

I next.!
!I class methodsFor: 'no messages' stamp: 'ja 4/5/2021 20:22:12'!
newt

	^ I! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:22:21'!
next

	^ I! !

!methodRemoval: I class #newt stamp: 'ja 4/5/2021 20:22:21'!
newt

	^ I!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:23:01' prior: 50863073!
next

	^ I! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:28:15' prior: 50863079!
next

	^ self cloneNamed:self name , 'I'.! !

I next.!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: #II category: 'Numeros Naturales' stamp: 'ja 4/5/2021 20:28:29'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

II class
	instanceVariableNames: ''!

!classDefinition: 'II class' category: 'Numeros Naturales' stamp: 'ja 4/5/2021 20:28:29'!
II class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:28:29'!
next

	^ self cloneNamed:self name , 'I'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:28:48' prior: 50863083!
next

	^ self cloneNamed: self name , 'I'.! !

!classRemoval: #II stamp: 'ja 4/5/2021 20:32:10'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 20:49:41' prior: 50863109!
next

	^ self cloneNamed: self name, 'I'.! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 21:05:03' prior: 50863120!
next

	^ self createChildNamed: self name, 'I'.! !

I next.!

!classDefinition: #II category: 'Numeros Naturales' stamp: 'ja 4/5/2021 21:05:06'!
I subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'II class' category: 'Numeros Naturales' stamp: 'ja 4/5/2021 21:05:06'!
II class
	instanceVariableNames: ''!

----QUIT----(5 April 2021 21:10:33) CuisUniversity-4532.image priorSource: 17004800!

----STARTUP---- (5 April 2021 23:39:50) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/Numeros Naturales Tests.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 23:48:56'!
+ anAddends

	^ anAddends next.! !

I + II.!

!classDefinition: #III category: 'Numeros Naturales' stamp: 'ja 4/5/2021 23:53:22'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'III class' category: 'Numeros Naturales' stamp: 'ja 4/5/2021 23:53:22'!
III class
	instanceVariableNames: ''!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 23:56:04' prior: 50863251!
+ anAddends

	^ self next: anAddends .! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 23:56:41'!
next: aNumber

	! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/5/2021 23:57:15' prior: 50863270!
next: aNumber

	^ self createChildNamed: aNumber , 'I'
	! !

!classDefinition: #IIII category: 'Workspace-Objects' stamp: 'ja 4/6/2021 00:00:27'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Workspace-Objects'!

I + IIII.!

I + IIII.!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 00:02:13' prior: 50863274!
next: aNumber

	^ self createChildNamed: aNumber asString , 'I'
	! !

I + IIII.!

!classDefinition: #IIIII category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:02:18'!
I subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:02:18'!
IIIII class
	instanceVariableNames: ''!

II + II .!

!classDefinition: #III category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:04:18'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'III class' category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:04:18'!
III class
	instanceVariableNames: ''!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 00:06:05' prior: 50863287!
next: aNumber

	^ self createChildNamed: aNumber asString , self name.
	! !

II + II .!

!classDefinition: #IIII category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:06:13'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIII class' category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:06:13'!
IIII class
	instanceVariableNames: ''!

II + III.!

!classDefinition: #IIIII category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:07:54'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros Naturales' stamp: 'ja 4/6/2021 00:07:54'!
IIIII class
	instanceVariableNames: ''!

----QUIT----(6 April 2021 00:08:15) CuisUniversity-4532.image priorSource: 17007657!

----STARTUP---- (6 April 2021 15:29:52) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #IIIII stamp: 'ja 4/6/2021 17:08:14'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIII stamp: 'ja 4/6/2021 17:08:15'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #III stamp: 'ja 4/6/2021 17:08:15'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #II stamp: 'ja 4/6/2021 17:08:16'!
I subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #I stamp: 'ja 4/6/2021 17:08:16'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

----End fileIn of /home/jampuero/Descargas/Numeros_Naturales_1.st----!

8 - 2 -2 .!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:30:12' prior: 50863455!
/ unDivisor
	self size < unDivisor size
	 ifTrue: 
	[
		^ 'No se puede dividir por un numero mayor'.
	] 
	ifFalse: 
	[
		^self divide: unDivisor - unDivisor
	].
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:33:22' prior: 50863715!
/ unDivisor
	self size < unDivisor size
	 ifTrue: 
	[
		^ 'No se puede dividir por un numero mayor'.
	]. 
	self size = unDivisor size 
	ifTrue: 
	[
		^ I next.
	] 
	ifFalse: 
	[
		self - unDivisor / unDivisor 
	].
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:35:01' prior: 50863724!
/ unDivisor
	self size < unDivisor size ifTrue: [
		^ 'No se puede dividir por un numero mayor'.
	] ifFalse: [
		self - unDivisor / unDivisor 
	].
	self size = unDivisor size ifTrue: [
		^ I next.
	] 
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:36:09' prior: 50863734!
/ unDivisor
	self size < unDivisor size ifTrue: [
		^ 'No se puede dividir por un numero mayor'.
	].
	 self size > unDivisor size ifTrue: [
		self - unDivisor / unDivisor 
	].
	self size = unDivisor size ifTrue: [
		^ I next.
	] 
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:36:12' prior: 50863744!
/ unDivisor
	self size < unDivisor size ifTrue: [
		^ 'No se puede dividir por un numero mayor'.
	].
	self size > unDivisor size ifTrue: [
		self - unDivisor / unDivisor 
	].
	self size = unDivisor size ifTrue: [
		^ I next.
	] 
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:37:53' prior: 50863755!
/ unDivisor

	self size < unDivisor size ifTrue: [
		^ 'No se puede dividir por un numero mayor'.
	].
	self size > unDivisor size ifTrue: [
		self - unDivisor / unDivisor .
	].
	self size = unDivisor size ifTrue: [
		^ I next.
	] 
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 17:39:53' prior: 50863766!
/ unDivisor

	self name size < unDivisor name size ifTrue: [
		^ 'No se puede dividir por un numero mayor'.
	].
	self name size > unDivisor name size ifTrue: [
		self - unDivisor / unDivisor .
	].
	self name size = unDivisor name size ifTrue: [
		^ I next.
	] 
	! !

I + I.!
!II class methodsFor: 'nil' stamp: 'ja 4/6/2021 18:32:48'!
sustraerUnSustraendoVeces: valor

	^valor previous - self previous! !
!I class methodsFor: 'nil' stamp: 'ja 4/6/2021 18:32:48'!
sustraerUnSustraendoVeces: valor

	^valor previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:32:48' prior: 50863486!
- unSustraendo

	^unSustraendo sustraerUnSustraendoVeces: self! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:32:48' prior: 50863402!
- unSustraendo

	^self sustraerUnSustraendoVeces: unSustraendo! !

!methodRemoval: II class #sustraerUnSuswtraendoVeces: stamp: 'ja 4/6/2021 18:32:48'!
sustraerUnSuswtraendoVeces: valor

	^valor previous - self previous!

!methodRemoval: I class #sustraerUnSuswtraendoVeces: stamp: 'ja 4/6/2021 18:32:48'!
sustraerUnSuswtraendoVeces: valor

	^valor previous!

II + I.!

I + II.!

I + I.!

I - I.!

II- I.!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:36:06' prior: 50863777!
/ unDivisor

	self < unDivisor 
		ifTrue: [ self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor] 
		ifFalse: [ self = unDivisor 
					ifTrue: [ ^I ] 
					ifFalse: [ ^ ((self - unDivisor) / unDivisor) next ] ]
	! !

III parents .!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:38:41'!
< aValue

	^ self parents includes: aValue .! !
!II class methodsFor: 'error description' stamp: 'ja 4/6/2021 18:41:16'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'No se puede dividir por un numero mayor'.! !

IIII / II.!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:42:34' prior: 50863829!
< aValue

	^ aValue parents includes: self .! !

IIII / II.!

IIIII / II.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:43:51'!
ERROR!

I + I.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:45:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:45:12'!
ERROR!

!classRemoval: #IIIIIIII stamp: 'ja 4/6/2021 18:46:07'!
IIIIIII subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIIII stamp: 'ja 4/6/2021 18:46:11'!
IIIIII subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'ja 4/6/2021 18:46:17'!
IIIII subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

II previous .!

!classRemoval: #IIIII stamp: 'ja 4/6/2021 18:47:19'!
IIII subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIII stamp: 'ja 4/6/2021 18:47:32'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:47:44'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:47:44'!
ERROR!

!classRemoval: #NumerosNaturalesTest stamp: 'ja 4/6/2021 18:47:57'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

----End fileIn of /home/jampuero/Documentos/isw1/Numeros Naturales Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:48:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:48:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:48:12'!
ERROR!

I + III.!

I + III.!

II + II.!

III + I.!

next!

I + III.!

!classDefinition: #IIII category: 'Numeros Naturales' stamp: 'ja 4/6/2021 18:50:56'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIII class' category: 'Numeros Naturales' stamp: 'ja 4/6/2021 18:50:56'!
IIII class
	instanceVariableNames: ''!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:10'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:14'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:51:14'!
ERROR!
!I class methodsFor: 'nil' stamp: 'ja 4/6/2021 18:51:49'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^ 'Numeros negativos no soportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:52:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:52:53'!
ERROR!
!I class methodsFor: 'private' stamp: 'ja 4/6/2021 18:53:29' prior: 50863418!
previous

	^self descripcionDeErrorDeNumerosNegativosNoSoportados .! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:53:44'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:53:44'!
ERROR!
!I class methodsFor: 'private' stamp: 'ja 4/6/2021 18:54:16' prior: 50864094!
previous

	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:54:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:54:21'!
ERROR!

I - II.!

II -I.!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:56:22' prior: 50863802!
- unSustraendo

	"^self sustraerUnSustraendoVeces: unSustraendo"
	^ self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !

II - I .!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:48'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:56:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:57:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 18:57:00'!
ERROR!
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 18:57:28' prior: 50864117!
- unSustraendo

	^ self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !

I / I.!

I / II.!
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 18:59:49' prior: 50863407!
/ unDivisor

	^unDivisor divideUno: self! !
!I class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:00:12'!
divideUno: valor

	^self! !

!methodRemoval: I class #divide: stamp: 'ja 4/6/2021 19:00:20'!
divide: valor

	^self!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:01:01'!
divideUno: valor

	^ self previous / valor! !

	^ self error: self errorMessageForSourceCodeIncludingAReturnStatement .!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:01:28' prior: 50864186!
divideUno: valor

	^ self error: self xxx .! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:01:50' prior: 50864193!
divideUno: valor

	^ self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:02:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:02:11'!
ERROR!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:02:57' prior: 50864198!
divideUno: valor

	^ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .! !
!I class methodsFor: 'error description' stamp: 'ja 4/6/2021 19:03:19'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'Numeros negativos no soportados'! !
!I class methodsFor: 'error description' stamp: 'ja 4/6/2021 19:03:39' prior: 50864216!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un numero mayor'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:44'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:03:50'!
PASSED!

!methodRemoval: II class #descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor stamp: 'ja 4/6/2021 19:04:27'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'No se puede dividir por un numero mayor'.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:04:43'!
ERROR!
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:05:40' prior: 50863818!
/ unDivisor

	self < unDivisor 
		ifTrue: [ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor] 
		ifFalse: [ self = unDivisor 
					ifTrue: [ ^I ] 
					ifFalse: [ ^ ((self - unDivisor) / unDivisor) next ] ]
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:05:42'!
ERROR!
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:05:56' prior: 50864348!
/ unDivisor

	self < unDivisor 
		ifTrue: [ self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor] 
		ifFalse: [ self = unDivisor 
					ifTrue: [ ^I ] 
					ifFalse: [ ^ ((self - unDivisor) / unDivisor) next ] ]
	! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:06:16'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:06:36' prior: 50864406!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	
	^'No se puede dividir por un numero mayor'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:06:39'!
PASSED!

!methodRemoval: II class #divide: stamp: 'ja 4/6/2021 19:07:34'!
divide: valor

	^self previous / valor!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:09:24' prior: 50863478!
previous

	^previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:09:28' prior: 50864456!
previous

	^ previous! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:11:42'!
PASSED!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:15:55' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:15:55' overrides: 50864499!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:15:55' overrides: 50864507!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:15:55'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:15:55'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:15:55'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.!
!I class methodsFor: 'private' stamp: 'ja 4/6/2021 19:21:37'!
divideUno

	^self! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:21:51' prior: 50864176!
/ unDivisor

	^unDivisor divideUno! !

!methodRemoval: I class #divideUno: stamp: 'ja 4/6/2021 19:22:16'!
divideUno: valor

	^self!
!II class methodsFor: 'private' stamp: 'ja 4/6/2021 19:22:26'!
divideUno

	^ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .! !

!methodRemoval: II class #divideUno: stamp: 'ja 4/6/2021 19:22:31'!
divideUno: valor

	^ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:22:36'!
PASSED!
!III class methodsFor: 'private' stamp: 'ja 4/6/2021 19:23:07' prior: 50863512!
previous: aNumber

	previous _ aNumber ! !
!II class methodsFor: 'private' stamp: 'ja 4/6/2021 19:24:16'!
previous: aNumber

	previous _ aNumber ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:20'!
PASSED!
!III class methodsFor: 'private' stamp: 'ja 4/6/2021 19:24:38' prior: 50864599 overrides: 50864603!
previous: aNumber

	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:40'!
PASSED!

!methodRemoval: III class #previous: stamp: 'ja 4/6/2021 19:24:51'!
previous: aNumber

	!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/6/2021 19:24:54'!
PASSED!
!I class methodsFor: 'private' stamp: 'ja 4/6/2021 19:27:33' prior: 50863792!
sustraerUnSustraendoVeces: valor

	^ valor previous! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:28:11' prior: 50863394!
* unMultiplicador

	^ unMultiplicador! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:28:14' prior: 50863398!
+ unSumando

	^ unSumando next! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:28:20' prior: 50864546!
/ unDivisor

	^ unDivisor divideUno! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:31:41' prior: 50863797!
- unSustraendo

	^ unSustraendo sustraerUnSustraendoVeces: self! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:32:15' prior: 50863445!
* unMultiplicador

	^ self sumarSelfVecesUnMultiplicador: unMultiplicador + unMultiplicador! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/6/2021 19:33:58' prior: 50863451!
+ unSumando

	^ self previous + unSumando next! !

IIII - II.!

II - IIII.!

IIII - II.!
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:38:05' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:38:05' overrides: 50864755!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/6/2021 19:38:06' overrides: 50864763!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:38:06'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:38:06'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'ja 4/6/2021 19:38:06'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.!

----QUIT----(6 April 2021 19:38:08) CuisUniversity-4532.image priorSource: 17014131!

----STARTUP---- (7 April 2021 15:31:29) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #NumerosNaturalesTest stamp: 'ja 4/7/2021 15:37:48'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

!classRemoval: #IIII stamp: 'ja 4/7/2021 15:37:55'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #III stamp: 'ja 4/7/2021 15:38:15'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

I + II.!

next!

next!

I + II. !

!classDefinition: #III category: 'Numeros Naturales' stamp: 'ja 4/7/2021 15:40:06'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'III class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 15:40:06'!
III class
	instanceVariableNames: ''!

----End fileIn of /home/jampuero/Documentos/isw1/Numeros Naturales Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!classDefinition: #IIII category: 'Numeros Naturales' stamp: 'ja 4/7/2021 15:40:22'!
III subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIII class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 15:40:22'!
IIII class
	instanceVariableNames: ''!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 15:40:34'!
PASSED!
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:46:15' prior: 50864729!
+ aSummand

	^ aSummand next! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:46:23' prior: 50864749!
+ aSummand

	^ self previous + aSummand next! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:47:53' prior: 50864169!
- aSubtrahend

	^ self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:48:01' prior: 50864738!
- aSubtrahend

	^ aSubtrahend sustraerUnSustraendoVeces: self! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:48:27' prior: 50864724!
* aFactor

	^ aFactor! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:48:35' prior: 50864743!
* aFactor

	^ self sumarSelfVecesUnMultiplicador: aFactor + aFactor! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:48:51' prior: 50864733!
/ aDivisor

	^ aDivisor divideUno! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:49:04' prior: 50864396!
/ aDivisor

	self < aDivisor 
		ifTrue: [ self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor] 
		ifFalse: [ self = aDivisor 
					ifTrue: [ ^I ] 
					ifFalse: [ ^ ((self - aDivisor) / aDivisor) next ] ]
	! !
!I class methodsFor: 'private' stamp: 'ja 4/7/2021 15:49:38' prior: 50864542!
divideUno

	^ self! !
!I class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:50:05' prior: 50865051!
/ aDivisor

	^ aDivisor divideOne! !
!I class methodsFor: 'private' stamp: 'ja 4/7/2021 15:50:17'!
divideOne

	^ self! !
!II class methodsFor: 'private' stamp: 'ja 4/7/2021 15:50:17'!
divideOne

	^ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .! !

!methodRemoval: I class #divideUno stamp: 'ja 4/7/2021 15:50:17'!
divideUno

	^ self!

!methodRemoval: II class #divideUno stamp: 'ja 4/7/2021 15:50:17'!
divideUno

	^ self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor .!
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:53:22' prior: 50865036!
- aSubtrahend

	^ aSubtrahend decreaseTimes: self! !
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 15:53:36' prior: 50865091!
- aSubtrahend

	^ aSubtrahend decreaseASubtrahendTimes: self! !
!I class methodsFor: 'private' stamp: 'ja 4/7/2021 15:54:09'!
decreaseASubtrahendTimes: aValue

	^ aValue previous! !
!II class methodsFor: 'private' stamp: 'ja 4/7/2021 15:54:34'!
decreaseASubtrahendTimes: aValue

	^ aValue previous - self previous! !

!methodRemoval: II class #sustraerUnSustraendoVeces: stamp: 'ja 4/7/2021 15:55:03'!
sustraerUnSustraendoVeces: valor

	^valor previous - self previous!

!methodRemoval: I class #sustraerUnSustraendoVeces: stamp: 'ja 4/7/2021 15:55:08'!
sustraerUnSustraendoVeces: valor

	^ valor previous!
!II class methodsFor: 'arithmetic operations' stamp: 'ja 4/7/2021 16:01:54' prior: 50865045!
* aFactor

	^ self multiplySelfTimes: aFactor + aFactor! !
!II class methodsFor: 'private' stamp: 'ja 4/7/2021 16:02:27'!
multiplySelfTimes: aValue

	^self previous * aValue! !
!II class methodsFor: 'private' stamp: 'ja 4/7/2021 16:02:30' prior: 50865123!
multiplySelfTimes: aValue

	^ self previous * aValue! !

!methodRemoval: II class #sumarSelfVecesUnMultiplicador: stamp: 'ja 4/7/2021 16:02:38'!
sumarSelfVecesUnMultiplicador: valor

	^self previous * valor!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'ja 4/7/2021 16:02:50'!
PASSED!
!II class methodsFor: 'error description' stamp: 'ja 4/7/2021 16:03:45' prior: 50864411!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	
	^ 'No se puede dividir por un numero mayor'! !
!II class methodsFor: 'private' stamp: 'ja 4/7/2021 16:04:20' prior: 50864603!
previous: aValue

	previous _ aValue ! !
!I class methodsFor: 'private' stamp: 'ja 4/7/2021 16:05:10' prior: 50864105!
previous

	^ self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !
!I class methodsFor: 'private' stamp: 'ja 4/7/2021 16:05:18' prior: 50863415!
next

	^ II! !

III / II.!

IIII / II.!

!classDefinition: #IIIII category: 'Workspace-Objects' stamp: 'ja 4/7/2021 16:10:36'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Workspace-Objects'!

IIIII / II.!

IIII + IIII.!

!classDefinition: #IIIII category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIII subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIII subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIII class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIII category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIIII subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIIII class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIIII category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIIIII subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIIIII class' category: 'Numeros Naturales' stamp: 'ja 4/7/2021 16:10:54'!
IIIIIIII class
	instanceVariableNames: ''!

IIIIIIII / II.!

IIIIII / II.!

IIIIII / IIII. !
!II class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50849241!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865248!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865256!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865264!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865272!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIII.
	previous := IIIII.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865280!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIIII.
	previous := IIIIII.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'ja 4/7/2021 16:13:12' overrides: 50865288!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIIIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	previous := IIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIII.
	previous := IIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIIII.
	previous := IIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'ja 4/7/2021 16:13:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIIIIII.!

----QUIT----(7 April 2021 16:36:22) CuisUniversity-4532.image priorSource: 17060732!

----STARTUP---- (12 April 2021 21:25:37) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/tps-catedra-2021/2021-1c/13-Repetido/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44'!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50865395!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50865652!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50865412!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50865679!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50865700!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/12/2021 21:36:14'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/12/2021 21:36:14'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56'!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50865756!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50865669!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/12/2021 21:39:29'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50865767!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50865713!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 21:41:17'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:41:41' overrides: 16927572!
setUp

	customerBook1 _ CustomerBook new. ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:18' prior: 50865784!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	self yyy: (self xxx:[customerBook1 addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/12/2021 21:42:20'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:42' prior: 50865794!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook1 removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/12/2021 21:42:43'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:50:51' prior: 50865843!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	"self createCustomerBookWithPaulMcCartney."
		
	self yyy: (self xxx:[self removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

TestCase!

----STARTUP---- (12 April 2021 22:06:04) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:07:19'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13'!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09'!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44'!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50865921!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50866178!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50865938!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50866205!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50866226!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56'!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50866252!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50866195!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50866263!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50866239!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

----STARTUP---- (12 April 2021 22:08:18) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:21'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13'!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09'!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44'!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50866348!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50866605!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50866365!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50866632!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50866653!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56'!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50866679!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50866622!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50866690!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50866666!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:41:41' overrides: 16927572!
setUp

	customerBook1 _ CustomerBook new. ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:18' prior: 50866703!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	self yyy: (self xxx:[customerBook1 addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:42' prior: 50866713!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook1 removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:50:51' prior: 50866756!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	"self createCustomerBookWithPaulMcCartney."
		
	self yyy: (self xxx:[self removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19' prior: 50866748!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13' prior: 50866768!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12' prior: 50866385!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25' prior: 50866397!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25' prior: 50866412!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28' prior: 50866431!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47' prior: 50866452!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11' prior: 50866468!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50866501!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50866507!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' prior: 50866512 overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50866518!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50866528!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50866532!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09' prior: 50866537!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50866541!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52' prior: 50866554!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51' prior: 50866560!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50866566!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:23'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:23'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13' prior: 50866583!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09' prior: 50866588!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44' prior: 50866593!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50866827!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50867097!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50866844!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50867124!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50867145!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56' prior: 50866685!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50867171!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50867114!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50867182!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50867158!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

----STARTUP---- (12 April 2021 22:08:46) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13'!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09'!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44'!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50867267!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50867524!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50867284!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50867551!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50867572!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56'!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50867598!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50867541!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50867609!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50867585!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:41:41' overrides: 16927572!
setUp

	customerBook1 _ CustomerBook new. ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:18' prior: 50867622!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	self yyy: (self xxx:[customerBook1 addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:42' prior: 50867632!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook1 removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:50:51' prior: 50867675!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	"self createCustomerBookWithPaulMcCartney."
		
	self yyy: (self xxx:[self removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:48'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19' prior: 50867667!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13' prior: 50867687!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12' prior: 50867304!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25' prior: 50867316!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25' prior: 50867331!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28' prior: 50867350!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47' prior: 50867371!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11' prior: 50867387!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50867420!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50867426!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' prior: 50867431 overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867437!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867447!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867451!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09' prior: 50867456!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867460!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52' prior: 50867473!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51' prior: 50867479!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867485!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13' prior: 50867502!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09' prior: 50867507!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44' prior: 50867512!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50867746!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50868016!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50867763!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50868043!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50868064!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56' prior: 50867604!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50868090!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50868033!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50868101!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50868077!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19' prior: 50868114!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13' prior: 50868124!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12' prior: 50867784!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25' prior: 50867797!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25' prior: 50867813!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28' prior: 50867833!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47' prior: 50867854!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11' prior: 50867870!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50867904!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50867910!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' prior: 50867916 overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867922!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867932!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867937!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09' prior: 50867942!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867947!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52' prior: 50867961!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51' prior: 50867968!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50867974!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:49'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13' prior: 50867992!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09' prior: 50867998!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44' prior: 50868004!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50868183!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50868453!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50868200!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50868480!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50868501!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56' prior: 50868096!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50868527!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50868470!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50868538!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50868514!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:41:41' prior: 50867662 overrides: 16927572!
setUp

	customerBook1 _ CustomerBook new. ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:18' prior: 50868551!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	self yyy: (self xxx:[customerBook1 addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:42:42' prior: 50868561!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook1 removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:50:51' prior: 50868605!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	"self createCustomerBookWithPaulMcCartney."
		
	self yyy: (self xxx:[self removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19' prior: 50868597!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13' prior: 50868617!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12' prior: 50868221!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25' prior: 50868234!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25' prior: 50868250!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28' prior: 50868270!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47' prior: 50868291!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11' prior: 50868307!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50868341!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26' prior: 50868347!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' prior: 50868353 overrides: 16896425!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50868359!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50868369!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50868374!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09' prior: 50868379!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50868384!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52' prior: 50868398!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51' prior: 50868405!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50868411!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:08:50'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:13' prior: 50868429!
customerAlreadyExistsErrorMessage

	^'customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/12/2021 16:39:09' prior: 50868435!
customerCanNotBeEmptyErrorMessage

	^'customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:32:44' prior: 50868441!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:34' prior: 50868676!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:34:54' prior: 50868946!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:41' prior: 50868693!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:35:57' prior: 50868973!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:36:01' prior: 50868994!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:37:56' prior: 50868533!
yyy: 	aBlock1 yyy: aBlock2
 
	self assert: aBlock1 value < aBlock2
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:38:12' prior: 50869020!
yyy: 	aBlock1 yyy: number
 
	self assert: aBlock1 value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:25' prior: 50868963!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	"self assert: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) < (50 * millisecond)."
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:39:42' prior: 50869031!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self yyy: (self xxx:[customerBook addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 21:40:20' prior: 50869007!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/12/2021 22:09:37'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 22:09:54' prior: 50869044!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	
	self yyy: (self xxx:[customerBook1 addCustomerNamed: 'John Lennon']) yyy: (50 * millisecond).
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/12/2021 22:09:56'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/12/2021 22:10:14' prior: 50869054!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: (self xxx:[customerBook1 removeCustomerNamed: paulMcCartney.]) yyy: (100 * millisecond).
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/12/2021 22:10:16'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/12/2021 22:10:18'!
PASSED!

----SNAPSHOT----(12 April 2021 22:10:50) CuisUniversity-4532.image priorSource: 17078462!

----QUIT----(12 April 2021 22:10:53) CuisUniversity-4532.image priorSource: 17199597!

----STARTUP---- (14 April 2021 15:22:38) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:44:31' prior: 50869081!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	
	self yyy: [customerBook1 addCustomerNamed: 'John Lennon'] yyy: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:46:45' prior: 50869026!
yyy: 	aBlock1 yyy: number
 	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) value < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:46:52' prior: 50869156!
yyy: 	aBlock1 yyy: number
 	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:46:56' prior: 50869172!
yyy: 	aBlock1 yyy: number
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 15:47:01'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:47:15' prior: 50869093!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self yyy: [customerBook1 removeCustomerNamed: paulMcCartney] yyy: (100 * millisecond).
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 15:47:18'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:53:15'!
do: aBlock1 compareLessTimeThat: number
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:54:54'!
assertDo: aBlock1 takeLessTimeThat: number
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
! !

!methodRemoval: CustomerBookTest #do:compareLessTimeThat: stamp: 'ja 4/14/2021 15:54:57'!
do: aBlock1 compareLessTimeThat: number
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:56:53' prior: 50869236!
assertDo: aBlock takeLessTimeThat: aMaxTime
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < aMaxTime
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:57:37' prior: 50869148!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	
	self assertDo: [customerBook1 addCustomerNamed: 'John Lennon'] takeLessTimeThat: (50 * millisecond).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:57:44' prior: 50869280!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	
	self assertDo: [customerBook1 addCustomerNamed: 'John Lennon'] takeLessTimeThat: 50 * millisecond.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 15:57:54'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 15:59:34' prior: 50869206!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	
	self assertDo: [customerBook1 removeCustomerNamed: paulMcCartney] takeLessTimeThat: 100 * millisecond.
	
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 15:59:38'!
PASSED!

!methodRemoval: CustomerBookTest #yyy:yyy: stamp: 'ja 4/14/2021 16:00:10'!
yyy: 	aBlock1 yyy: number
 	
	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock1 value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	millisecondsAfterRunning  - millisecondsBeforeRunning .
	
	self assert: (millisecondsAfterRunning  - millisecondsBeforeRunning) < number
	
!

!methodRemoval: CustomerBookTest #xxx: stamp: 'ja 4/14/2021 16:00:12'!
xxx: aBlock

	|millisecondsBeforeRunning millisecondsAfterRunning|
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^ millisecondsAfterRunning  - millisecondsBeforeRunning .
	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:00:31' prior: 50868714!
test03CanNotAddACustomerWithEmptyName 

	[ customerBook1 addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook1 isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:09:25'!
do: aBlock throw: anException asserting: assertionsBlock ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:10:08' prior: 50869353!
do: aBlock throw: anException asserting: assertionsBlock 

	aBlock value
		on: anException 
		do: assertionsBlock value.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:10:53' prior: 50869342!
test03CanNotAddACustomerWithEmptyName 

	self do:[ customerBook1 addCustomerNamed: ''. self fail ]
		throw: Error 
		asserting: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook1 isEmpty ]! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:10:57'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:10:57'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:11:34' prior: 50869365!
test03CanNotAddACustomerWithEmptyName 

	self do:[ customerBook1 addCustomerNamed: '']
		throw: Error 
		asserting: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook1 isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:11:52' prior: 50869358!
do: aBlock throw: anException asserting: assertionsBlock 

	[ aBlock value.  self fail ]
		on: anException 
		do: assertionsBlock value.! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:11:55'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:11:55'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:12:23'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:12:23'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:13:13' prior: 50869394!
do: aBlock throw: anException asserting: assertionsBlock 

	[ aBlock value.  self fail ]
		on: anException 
		do: assertionsBlock.! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:13:16'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:13:30' prior: 50869415!
do: aBlock throw: anException asserting: assertionsBlock 

	[ aBlock value.  self fail ]
		on: anException 
		do: assertionsBlock! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:14:05' prior: 50868727!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self do:[ customerBook removeCustomerNamed: 'Paul McCartney' ]
		throw: NotFound 
		asserting: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:14:25' prior: 50869433!
test04CanNotRemoveAnInvalidCustomer
	
	| johnLennon |
	
	johnLennon := 'John Lennon'.
	customerBook1 addCustomerNamed: johnLennon.
	
	self do:[ customerBook1 removeCustomerNamed: 'Paul McCartney' ]
		throw: NotFound 
		asserting: [ :anError | 
			self assert: customerBook1 numberOfCustomers = 1.
			self assert: (customerBook1 includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 16:14:28'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:15:37' prior: 50868743!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook1 numberOfActiveCustomers.
	self assert: 1 equals: customerBook1 numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook1 numberOfCustomers.
	self assert: (customerBook1 includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:16:05' prior: 50868763!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	customerBook1 removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook1 numberOfActiveCustomers.
	self assert: 0 equals: customerBook1 numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook1 numberOfCustomers.
	self deny: (customerBook1 includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:22:10'!
assertActiveCustomers: anAmountOfActiveCustomers andSuspendCustomers: anAmountOfSuspendedCustomers

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook1 numberOfActiveCustomers.
	self assert: 1 equals: customerBook1 numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook1 numberOfCustomers.
	self assert: (customerBook1 includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:22:49' prior: 50869504!
assertActiveCustomers: anAmountOfActiveCustomers andSuspendCustomers: anAmountOfSuspendedCustomers
	
	self assert: anAmountOfActiveCustomers equals: customerBook1 numberOfActiveCustomers.
	self assert: anAmountOfSuspendedCustomers equals: customerBook1 numberOfSuspendedCustomers.
	self assert: anAmountOfActiveCustomers + anAmountOfSuspendedCustomers equals: customerBook1 numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:24:08' prior: 50869467!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	
	self assertActiveCustomers: 1 andSuspendCustomers: 0.
	self assert: (customerBook1 includesCustomerNamed: paulMcCartney).
	
	
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:26:25'!
assertTotalCustomersAndActiveCustomers: anAmountOfActiveCustomers andSuspendedCustomers: anAmountOfSuspendedCustomers
	
	self assert: anAmountOfActiveCustomers equals: customerBook1 numberOfActiveCustomers.
	self assert: anAmountOfSuspendedCustomers equals: customerBook1 numberOfSuspendedCustomers.
	self assert: anAmountOfActiveCustomers + anAmountOfSuspendedCustomers equals: customerBook1 numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:27:23' prior: 50869540!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	
	self assertTotalCustomersAndActiveCustomers: 1 andSuspendedCustomers: 0.
	self assert: (customerBook1 includesCustomerNamed: paulMcCartney).
	
	
	

	
! !

!methodRemoval: CustomerBookTest #assertActiveCustomers:andSuspendCustomers: stamp: 'ja 4/14/2021 16:27:32'!
assertActiveCustomers: anAmountOfActiveCustomers andSuspendCustomers: anAmountOfSuspendedCustomers
	
	self assert: anAmountOfActiveCustomers equals: customerBook1 numberOfActiveCustomers.
	self assert: anAmountOfSuspendedCustomers equals: customerBook1 numberOfSuspendedCustomers.
	self assert: anAmountOfActiveCustomers + anAmountOfSuspendedCustomers equals: customerBook1 numberOfCustomers.
	

	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:27:42' prior: 50869485!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	customerBook1 removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook1 numberOfActiveCustomers.
	self assert: 0 equals: customerBook1 numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook1 numberOfCustomers.
	
	self deny: (customerBook1 includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:27:58' prior: 50869601!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	customerBook1 removeCustomerNamed: paulMcCartney.
	
	self assertTotalCustomersAndActiveCustomers: 0 andSuspendedCustomers: 0.
	self deny: (customerBook1 includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:05'!
FAILURE!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:05'!
FAILURE!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:11'!
FAILURE!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:11'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:28:32' prior: 50869570!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook1 addCustomerNamed: paulMcCartney.
	customerBook1 suspendCustomerNamed: paulMcCartney.
	
	self assertTotalCustomersAndActiveCustomers: 0 andSuspendedCustomers: 1.
	self assert: (customerBook1 includesCustomerNamed: paulMcCartney).
	
	
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:34'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:28:41'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:30:07' prior: 50868784!
test07CanNotSuspendAnInvalidCustomer
	
	| johnLennon |
	
	johnLennon := 'John Lennon'.
	customerBook1 addCustomerNamed: johnLennon.
	
	self do:[ customerBook1 suspendCustomerNamed: 'George Harrison' ]
		throw: CantSuspend 
		asserting: [ :anError | 
			self assert: customerBook1 numberOfCustomers = 1.
			self assert: (customerBook1 includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 16:30:13'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:30:37' prior: 50868800!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self do:[ customerBook suspendCustomerNamed: johnLennon ]
		throw: CantSuspend 
		asserting: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'ja 4/14/2021 16:30:54' prior: 50869703!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| johnLennon |
			
	johnLennon := 'John Lennon'.
	customerBook1 addCustomerNamed: johnLennon.
	customerBook1 suspendCustomerNamed: johnLennon.
	
	self do:[ customerBook1 suspendCustomerNamed: johnLennon ]
		throw: CantSuspend 
		asserting: [ :anError | 
			self assert: customerBook1 numberOfCustomers = 1.
			self assert: (customerBook1 includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 16:30:56'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 16:31:01'!
PASSED!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'ja 4/14/2021 16:31:20'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869288!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	
	self assertDo: [customerBook addCustomerNamed: 'John Lennon'] takeLessTimeThat: 50 * millisecond.
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869449!
test04CanNotRemoveAnInvalidCustomer
	
	| johnLennon |
	
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self do:[ customerBook removeCustomerNamed: 'Paul McCartney' ]
		throw: NotFound 
		asserting: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869300!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| paulMcCartney |
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assertDo: [customerBook removeCustomerNamed: paulMcCartney] takeLessTimeThat: 100 * millisecond.
	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50868592 overrides: 16927572!
setUp

	customerBook _ CustomerBook new. ! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869554!
assertTotalCustomersAndActiveCustomers: anAmountOfActiveCustomers andSuspendedCustomers: anAmountOfSuspendedCustomers
	
	self assert: anAmountOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: anAmountOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: anAmountOfActiveCustomers + anAmountOfSuspendedCustomers equals: customerBook numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869721!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| johnLennon |
			
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self do:[ customerBook suspendCustomerNamed: johnLennon ]
		throw: CantSuspend 
		asserting: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869621!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assertTotalCustomersAndActiveCustomers: 0 andSuspendedCustomers: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869685!
test07CanNotSuspendAnInvalidCustomer
	
	| johnLennon |
	
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self do:[ customerBook suspendCustomerNamed: 'George Harrison' ]
		throw: CantSuspend 
		asserting: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869658!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assertTotalCustomersAndActiveCustomers: 0 andSuspendedCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	
	

	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'ja 4/14/2021 16:31:20' prior: 50869383!
test03CanNotAddACustomerWithEmptyName 

	self do:[ customerBook addCustomerNamed: '']
		throw: Error 
		asserting: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 16:31:30'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 16:31:30'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:49:19' prior: 50868904!
suspendCustomerNamed: aName 
	
	active remove: aName ifAbsent: [^CantSuspend signal].
	
	suspended add: aName
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 16:49:24'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 16:49:24'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:54:40'!
xxx: aCollectionOfCustomers xxx: aName
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:55:40' prior: 50868877!
removeCustomerNamed: aName 
 
	self xxx: active xxx: aName .
	self xxx: suspended xxx: aName.
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 16:55:44'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 16:55:44'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 16:55:44'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 16:55:44'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:55:44'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 16:55:44'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 16:55:44'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 16:55:44'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:59:30'!
xxx: aCollectionOfCustomers xxx: aName continue: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].
	^ aBlock value.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:59:32' prior: 50870026!
xxx: aCollectionOfCustomers xxx: aName continue: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 17:00:11' prior: 50869990!
removeCustomerNamed: aName 
 
	self xxx: active xxx: aName continue: [
		self xxx: suspended xxx: aName continue: [^ NotFound signal.]]  
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 17:00:14'!
PASSED!

!methodRemoval: CustomerBook #xxx:xxx: stamp: 'ja 4/14/2021 17:00:19'!
xxx: aCollectionOfCustomers xxx: aName
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].
!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 17:03:20'!
removeFrom: aCollectionOfCustomers thisCustomer: aName ifNotFoundDo: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 17:04:02' prior: 50870049!
removeCustomerNamed: aName 
 
	self removeFrom: active thisCustomer: aName ifNotFoundDo: [
		self removeFrom: suspended thisCustomer: aName ifNotFoundDo: [^ NotFound signal.]]  
	
! !

!methodRemoval: CustomerBook #xxx:xxx:continue: stamp: 'ja 4/14/2021 17:04:07'!
xxx: aCollectionOfCustomers xxx: aName continue: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 17:04:11'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 17:06:06'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 17:06:06'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26' prior: 50869944!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 16:49:19' prior: 50870186!
suspendCustomerNamed: aName 
	
	active remove: aName ifAbsent: [^CantSuspend signal].
	
	suspended add: aName
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 17:09:48'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 17:43:51'!
PASSED!

----QUIT----(14 April 2021 17:44:04) CuisUniversity-4532.image priorSource: 17199688!

----STARTUP---- (14 April 2021 18:45:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 18:46:10' prior: 50870107!
removeCustomerNamed: aName 
 
	"self removeFrom: active thisCustomer: aName ifNotFoundDo: [
		self removeFrom: suspended thisCustomer: aName ifNotFoundDo: [^ NotFound signal.]]  "
	
	active remove: aName ifAbsent: [
		suspended remove: aName ifAbsent: [^ NotFound signal]]
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/14/2021 18:46:13'!
PASSED!

----QUIT----(14 April 2021 18:49:34) CuisUniversity-4532.image priorSource: 17235493!

----STARTUP---- (14 April 2021 22:43:37) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/14/2021 22:44:20' prior: 50870267!
removeCustomerNamed: aName 
 
	self removeFrom: active thisCustomer: aName ifNotFoundDo: [
		self removeFrom: suspended thisCustomer: aName ifNotFoundDo: [^ NotFound signal.]]  
	
	
! !

----SNAPSHOT----(14 April 2021 22:46:21) CuisUniversity-4532.image priorSource: 17237040!

----QUIT----(14 April 2021 23:36:31) CuisUniversity-4532.image priorSource: 17237529!

----STARTUP---- (15 April 2021 14:30:36) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!CustomerBook methodsFor: 'private' stamp: 'ja 4/15/2021 14:31:28'!
removeFrom: aCollectionOfCustomers thisCustomer: aName ifAbsent: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:31:56' prior: 50870315!
removeCustomerNamed: aName 
 
	self removeFrom: active thisCustomer: aName ifAbsent: [
		self removeFrom: suspended thisCustomer: aName ifAbsent: [^ NotFound signal.]]  
	
	
! !

!methodRemoval: CustomerBook #removeFrom:thisCustomer:ifNotFoundDo: stamp: 'ja 4/15/2021 14:32:00'!
removeFrom: aCollectionOfCustomers thisCustomer: aName ifNotFoundDo: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:32:21'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:32:21'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:37:28' prior: 50868852!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	"((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ]."
	[self includesCustomerNamed: aName] ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:38:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:38:04'!
ERROR!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:38:04'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:38:40' prior: 50870395!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	"((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ]."
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:38:43'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:38:43'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:40:55' prior: 50870438!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:41:04'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:41:54'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'ja 4/15/2021 14:43:06'!
PASSED!

----STARTUP---- (15 April 2021 14:47:16) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!CustomerBook methodsFor: 'private' stamp: 'ja 4/15/2021 14:31:28'!
removeFrom: aCollectionOfCustomers thisCustomer: aName ifAbsent: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:31:56' prior: 50870315!
removeCustomerNamed: aName 
 
	self removeFrom: active thisCustomer: aName ifAbsent: [
		self removeFrom: suspended thisCustomer: aName ifAbsent: [^ NotFound signal.]]  
	
	
! !

!methodRemoval: CustomerBook #removeFrom:thisCustomer:ifNotFoundDo: stamp: 'ja 4/15/2021 14:47:18'!
removeFrom: aCollectionOfCustomers thisCustomer: aName ifNotFoundDo: aBlock
 
	1 to: aCollectionOfCustomers size do: 
	[ :index |
		aName = (aCollectionOfCustomers at: index)
			ifTrue: [
				aCollectionOfCustomers removeAt: index.
				^ aName 
			] 
	].

	^ aBlock value.
!
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:37:28' prior: 50868852!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	"((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ]."
	[self includesCustomerNamed: aName] ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:38:40' prior: 50870616!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	"((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ]."
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'ja 4/15/2021 14:40:55' prior: 50870629!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

----QUIT----(15 April 2021 14:47:57) CuisUniversity-4532.image priorSource: 17237620!

----STARTUP---- (17 April 2021 15:51:08) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/tps-catedra-2021/2021-1c/14-Numeros/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ja 4/17/2021 15:51:37'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ja 4/17/2021 15:51:37'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ja 4/17/2021 15:51:37'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ja 4/17/2021 16:42:08'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ja 4/17/2021 16:42:08'!
ERROR!

----QUIT----(17 April 2021 16:42:38) CuisUniversity-4532.image priorSource: 17248005!

----STARTUP---- (19 April 2021 17:21:06) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


Object subclass: #XXX
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'Collections-Exercise'!

!classDefinition: #XXX category: 'Collections-Exercise' stamp: 'ja 4/19/2021 17:28:42'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Exercise'!
!XXX methodsFor: 'no messages' stamp: 'ja 4/19/2021 17:29:28'!
findOddsPart0

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
                index := index +1.
                ].
        ^odds! !

XXX findOddsPart0 .!

XXX new findOddsPart0 .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:33:01'!
findOddsPart1

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

	elements do:[:item | item odd ifTrue: [odds add: item]].

        ^odds! !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:33:10' prior: 50871450!
findOddsPart1

        | elements  odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.


	elements do:[:item | item odd ifTrue: [odds add: item]].

        ^odds! !

XXX new findOddsPart1 . !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:34:19'!
findOddsPart2

        | elements  odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.


	elements select:[:item | item odd ].

        ^odds! !

XXX new findOddsPart2 . !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:34:57' prior: 50871470!
findOddsPart2

        | elements |

        elements:= #(1 2 5 6 9).

	^elements select:[:item | item odd ].

  ! !

XXX new findOddsPart2 .  !

XXX new findOddsPart2 .  !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:35:52' prior: 50871479!
findOddsPart2

        | elements |

        elements:= #(1 2 5 6 9).

	^(elements select:[:item | item odd ] asOrderedCollection).

  ! !

XXX new findOddsPart2 .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:36:16' prior: 50871488!
findOddsPart2

        | elements |

        elements:= #(1 2 5 6 9).

	^(elements select:[:item | item odd ]) asOrderedCollection.

  ! !

XXX new findOddsPart2 .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:37:28'!
findDoubles

        | elements |

        elements:= #(1 2 5 6 9).

	^(elements collect:[:item | item * 2 ]) asOrderedCollection.

  ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:38:15' prior: 50871504!
findDoubles

        | elements doubles |

        elements:= #(1 2 5 6 9).
	doubles _ OrderedCollection  new.

	^doubles _ (elements collect:[:item | item * 2 ]) asOrderedCollection.

  ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:38:30' prior: 50871512!
findDoubles

        | elements doubles |

        elements:= #(1 2 5 6 9).
	doubles _ OrderedCollection  new.

	^doubles _ (elements collect:[:item | item * 2 ]).

  ! !

XXX new findDoubles .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:39:17' prior: 50871521!
findDoubles

        | elements  |

        elements:= #(1 2 5 6 9).

	^ elements collect:[:item | item * 2 ].

  ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:40:03'!
findFirstEven

        | elements  |

        elements:= #(1 2 5 6 9).

	^ elements findFirst:[:item | item even ].

  ! !

XXX new findFirstEven .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:40:42'!
findFirstEvenWithoutMatching

        | elements  |

        elements:= #(1 5 9).

	^ elements findFirst:[:item | item even ].

  ! !

XXX new findFirstEvenWithoutMatching .!
!XXX methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 17:43:50'!
findFirstEvenWithoutMatchingReturnString

        | elements  |

        elements:= #(1 5 9).

	^ elements detect:[:item | item even ] ifNone:[^'no hay'].

  ! !

----QUIT----(19 April 2021 18:28:39) CuisUniversity-4532.image priorSource: 17272518!

----STARTUP---- (19 April 2021 18:50:48) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


Object subclass: #YYY
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'Measures-Exercise'!

!classDefinition: #YYY category: 'Measures-Exercise' stamp: 'ja 4/19/2021 18:51:49'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Measures-Exercise'!
!YYY methodsFor: 'no messages' stamp: 'ja 4/19/2021 18:52:02'!
add10MetersPlus500Centimeters! !
!YYY methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 18:53:04' prior: 50871576!
add10MetersPlus500Centimeters

	^ (10*meter) + (500*centimeter) ! !

YYY new add10MetersPlus500Centimeters .!
!YYY methodsFor: 'as yet unclassified' stamp: 'ja 4/19/2021 18:54:53' prior: 50871580!
add10MetersPlus500Centimeters

! !

----QUIT----(19 April 2021 19:26:00) CuisUniversity-4532.image priorSource: 17277057!

----STARTUP---- (22 April 2021 15:19:51) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'ja 4/22/2021 15:20:15'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'ja 4/22/2021 15:20:16'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'ja 4/22/2021 15:20:16'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'ja 4/22/2021 15:20:16'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/jampuero/Documentos/isw1/tps/isw1/14-Numeros/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ja 4/22/2021 15:21:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ja 4/22/2021 15:21:25'!
PASSED!
!Entero class methodsFor: 'instance creation' stamp: 'ja 4/22/2021 15:22:22' prior: 50872151!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue = 0 ifTrue: [^Cero new].

	aValue = 1 ifTrue: [^Uno new]	.
	
	aValue > 1 ifTrue: [^EnteroMayorAUno new initalizeWith: aValue].
	
	^Negativo new initalizeWith: aValue.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'ja 4/22/2021 15:22:57' overrides: 16896425!
initialize 
	
	value  = 0! !
!Uno methodsFor: 'private' stamp: 'ja 4/22/2021 15:23:11' overrides: 16896425!
initialize

	value  = 1! !
!Cero methodsFor: 'arithmetic operations' stamp: 'ja 4/22/2021 15:23:55' prior: 50872694 overrides: 16896425!
initialize 
	
	value  _ 0! !
!Entero class methodsFor: 'instance creation' stamp: 'ja 4/22/2021 15:24:20' prior: 50872678!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	self halt.
	aValue = 0 ifTrue: [^Cero new].

	aValue = 1 ifTrue: [^Uno new]	.
	
	aValue > 1 ifTrue: [^EnteroMayorAUno new initalizeWith: aValue].
	
	^Negativo new initalizeWith: aValue.! !

Cero new!
!Entero class methodsFor: 'instance creation' stamp: 'ja 4/22/2021 15:28:21' prior: 50872707!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	aValue = 0 ifTrue: [^Cero new].

	aValue = 1 ifTrue: [^Uno new]	.
	
	aValue > 1 ifTrue: [^EnteroMayorAUno new initalizeWith: aValue].
	
	^Negativo new initalizeWith: aValue.! !
!Uno methodsFor: 'private' stamp: 'ja 4/22/2021 15:30:38' prior: 50872698 overrides: 16896425!
initialize

	value  _ 1! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ja 4/22/2021 15:30:41'!
PASSED!

----STARTUP---- (25 April 2021 12:58:29) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/tps-catedra-2021/2021-1c/15-Stack/Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 12:59:12'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 12:59:43'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 12:59:43'!
ERROR!

----QUIT----(25 April 2021 13:00:17) CuisUniversity-4532.image priorSource: 17278082!

----STARTUP---- (25 April 2021 15:42:50) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 16:21:40'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:21:40'!
ERROR!
!OOStack methodsFor: 'no messages' stamp: 'ja 4/25/2021 16:24:31' overrides: 16896425!
initialize 

	^ true! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:24:41' prior: 50871831 overrides: 16896425!
initialize 

	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:24:59'!
isEmpty

	^ true

	! !

!methodRemoval: OOStack #initialize stamp: 'ja 4/25/2021 16:25:03'!
initialize 

	!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:25:07'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ja 4/25/2021 16:26:12'!
Object subclass: #OOStack
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:27:01' overrides: 16896425!
initialize 
	
	stack  _ OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:27:10' prior: 50871839!
isEmpty

	^ stack isEmpty 

	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:27:17'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:27:43'!
push: anElement

	stack add: anElement .! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 16:27:59'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:28:01'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:28:24'!
pop

	stack removeLast ! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 16:28:32'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:28:59' prior: 50871882!
pop

	^ stack removeLast ! !

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:29:08'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 16:29:10'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 16:29:11'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:29:12'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 16:29:56'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:30:33'!
top 

	^ stack last .! !

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:30:40'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 16:30:46'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 16:30:46'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:31:08' overrides: 16880927!
size 

	^ stack size ! !

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 16:31:14'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:32:44' prior: 50871889!
pop
	
	self size ifTrue:[self error: self stackEmptyErrorDescription].
	
	^ stack removeLast ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:32:58' prior: 50871929!
pop
	
	self size ifTrue:[self error: self class stackEmptyErrorDescription].
	
	^ stack removeLast ! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:33:05'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:33:05'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:33:37' prior: 50871935!
pop
	
	self size ifTrue: [self error: self class stackEmptyErrorDescription].
	
	^ stack removeLast ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:33:42' prior: 50871949!
pop
	
	self size ifTrue: [^self error: self class stackEmptyErrorDescription].
	
	^ stack removeLast ! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:33:46'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:33:46'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:33:55' prior: 50871956!
pop
	
	self size ifTrue: [self error: self class stackEmptyErrorDescription].
	
	^ stack removeLast ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:35:09' prior: 50871970!
pop
	
	(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription].
	
	^ stack removeLast ! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:35:17'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 16:35:41'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:36:09' prior: 50871908!
top 

	(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription].
	^ stack last .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:36:11' prior: 50871991!
top 

	(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription].
	
	^ stack last .! !

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:36:15'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 16:36:18'!
PASSED!

OOStack subclass: #OOStackEmpty
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmpty category: 'Stack-Exercise' stamp: 'ja 4/25/2021 16:41:38'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmpty category: 'Stack-Exercise' stamp: 'ja 4/25/2021 16:41:56'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackEmpty methodsFor: 'no messages' stamp: 'ja 4/25/2021 16:42:17' overrides: 50871998!
top

	self error: self class stackEmptyErrorDescription! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:42:21' overrides: 50871977!
pop

	self error: self class stackEmptyErrorDescription! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:43:02' prior: 50871977!
pop
	
	"(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription]."
	
	^ stack removeLast ! !
!OOStackNotEmpty methodsFor: 'no messages' stamp: 'ja 4/25/2021 16:43:57' overrides: 50872078!
pop 

	^ stack removeLast ! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:07' prior: 50872085 overrides: 50872078!
pop 
	
	^ stack removeLast ! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:19' overrides: 50871998!
top

	^ stack last.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:33' prior: 50871998!
top 

	"(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription]."
	
	^ stack last .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:40' prior: 50872099!
top 

	"(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription]."
	
	self subclassResponsibility 
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:46' prior: 50872078!
pop
	
	"(self size = 0) ifTrue: [self error: self class stackEmptyErrorDescription]."
	
	self subclassResponsibility ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:44:58' prior: 50871865!
isEmpty

	self subclassResponsibility 
	! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:45:11' overrides: 50872120!
isEmpty 

	^ true ! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:45:21' overrides: 50872120!
isEmpty 

	^ false ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:45:47' prior: 50871860 overrides: 16896425!
initialize 
	
	stack  _ OOStackEmpty new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:46:37' prior: 50871872!
push: anElement

	"stack add: anElement ."
	self subclassResponsibility ! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:48:10' overrides: 50872139!
push: anElement

	| otherStack |
	
	otherStack _ OOStackNotEmpty new.
	
	! !
!OOStackEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:48:47' prior: 50872145 overrides: 50872139!
push: anElement

	| otherStack |
	
	otherStack _ OOStackNotEmpty new.
	
	^ otherStack push: anElement .
	
	! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:49:06' overrides: 50872139!
push: anElement

	stack add: anElement ! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:49:44' overrides: 50872134!
initialize

	stack _ OrderedCollection new! !
!OOStackNotEmpty methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 16:50:45' prior: 50872090 overrides: 50872113!
pop 

	^ stack removeLast ! !

!methodRemoval: OOStackEmpty #isEmpty stamp: 'ja 4/25/2021 17:13:46'!
isEmpty 

	^ true !

!methodRemoval: OOStackEmpty #pop stamp: 'ja 4/25/2021 17:13:49'!
pop

	self error: self class stackEmptyErrorDescription!

!methodRemoval: OOStackEmpty #push: stamp: 'ja 4/25/2021 17:13:51'!
push: anElement

	| otherStack |
	
	otherStack _ OOStackNotEmpty new.
	
	^ otherStack push: anElement .
	
	!

!methodRemoval: OOStackEmpty #top stamp: 'ja 4/25/2021 17:13:53'!
top

	self error: self class stackEmptyErrorDescription!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:14:09' prior: 50872134 overrides: 16896425!
initialize 
	
	stack  _ OrderedCollection new.! !

!classRemoval: #OOStackEmpty stamp: 'ja 4/25/2021 17:14:14'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNotEmpty stamp: 'ja 4/25/2021 17:14:17'!
OOStack subclass: #OOStackNotEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStackNode
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNode category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:15:36'!
Object subclass: #OOStackNode
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNode category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:15:43'!
Object subclass: #OOStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackNode subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:16:34'!
OOStackNode subclass: #Base
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackNode subclass: #NextNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NextNode category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:17:36'!
OOStackNode subclass: #NextNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackNode subclass: #NextNode
	instanceVariableNames: 'previous value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NextNode category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:18:05'!
OOStackNode subclass: #NextNode
	instanceVariableNames: 'previous value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'lastNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:18:37'!
Object subclass: #OOStack
	instanceVariableNames: 'lastNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:19:03'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:19:45' prior: 50872191 overrides: 16896425!
initialize 
	
	top  _ Base new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:20:08' prior: 50872120!
isEmpty

	^ top isEmpty
	! !
!Base methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:20:31'!
isEmpty
	
	^ true! !
!NextNode methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:20:42'!
isEmpty
	
	^ false ! !
!OOStackNode methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:20:51'!
isEmpty
	
	self subclassResponsibility ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:22:01' prior: 50872139!
push: anElement

	top _ NextNode from: top with: anElement .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:22:27' prior: 50872306!
push: anElement

	top _ NextNode from: top with: anElement .! !
!OOStackNode class methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:23:55'!
from: aStackNode with: anElement 

	^ self new initializeFrom: aStackNode with: anElement .! !

!methodRemoval: OOStackNode class #from:with: stamp: 'ja 4/25/2021 17:24:55'!
from: aStackNode with: anElement 

	^ self new initializeFrom: aStackNode with: anElement .!
!NextNode class methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:25:00'!
from: aStackNode with: anElement 

	^ self new initializeFrom: aStackNode with: anElement .! !
!NextNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:25:22'!
initializeFrom: aStackNode with: anElement

	previous _ aStackNode .
	value _ anElement ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:27:50' prior: 50871922 overrides: 16880927!
size 

	^ top size! !
!OOStackNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:28:00' overrides: 16880927!
size
	
	self subclassResponsibility ! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:28:10' overrides: 50872344!
size 

	^ 0! !
!NextNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:28:25' overrides: 50872344!
size 

	^ previous size + 1! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:31:07' prior: 50872113!
pop
	
	| lastNode |
	
	lastNode _ self top.
	top _ top previous.
	
	^ lastNode ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:31:32' prior: 50872106!
top 

	^ top value! !
!NextNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:31:47' overrides: 16881508!
value 

	^ value! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:31:58' overrides: 16881508!
value ! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:32:20' prior: 50872371 overrides: 16881508!
value 

	self error: OOStack  stackEmptyErrorDescription .! !
!OOStackNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:32:31' overrides: 16881508!
value! !
!OOStackNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:32:39' prior: 50872381 overrides: 16881508!
value

	self subclassResponsibility ! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:32:45' prior: 50872375 overrides: 50872385!
value 

	self error: OOStack stackEmptyErrorDescription .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 17:32:49'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 17:32:49'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 17:32:49'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:32:49'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 17:32:49'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:32:49'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 17:32:49'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:32:49'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 17:32:49'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:32:49'!
PASSED!
!NextNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:33:21'!
previous

	^ previous ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:34:18'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:34:47'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 17:35:26'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:35:26'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:37:31' prior: 50872288 overrides: 16896425!
initialize 
	
	top _ Base new.! !
!NextNode class methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:42:29' prior: 50872327!
from: aPreviousStackNode with: anElement 

	^ self new initializeFrom: aPreviousStackNode with: anElement .! !
!NextNode methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:43:19' prior: 50872333!
initializeFrom: aPreviousStackNode with: anElement

	previous _ aPreviousStackNode .
	value _ anElement ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:47:04' prior: 50872530 overrides: 16896425!
initialize 
	
	top _ Base from: self. ! !

Object subclass: #OOStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNode category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:47:59'!
Object subclass: #OOStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackNode subclass: #Base
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Base category: 'Stack-Exercise' stamp: 'ja 4/25/2021 17:48:08'!
OOStackNode subclass: #Base
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Base class methodsFor: 'no messages' stamp: 'ja 4/25/2021 17:49:39'!
from: anOOStack
	
	^ self new initializeFrom: anOOStack 
	! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:49:59'!
initializeFrom: anOOStack 

	stack _ anOOStack ! !
!Base methodsFor: 'as yet unclassified' stamp: 'ja 4/25/2021 17:50:08' prior: 50872390 overrides: 50872385!
value 

	self error: stack class stackEmptyErrorDescription .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/25/2021 17:50:17'!
PASSED!

----SNAPSHOT----(25 April 2021 17:53:11) CuisUniversity-4532.image priorSource: 17284507!

----QUIT----(25 April 2021 17:53:40) CuisUniversity-4532.image priorSource: 17311092!

----STARTUP---- (26 April 2021 15:58:45) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(26 April 2021 16:25:01) CuisUniversity-4532.image priorSource: 17311183!

----STARTUP---- (26 April 2021 17:22:56) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'ja 4/26/2021 17:26:38'!
find: aPrefix! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:27:28' prior: 50872638!
find: aPrefix

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:27:52' prior: 50872642!
find: aPrefix

	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NameOfSubclass category: 'Stack-Exercise' stamp: 'ja 4/26/2021 17:27:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NameOfSubclass stamp: 'ja 4/26/2021 17:28:17'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'ja 4/26/2021 17:28:23'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'no messages' stamp: 'ja 4/26/2021 17:29:10'!
test01

	| stack |
	
	stack _ OOStack new.
	stack push: 'hola'.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:29:38' prior: 50872680!
test01

	| stack finder |
	
	finder _ SentenceFinderByPrefix  new.
	stack _ OOStack new.
	stack push: 'hola'.
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:30:57' prior: 50872686!
test01

	| stack finder |
	
	stack _ OOStack new.
	stack push: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	
	
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:32:59' prior: 50872694!
test01

	| stack finder |
	
	stack _ OOStack new.
	stack push: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: #('hola').
	

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:34:24' prior: 50872646!
find: aPrefix

	
	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'ja 4/26/2021 17:35:01'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack sentencesFound'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:35:22' prior: 50872712!
find: aPrefix
	
	sentencesFound _ OrderedCollection  new.
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:36:35' prior: 50872730!
find: aPrefix
	
	sentencesFound _ OrderedCollection  new.
	
	
	
	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack sentencesFound reverseStackSentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'ja 4/26/2021 17:40:15'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack sentencesFound reverseStackSentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:43:06' prior: 50872736!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) do:[ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:45:08' prior: 50872757!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) do:[ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:45:43'!
addToSentencesFoundIfContainsPrefix: aPrefix in: atop.
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:46:15' prior: 50872766!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) do:[ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:51:13' prior: 50872777!
addToSentencesFoundIfContainsPrefix: aPrefix in: aSentence

	(aSentence beginsWith: aPrefix) ifTrue: [
		sentencesFound add: aSentence .
		]
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:51:28' prior: 50872794!
addToSentencesFoundIfContainsPrefix: aPrefix in: aSentence

	(aSentence beginsWith: aPrefix) ifTrue: [ sentencesFound add: aSentence ]
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:52:10' prior: 50872783!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) whileTrue:[ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:52:18' prior: 50872810!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:53:42' prior: 50872821!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[:item | stack push: item].
	
	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:53:49' prior: 50872832!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack top isKindOf: NextNode) whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 17:54:44'!
ERROR!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:54:52'!
with: anOOStack 
	self shouldBeImplemented.! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:55:12' prior: 50872862!
with: anOOStack 
	
	^ self new initializeWith: anOOStack ! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 17:55:40'!
initializeWith: anOOStack 

	stack _ anOOStack .
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 17:57:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 17:57:14'!
ERROR!

stack top!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:00:11' prior: 50872846!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	(stack size > 0) whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:00:32'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:01:11' prior: 50872883!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	
	[stack size > 0] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:01:38'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:02:24' prior: 50872899!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	[stack size > 0] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:04:00'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:04:05'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:04:05'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:05:06' prior: 50872702!
test01

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: #('hola').
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:05:13' prior: 50872938!
test01

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:05:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:06:21'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:09:59' prior: 50872915!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	self findAllSentencesBeginingWith: aPrefix.
	
	[stack size > 0] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:10:17'!
findAllSentencesBeginingWith: aPrefix.
	
	[stack size > 0] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:10:29' prior: 50872965!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	self findAllSentencesBeginingWith: aPrefix.
	
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:12:25' prior: 50872991!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	self findAllSentencesBeginingWith: aPrefix.
	self recoverStack.
	reverseStackSentences do:[ :item | stack push: item ].
	
	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:12:35'!
recoverStack
	
	reverseStackSentences do:[ :item | stack push: item ]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:12:46' prior: 50873002!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	
	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:12:52' prior: 50873019!
find: aPrefix
	
	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:14:51' prior: 50873029!
find: aPrefix
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:15:06'!
startInternalStructures

	sentencesFound _ OrderedCollection new.
	reverseStackSentences _ OrderedCollection new.	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:15:08' prior: 50873047!
startInternalStructures

	sentencesFound _ OrderedCollection new.

	reverseStackSentences _ OrderedCollection new.	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:17:33' prior: 50872981!
findAllSentencesBeginingWith: aPrefix.
	
	[stack isEmpty not] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:19:02'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:19:40' prior: 50873063!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIfContainsPrefix: aPrefix in: top.
		].

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:26:40'!
addToSentencesFoundIf: aSentence beginsWith: aPrefix

	(aSentence beginsWith: aPrefix) ifTrue: [ sentencesFound add: aSentence ]
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:27:27' prior: 50873076!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ | top | 
		top _ stack pop.
		reverseStackSentences add: top.
		self addToSentencesFoundIf: top beginsWith: aPrefix .
		].

	
	! !

!methodRemoval: SentenceFinderByPrefix #addToSentencesFoundIfContainsPrefix:in: stamp: 'ja 4/26/2021 18:27:33'!
addToSentencesFoundIfContainsPrefix: aPrefix in: aSentence

	(aSentence beginsWith: aPrefix) ifTrue: [ sentencesFound add: aSentence ]
	
	!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:27:36'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:29:06' prior: 50872949!
test01

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:29:18'!
test02

	| stack finder res |
	
	stack _ OOStack new.
	stack push: ''.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:29:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02 stamp: 'ja 4/26/2021 18:29:26'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02 stamp: 'ja 4/26/2021 18:29:26'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:29:42' prior: 50873124!
test02

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test02 stamp: 'ja 4/26/2021 18:29:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:29:58'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:30:29'!
test01FindInEmptyStack

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:30:54'!
test01FindAPrefixInEmptyStack

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test01FindInEmptyStack stamp: 'ja 4/26/2021 18:30:54'!
test01FindInEmptyStack

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	!

!methodRemoval: SentenceFinderByPrefixTest #test01 stamp: 'ja 4/26/2021 18:30:58'!
test01

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:31:37' prior: 50873143!
test02

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: res.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01FindAPrefixInEmptyStack stamp: 'ja 4/26/2021 18:31:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02 stamp: 'ja 4/26/2021 18:31:39'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:33:40'!
test02FoundASetenceInStackWithAnElement

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: res.
	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test02 stamp: 'ja 4/26/2021 18:33:40'!
test02

	| stack finder res |
	
	stack _ OOStack new.
	stack push: 'hola'.
	res _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: res.
	

	
	!

!testRun: #SentenceFinderByPrefixTest #test01FindAPrefixInEmptyStack stamp: 'ja 4/26/2021 18:33:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 18:33:46'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:36:07'!
test01NoSetencesAreFoundInEmptyStack

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test01FindAPrefixInEmptyStack stamp: 'ja 4/26/2021 18:36:07'!
test01FindAPrefixInEmptyStack

	| stack finder res |
	
	stack _ OOStack new.
	res _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: res.
	

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:39:29' prior: 50873242!
test01NoSetencesAreFoundInEmptyStack

	| stack finder sentencesToReturn |
	
	stack _ OOStack new.
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:40:17' prior: 50873214!
test02FoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ OOStack new.
	stack push: 'hola'.
	sentencesToReturn _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:41:15'!
test03NotFoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ OOStack new.
	stack push: 'hola'.
	sentencesToReturn _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:41:37' prior: 50873288!
test03NotFoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ OOStack new.
	stack push: 'hola'.
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'a') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 18:41:41'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:43:52'!
emptySentecesToReturn

	^ OrderedCollection new.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:44:16'!
sentecesToReturnWithAnElement

	^ OrderedCollection with: 'hola'.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:44:51'!
sentecesToReturnWithManyElements

	^ OrderedCollection with: 'hola'; with: 'como'; with: 'estas'.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:46:44'!
sentecesToReturnWithManyElementsBeginingWithDifferentPrefix

	^ OrderedCollection with: 'hola'; with: 'como'; with: 'estas'.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #sentecesToReturnWithManyElements stamp: 'ja 4/26/2021 18:46:44'!
sentecesToReturnWithManyElements

	^ OrderedCollection with: 'hola'; with: 'como'; with: 'estas'.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:47:09'!
sentecesToReturnWithManyElementsBeginingWithSimilarPrefix

	^ OrderedCollection with: 'hola'; with: 'holala'; with: 'h'.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:56:10'!
emptyStack

	^ OrderedCollection new.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #emptySentecesToReturn stamp: 'ja 4/26/2021 18:56:10'!
emptySentecesToReturn

	^ OrderedCollection new.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:56:20' prior: 50873356!
emptyStack

	^ OOStack new.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:56:34'!
stackWithAnElement

	^ OrderedCollection with: 'hola'.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #sentecesToReturnWithAnElement stamp: 'ja 4/26/2021 18:56:34'!
sentecesToReturnWithAnElement

	^ OrderedCollection with: 'hola'.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:56:55'!
stackWithManyElementsBeginingWithDifferentPrefix

	^ OrderedCollection with: 'hola'; with: 'como'; with: 'estas'.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #sentecesToReturnWithManyElementsBeginingWithDifferentPrefix stamp: 'ja 4/26/2021 18:56:55'!
sentecesToReturnWithManyElementsBeginingWithDifferentPrefix

	^ OrderedCollection with: 'hola'; with: 'como'; with: 'estas'.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:57:11'!
stackWithManyElementsBeginingWithSimilarPrefix

	^ OrderedCollection with: 'hola'; with: 'holala'; with: 'h'.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #sentecesToReturnWithManyElementsBeginingWithSimilarPrefix stamp: 'ja 4/26/2021 18:57:11'!
sentecesToReturnWithManyElementsBeginingWithSimilarPrefix

	^ OrderedCollection with: 'hola'; with: 'holala'; with: 'h'.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 18:59:47' prior: 50873398!
stackWithManyElementsBeginingWithSimilarPrefix

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'holala'.
	stack push: 'h'.
	
	^ stack 

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 19:03:34' prior: 50873382!
stackWithManyElementsBeginingWithDifferentPrefix

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	
	^ stack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 19:03:59' prior: 50873371!
stackWithAnElement

	^ OOStack new push:  'hola'.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 19:04:24' prior: 50873263!
test01NoSetencesAreFoundInEmptyStack

	| stack finder sentencesToReturn |
	
	stack _ self emptyStack .
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'h') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/26/2021 19:04:27'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 19:04:41' prior: 50873275!
test02FoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	sentencesToReturn _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 19:04:44'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/26/2021 19:04:53' prior: 50873301!
test03NotFoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'a') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 19:04:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/26/2021 19:04:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 19:04:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/26/2021 19:04:54'!
PASSED!

----QUIT----(26 April 2021 19:54:36) CuisUniversity-4532.image priorSource: 17311382!

----STARTUP---- (26 April 2021 19:54:41) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(26 April 2021 20:22:53) CuisUniversity-4532.image priorSource: 17339099!

----STARTUP---- (27 April 2021 15:41:18) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:43:02' prior: 50873454!
test02FoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	sentencesToReturn _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack.
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:44:20' prior: 50873094!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ self xxx: aPrefix .
		].

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:44:29' prior: 50873524!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ self xxx: aPrefix ]

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:44:56'!
xxx: aPrefix

	| top | 
	
	top _ stack pop.
	
	reverseStackSentences add: top.
	
	self addToSentencesFoundIf: top beginsWith: aPrefix .

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:52:39' prior: 50873531!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ self matchSetenceInTheTopWith: aPrefix ]

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:52:54'!
matchSetenceInTheTopWith: aPrefix

	| top | 
	
	top _ stack pop.
	
	reverseStackSentences add: top.
	
	self addToSentencesFoundIf: top beginsWith: aPrefix .

	
	! !

!methodRemoval: SentenceFinderByPrefix #xxx: stamp: 'ja 4/27/2021 15:52:58'!
xxx: aPrefix

	| top | 
	
	top _ stack pop.
	
	reverseStackSentences add: top.
	
	self addToSentencesFoundIf: top beginsWith: aPrefix .

	
	!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 15:53:01'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 15:53:01'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 15:53:01'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 15:54:18' prior: 50873432!
stackWithAnElement

	^ OOStack new push: 'hola'.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:04:41'!
test04FoundSetencesInStackWithManyElements

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'a') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:05:10' prior: 50873423!
stackWithManyElementsBeginingWithDifferentPrefix

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	stack push: 'holala'.
	stack push: 'ho'.
	
	^ stack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:05:22'!
stackWithManyElements

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	stack push: 'holala'.
	stack push: 'ho'.
	
	^ stack! !

!methodRemoval: SentenceFinderByPrefixTest #stackWithManyElementsBeginingWithDifferentPrefix stamp: 'ja 4/27/2021 16:05:22'!
stackWithManyElementsBeginingWithDifferentPrefix

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	stack push: 'holala'.
	stack push: 'ho'.
	
	^ stack!

!methodRemoval: SentenceFinderByPrefixTest #stackWithManyElementsBeginingWithSimilarPrefix stamp: 'ja 4/27/2021 16:05:26'!
stackWithManyElementsBeginingWithSimilarPrefix

	| stack |
	
	stack _ OrderedCollection  new.
	
	stack push: 'hola'.
	stack push: 'holala'.
	stack push: 'h'.
	
	^ stack 

	
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:07:32' prior: 50873584!
test04FoundSetencesInStackWithManyElements

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala' with:'ho'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'a') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:07:40' prior: 50873637!
test04FoundSetencesInStackWithManyElements

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala' with:'ho'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:07:49'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:08:12' prior: 50873607!
stackWithManyElements

	| stack |
	
	stack _ OOStack  new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	stack push: 'holala'.
	stack push: 'ho'.
	
	^ stack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:08:13' prior: 50873669!
stackWithManyElements

	| stack |
	
	stack _ OOStack new.
	
	stack push: 'hola'.
	stack push: 'como'.
	stack push: 'estas'.
	stack push: 'holala'.
	stack push: 'ho'.
	
	^ stack! !

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:08:16'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:08:16'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:09:34' prior: 50873651!
test04FoundSetencesInStackWithManyElements

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	sentencesToReturn _ OrderedCollection with: 'ho' with: 'holala' with:'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:09:37'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:12:26'!
test05PrefixCanNotBeEmpty

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	sentencesToReturn _ OrderedCollection with: 'ho' with: 'holala' with:'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	self should: [finder find: ''] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotBeEmptyErrorDescription]
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:12:43' prior: 50873713!
test05PrefixCanNotBeEmpty

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: ''] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotBeEmptyErrorDescription]
	

	
	! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:13:34'!
prefixCanNotBeEmptyErrorDescription

	^'Prefix can not be empty.'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:14:33' prior: 50873039!
find: aPrefix
	
	
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:15:14' prior: 50873750!
find: aPrefix
	
	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ]
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:15:16' prior: 50873758!
find: aPrefix
	
	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ].
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:15:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:15:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:15:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:15:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:15:25'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:15:57'!
test06PrefixCanNotIncludeSpaces

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: 'hola como'] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotBeEmptyErrorDescription]
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:16:09' prior: 50873798!
test06PrefixCanNotIncludeSpaces

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: 'a '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotBeEmptyErrorDescription]
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:16:39' prior: 50873813!
test06PrefixCanNotIncludeSpaces

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: 'a '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:17:25'!
prefixCanNotIncludeSpacesErrorDescription

	^'Prefix can not include spaces.'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:18:29' prior: 50873769!
find: aPrefix
	
	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ].
	(aPrefix includes: ' ') ifTrue: [self error: self class prefixCanNotIncludeSpacesErrorDescription ].
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:18:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:18:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:18:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:18:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:18:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:18:33'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:18:33'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:19:03' prior: 50873847!
find: aPrefix
	
	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ].
	(aPrefix includes: $ ) ifTrue: [self error: self class prefixCanNotIncludeSpacesErrorDescription ].
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:19:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:19:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:19:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:19:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:19:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:19:07'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:23:14'!
test07FinderIsCaseSensitive

	| stack finder xxx|
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self assert: (finder find: 'Ho') equals: xxx.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:24:08' prior: 50873923!
test07FinderIsCaseSensitive

	| stack finder sentencesToReturn|
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:24:22' prior: 50873934!
test07FinderIsCaseSensitive

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	! !

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:24:24'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:26:51'!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:27:18' prior: 50873965!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'.
	
	self assert: (finder find: 'hola') equals: sentencesToReturn.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:30:36' prior: 50873980!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack equals: self stackWithAnElement .	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:30:45' prior: 50873994!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack equals: self stackWithAnElement.	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:30:51' prior: 50874008!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack equals: self stackWithAnElement.	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:33:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:33:49'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:33:49'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:34:15' prior: 50874022!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack equals: (self stackWithAnElement).	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:34:17'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:35:46' prior: 50873013!
recoverStack
	
	reverseStackSentences reverse do:[ :item | stack push: item ]
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:35:50'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:35:50'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:35:50'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:36:05' prior: 50874087!
recoverStack
	
	reverseStackSentences do:[ :item | stack push: item ]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:37:11' prior: 50874127!
recoverStack
	
	reverseStackSentences reverse do:[ :item | stack push: item ]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:37:24' prior: 50874133!
recoverStack
	
	reverseStackSentences reverseDo:[ :item | stack push: item ]
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:37:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:37:27'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:37:27'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:38:55'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:39:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:39:43'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:39:43'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:44:07' prior: 50874069!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack keepSizeAndElementsOrderWith: self stackWithAnElement.	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:54:03'!
assert: aStack keepSizeAndElementsOrderWith: otherStack

	self assert: aStack size equals: otherStack size.
	
	[aStack isEmpty not]	 whileTrue: [self assert: aStack pop equals: otherStack pop].

! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:54:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:54:15'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:54:15'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:54:52' prior: 50874217!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack keepSizeAndElementsOrderWith: (self stackWithAnElement).	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:54:53'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:55:04'!
FAILURE!

self size.!

self size.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:56:39' prior: 50874274!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack keepSizeAndElementsOrderWith: (self stackWithManyElements ).	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:56:46' prior: 50874297!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack keepSizeAndElementsOrderWith: self stackWithManyElements.	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:56:47'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:57:11' prior: 50874311!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack equals: self stackWithManyElements.	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:57:12'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:57:55' prior: 50874359!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	"sentencesToReturn _ OrderedCollection with: 'hola' with: 'holala'."
	
	finder find: 'hola'.
	self assert: stack keepSizeAndElementsOrderWith: self stackWithManyElements.	

	
	! !

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 16:57:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 16:57:56'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 16:58:03' prior: 50874377!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	finder find: 'hola'.
	
	self assert: stack keepSizeAndElementsOrderWith: self stackWithManyElements.	

	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 17:00:24'!
verifyNotEmptyAndNotIncludeSpaces: aPrefix

	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ].
	(aPrefix includes: $ ) ifTrue: [self error: self class prefixCanNotIncludeSpacesErrorDescription ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 17:00:24' prior: 50873887!
find: aPrefix
	
	self verifyNotEmptyAndNotIncludeSpaces: aPrefix.
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^sentencesFound 
	
	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 17:00:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 17:00:34'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 17:00:42' prior: 50874437!
verifyNotEmptyAndNotIncludeSpaces: aPrefix

	aPrefix isEmpty ifTrue: [ self error: self class prefixCanNotBeEmptyErrorDescription ].
	
	(aPrefix includes: $ ) ifTrue: [self error: self class prefixCanNotIncludeSpacesErrorDescription ]! !

----QUIT----(27 April 2021 17:01:35) CuisUniversity-4532.image priorSource: 17339298!

----STARTUP---- (27 April 2021 17:01:40) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(27 April 2021 17:26:08) CuisUniversity-4532.image priorSource: 17371085!

----STARTUP---- (27 April 2021 21:26:44) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 21:27:30'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/27/2021 21:41:19'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/27/2021 21:41:19'!
PASSED!
!NextNode methodsFor: 'initialization' stamp: 'ja 4/27/2021 21:43:48' prior: 50872542!
initializeFrom: aPreviousStackNode with: anElement

	previous _ aPreviousStackNode .
	
	value _ anElement ! !
!NextNode methodsFor: 'initialization' stamp: 'ja 4/27/2021 21:44:06' prior: 50874572!
initializeFrom: aPreviousStackNode with: anElement

	previous _ aPreviousStackNode.
	
	value _ anElement ! !
!OOStack methodsFor: 'push' stamp: 'ja 4/27/2021 21:44:26' prior: 50872311!
push: anElement

	top _ NextNode from: top with: anElement! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ja 4/27/2021 21:51:10' prior: 50874448!
find: aPrefix
	
	self verifyNotEmptyAndNotIncludeSpaces: aPrefix.
	
	self startInternalStructures.
	
	self findAllSentencesBeginingWith: aPrefix.

	self recoverStack.

	^ sentencesFound 
	
	
	! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'ja 4/27/2021 21:53:38' prior: 50873744!
prefixCanNotBeEmptyErrorDescription

	^ 'Prefix can not be empty.'! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'ja 4/27/2021 21:53:43' prior: 50873841!
prefixCanNotIncludeSpacesErrorDescription

	^ 'Prefix can not include spaces.'! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'ja 4/27/2021 21:56:19' prior: 50874140!
recoverStack
	
	reverseStackSentences reverseDo:[ :aSentence | stack push: aSentence ]
	
	
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'ja 4/27/2021 22:25:00' prior: 50873545!
findAllSentencesBeginingWith: aPrefix
	
	[stack isEmpty not] whileTrue: [ self checkIfSentenceMatchesWith: aPrefix ]

	
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'ja 4/27/2021 22:25:25'!
checkIfSentenceMatchesWith: aPrefix

	| top | 
	
	top _ stack pop.
	
	reverseStackSentences add: top.
	
	self addToSentencesFoundIf: top beginsWith: aPrefix .

	
	! !

!methodRemoval: SentenceFinderByPrefix #matchSetenceInTheTopWith: stamp: 'ja 4/27/2021 22:25:25'!
matchSetenceInTheTopWith: aPrefix

	| top | 
	
	top _ stack pop.
	
	reverseStackSentences add: top.
	
	self addToSentencesFoundIf: top beginsWith: aPrefix .

	
	!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'ja 4/27/2021 22:26:14' prior: 50874619!
findAllSentencesBeginingWith: aPrefix
	
	[ stack isEmpty not ] whileTrue: [ self checkIfSentenceMatchesWith: aPrefix ]

	
	! !

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 22:26:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 22:26:17'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:28:37' prior: 50873948!
test07FinderIsCaseSensitive

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:28:48' prior: 50873696!
test04FoundSetencesInStackWithManyElements

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	
	sentencesToReturn _ OrderedCollection with: 'ho' with: 'holala' with:'hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:28:56' prior: 50873471!
test03NotFoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self assert: (	finder find: 'a') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:29:02' prior: 50873511!
test02FoundASetenceInStackWithAnElement

	| stack finder sentencesToReturn |
	
	stack _ self stackWithAnElement .
	
	sentencesToReturn _ OrderedCollection with: 'hola'.
	
	finder _ SentenceFinderByPrefix with: stack.
	
	self assert: (	finder find: 'ho') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:29:09' prior: 50873438!
test01NoSetencesAreFoundInEmptyStack

	| stack finder sentencesToReturn |
	
	stack _ self emptyStack .
	
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self assert: (	finder find: 'h') equals: sentencesToReturn.
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/27/2021 22:29:13' prior: 50874733!
test01NoSetencesAreFoundInEmptyStack

	| stack finder sentencesToReturn |
	
	stack _ self emptyStack .
	
	sentencesToReturn _ OrderedCollection new.
	
	finder _ SentenceFinderByPrefix with: stack.
	
	self assert: (	finder find: 'h') equals: sentencesToReturn.
	

	
	! !

----SNAPSHOT----(27 April 2021 22:32:18) CuisUniversity-4532.image priorSource: 17371284!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/27/2021 22:32:21'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/27/2021 22:32:23'!
PASSED!

----QUIT----(27 April 2021 22:34:44) CuisUniversity-4532.image priorSource: 17379373!

----STARTUP---- (29 April 2021 13:16:38) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:16:44'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/29/2021 13:16:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/29/2021 13:16:46'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 13:22:38'!
test07PrefixCanNotBeSpace

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: ' '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 13:22:48'!
test08FinderIsCaseSensitive

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test07FinderIsCaseSensitive stamp: 'ja 4/29/2021 13:22:48'!
test07FinderIsCaseSensitive

	| stack finder sentencesToReturn |
	
	stack _ self stackWithManyElements.
	stack push: 'Ho'.
	stack push: 'Hola'.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	sentencesToReturn _ OrderedCollection with: 'Hola' with: 'Ho'.
	
	self assert: (finder find: 'Ho') equals: sentencesToReturn.

	
	!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 13:22:55'!
test09FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	finder find: 'hola'.
	
	self assert: stack keepSizeAndElementsOrderWith: self stackWithManyElements.	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test08FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/29/2021 13:22:55'!
test08FinderKeepTheOriginalStackAfterExecution

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	finder find: 'hola'.
	
	self assert: stack keepSizeAndElementsOrderWith: self stackWithManyElements.	

	
	!

!testRun: #SentenceFinderByPrefixTest #test07PrefixCanNotBeSpace stamp: 'ja 4/29/2021 13:22:59'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 13:23:13'!
test06PrefixCanNotBeSpace

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: ' '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test07PrefixCanNotBeSpace stamp: 'ja 4/29/2021 13:23:13'!
test07PrefixCanNotBeSpace

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: ' '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 13:23:21'!
test07PrefixCanNotIncludeSpaces

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: 'a '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test06PrefixCanNotIncludeSpaces stamp: 'ja 4/29/2021 13:23:21'!
test06PrefixCanNotIncludeSpaces

	| stack finder |
	
	stack _ self stackWithManyElements.
	
	finder _ SentenceFinderByPrefix with: stack .
	
	self should: [finder find: 'a '] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: SentenceFinderByPrefix prefixCanNotIncludeSpacesErrorDescription]
	

	
	!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotBeSpace stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07PrefixCanNotIncludeSpaces stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderIsCaseSensitive stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/29/2021 13:23:23'!
PASSED!

----SNAPSHOT----(29 April 2021 13:23:33) CuisUniversity-4532.image priorSource: 17381444!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:32:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotBeSpace stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07PrefixCanNotIncludeSpaces stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderIsCaseSensitive stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/29/2021 13:32:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01NoSetencesAreFoundInEmptyStack stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03NotFoundASetenceInStackWithAnElement stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FoundSetencesInStackWithManyElements stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05PrefixCanNotBeEmpty stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06PrefixCanNotBeSpace stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07PrefixCanNotIncludeSpaces stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FinderIsCaseSensitive stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09FinderKeepTheOriginalStackAfterExecution stamp: 'ja 4/29/2021 13:36:34'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ja 4/29/2021 13:36:36'!
PASSED!

----QUIT----(29 April 2021 14:07:48) CuisUniversity-4532.image priorSource: 17388586!

----STARTUP---- (29 April 2021 21:26:31) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/2020/Parciales/2019-2c/1erParcial/IngSof1-2019-2C-1Parcial.st----!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/29/2021 21:32:53'!
PASSED!

#(1 2 3 4 1) count:[:item | item = 1 ].!

aBlock _ [ :element | element even ].
#(1 2 3 4 1) count:[:item | aBlock value: item ].!

aBlock _ [ :element | element even ].
#(1 2 3 4 6 1) count:[:item | aBlock value: item ].!
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:46:02' prior: 50875225!
test02CanQuerySalesByCustomer

	| salesToAdaLovelace |

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	
	
	
	salesToAdaLovelace := salesSystem salesMadeTo: adaLovelace.
	self assert: 1 equals: salesToAdaLovelace size.
	self assert: 1 equals: (salesToAdaLovelace count: [ :aProduct | aProduct = self combo1 ])! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:51:12' prior: 50875833!
test02CanQuerySalesByCustomer

	| salesToAdaLovelace |

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	
	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo1 ].
	
	salesToAdaLovelace := salesSystem salesMadeTo: adaLovelace.
	self assert: 1 equals: salesToAdaLovelace size.
	self assert: 1 equals: (salesToAdaLovelace count: [ :aProduct | aProduct = self combo1 ])! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:53:29'!
assserThatCustomer: aShopCustomer registerSales: aSalesQuantity fromCombo: aComboToCompare
	
	| salesToAdaLovelace |
	
	salesToAdaLovelace := salesSystem salesMadeTo: aShopCustomer.
	self assert: 1 equals: salesToAdaLovelace size.
	self assert: 1 equals: (salesToAdaLovelace count: [ :aProduct | aComboToCompare value: aProduct ])! !
!CoffeeShopTest methodsFor: 'private' stamp: 'ja 4/29/2021 21:54:12' prior: 50875866!
assserThatCustomer: aShopCustomer registerSales: aSalesQuantity fromCombo: aComboToCompare
	
	| salesToAShopCustomer |
	
	salesToAShopCustomer := salesSystem salesMadeTo: aShopCustomer.
	self assert: 1 equals: salesToAShopCustomer size.
	self assert: 1 equals: (salesToAShopCustomer count: [ :aProduct | aComboToCompare value: aProduct ])! !
!CoffeeShopTest methodsFor: 'private' stamp: 'ja 4/29/2021 21:54:34' prior: 50875880!
assserThatCustomer: aShopCustomer registerSales: aSalesQuantity fromCombo: aComboToCompare
	
	| salesToAShopCustomer |
	
	salesToAShopCustomer := salesSystem salesMadeTo: aShopCustomer.
	self assert: aSalesQuantity equals: salesToAShopCustomer size.
	self assert: aSalesQuantity  equals: (salesToAShopCustomer count: [ :aProduct | aComboToCompare value: aProduct ])! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:56:19' prior: 50875848!
test02CanQuerySalesByCustomer

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	
	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo1 ].! !

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 21:56:26'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:57:40' prior: 50875239!
test03SalesAreDistinguishedByCustomer

	| salesToAdaLovelace salesToAlanKay |

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: alanKay of: self combo2.

	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo1 ].

	self assserThatCustomer: alanKay registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo2 ].! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/29/2021 21:57:50' prior: 50875923!
test03SalesAreDistinguishedByCustomer

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: alanKay of: self combo2.

	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo1 ].

	self assserThatCustomer: alanKay registerSales: 1 fromCombo: [ :aProduct | aProduct = self combo2 ].! !

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 21:57:52'!
PASSED!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 21:57:56'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 21:57:56'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 21:57:56'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:06:26'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:06:52'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:08:30'!
PASSED!

noneBlock value!

[^noneBlock value]!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:10:33'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:10:44' prior: 50875314!
test08NoRewardExpectedWhenCustomerHasNotBuyAnything

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem rewardOf: adaLovelace ifNone: [ ^self ].
	self halt .
	self failWith: 'No reward expected when customer has not buy anything'! !

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:10:50'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:10:54'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:11:04'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:11:08' prior: 50875986!
test08NoRewardExpectedWhenCustomerHasNotBuyAnything

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem rewardOf: adaLovelace ifNone: [ ^self ].
	
	self failWith: 'No reward expected when customer has not buy anything'! !

self failWith: 'No reward expected when customer has not buy anything'!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:11:27'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 22:12:09'!
test10

	self failWith: 'No reward expected when customer has not buy anything'! !

!testRun: #SentenceFinderByPrefixTest #test10 stamp: 'ja 4/29/2021 22:12:11'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test10 stamp: 'ja 4/29/2021 22:12:11'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'ja 4/29/2021 22:16:40' prior: 50876080!
test10
	
	#() sum:[:a | a] ifEmpty:[^ self].
	self failWith: 'No reward expected when customer has not buy anything'! !

!testRun: #SentenceFinderByPrefixTest #test10 stamp: 'ja 4/29/2021 22:16:42'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:23:37' prior: 50876064!
test08NoRewardExpectedWhenCustomerHasNotBuyAnything

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem rewardOf: adaLovelace ifNone: [ self failWith: 'No reward expected when customer has not buy anything' ].
	
	! !

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:23:38'!
FAILURE!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:23:44' prior: 50876102!
test08NoRewardExpectedWhenCustomerHasNotBuyAnything

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem rewardOf: adaLovelace ifNone: [ ^self ].
	
	self failWith: 'No reward expected when customer has not buy anything'! !

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:23:45'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:33:09' prior: 50875324!
test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds

	| adaLovelaceReward |

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .
	
	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo2.

	adaLovelaceReward := salesSystem rewardOf: adaLovelace ifNone: [ self fail ].

	self assert: 1 equals: adaLovelaceReward quantity.
	self assert: adaLovelaceReward isForCombo2.
	self assert: 60*peso equals: adaLovelaceReward price.
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:36:51' prior: 50876186!
test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds

	| adaLovelaceReward |

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .
	
	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo2.

	self assertThatTheCustomer: adaLovelace  gotReward: 1 from: [:aReword | aReword isForCombo2] for: 60*peso. 
	
	adaLovelaceReward := salesSystem rewardOf: adaLovelace ifNone: [ self fail ].

	self assert: 1 equals: adaLovelaceReward quantity.
	self assert: adaLovelaceReward isForCombo2.
	self assert: 60*peso equals: adaLovelaceReward price.
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:39:49'!
registerASaleOf: aCombo1 andASaleOf: aCombo2 to: aShopCustomer 
	
	salesSystem registerSaleTo: aShopCustomer of: aCombo1 .
	salesSystem registerSaleTo: aShopCustomer of: aCombo2. 

	
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:42:02'!
assertThatTheCustomer: aShopCustomer gotReward: anAmountOfRewards from: aComboToCompare for: aPrice 
	
	| adaLovelaceReward |
	
	adaLovelaceReward := salesSystem rewardOf: aShopCustomer ifNone: [ self fail ].

	self assert: anAmountOfRewards equals: adaLovelaceReward quantity.
	self assert: ( aComboToCompare value: adaLovelaceReward ).
	self assert: aPrice equals: adaLovelaceReward price.

	
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:42:15' prior: 50876242!
assertThatTheCustomer: aShopCustomer gotReward: anAmountOfRewards from: aComboToCompare for: aPrice 
	
	| shopCustomerReward |
	
	shopCustomerReward := salesSystem rewardOf: aShopCustomer ifNone: [ self fail ].

	self assert: anAmountOfRewards equals: shopCustomerReward quantity.
	self assert: ( aComboToCompare value: shopCustomerReward ).
	self assert: aPrice equals: shopCustomerReward price.

	
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:42:35' prior: 50876208!
test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds

	| adaLovelaceReward |

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .

	self assertThatTheCustomer: adaLovelace  gotReward: 1 from: [:aReword | aReword isForCombo2] for: 60*peso. 
	
! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:42:42' prior: 50876274!
test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .

	self assertThatTheCustomer: adaLovelace  gotReward: 1 from: [:aReword | aReword isForCombo2] for: 60*peso. 
	
! !

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:42:45'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:45:14' prior: 50875343!
test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds

	| alaKayReward |

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: alanKay .
	
	self assertThatTheCustomer: alanKay gotReward: 1 from: [ :aReword | aReword  isForCombo2] for: 20*3/4*peso.! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:45:20' prior: 50876306!
test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: alanKay .
	
	self assertThatTheCustomer: alanKay gotReward: 1 from: [ :aReword | aReword  isForCombo2] for: 20*3/4*peso.! !

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:45:23'!
FAILURE!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:45:23'!
FAILURE!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:46:01' prior: 50876320!
test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: alanKay .
	
	self assertThatTheCustomer: alanKay gotReward: 1 from: [ :aReword | aReword  isForCombo2] for: 120*3/4*peso.! !

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:46:04'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:46:14'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:47:30' prior: 50875361!
test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds
	
	salesSystem := CoffeeShopSalesSystem new.
	
	self registerASaleOf: self combo1 andASaleOf: self combo2 to: billGates .
	
	self assertThatTheCustomer: billGates gotReward: 1 from: [ :aReword | aReword  isForCombo2] for: 120*9/10*peso.
	! !

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:47:32'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:50:40' prior: 50875379!
test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds

	

	salesSystem := CoffeeShopSalesSystem new.
	
	
	self registerTwoSaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .
	
	self assertThatTheCustomer: adaLovelace gotReward: 2 from: [ :aReword | aReword  isForCombo1] for: 75*peso.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo2.! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:50:50' prior: 50876384!
test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerTwoSaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .
	
	self assertThatTheCustomer: adaLovelace gotReward: 2 from: [ :aReword | aReword  isForCombo1] for: 75*peso.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: adaLovelace of: self combo2.! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:51:47'!
registerTwoSaleOf: combo1 andASaleOf: aCombo2 to: aShopCustomer

	salesSystem registerSaleTo: aShopCustomer of: combo1.
	salesSystem registerSaleTo: aShopCustomer of: combo1 .
	salesSystem registerSaleTo: aShopCustomer of: aCombo2.! !
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:51:54' prior: 50876403!
test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerTwoSaleOf: self combo1 andASaleOf: self combo2 to: adaLovelace .
	
	self assertThatTheCustomer: adaLovelace gotReward: 2 from: [ :aReword | aReword  isForCombo1] for: 75*peso.
! !

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:51:56'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:52:33' prior: 50875399!
test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerTwoSaleOf: self combo1 andASaleOf: self combo2 to: alanKay .
	
	self assertThatTheCustomer: alanKay gotReward: 2 from: [ :aReword | aReword  isForCombo1] for: 83*peso.

! !

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:52:36'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - rewards' stamp: 'ja 4/29/2021 22:53:03' prior: 50875418!
test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds

	salesSystem := CoffeeShopSalesSystem new.
	
	self registerTwoSaleOf: self combo1 andASaleOf: self combo2 to: billGates .
	
	self assertThatTheCustomer: billGates gotReward: 2 from: [ :aReword | aReword  isForCombo1] for: 97*peso.
! !

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/29/2021 22:53:06'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/29/2021 22:53:08'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/29/2021 22:53:08'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/29/2021 22:53:08'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/29/2021 22:53:08'!
PASSED!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 22:53:09'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 22:53:09'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 22:53:09'!
PASSED!

CoffeeShopCustomer subclass: #CoffeeShopCustomerGold
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classDefinition: #CoffeeShopCustomerGold category: 'IngSof1-2019-2C-1Parcial' stamp: 'ja 4/29/2021 22:57:19'!
CoffeeShopCustomer subclass: #CoffeeShopCustomerGold
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

CoffeeShopCustomer subclass: #CoffeeShopCustomerSilver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classDefinition: #CoffeeShopCustomerSilver category: 'IngSof1-2019-2C-1Parcial' stamp: 'ja 4/29/2021 22:57:25'!
CoffeeShopCustomer subclass: #CoffeeShopCustomerSilver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

CoffeeShopCustomer subclass: #CoffeeShopCustomerNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!

!classDefinition: #CoffeeShopCustomerNormal category: 'IngSof1-2019-2C-1Parcial' stamp: 'ja 4/29/2021 22:57:30'!
CoffeeShopCustomer subclass: #CoffeeShopCustomerNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'IngSof1-2019-2C-1Parcial'!
!CoffeeShopCustomer class methodsFor: 'instance creation' stamp: 'ja 4/29/2021 22:59:43'!
named: aName

	self subclassResponsibility .
	"^self new initializeNamed: aName ofType: aType"! !
!CoffeeShopCustomerGold class methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:00:02' overrides: 50876576!
named: aName! !
!CoffeeShopCustomerNormal class methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:00:29' overrides: 50876576!
named: aName! !
!CoffeeShopCustomerSilver class methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:00:34' overrides: 50876576!
named: aName! !
!CoffeeShopCustomerGold class methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:01:07' prior: 50876583 overrides: 50876576!
named: aName

	^self new initializeNamed: aName ! !
!CoffeeShopCustomerNormal class methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:01:14' prior: 50876587 overrides: 50876576!
named: aName

	^self new initializeNamed: aName ! !
!CoffeeShopCustomerNormal class methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:01:43' prior: 50876602 overrides: 50876576!
named: aName

	! !
!CoffeeShopCustomerGold class methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:01:50' prior: 50876596 overrides: 50876576!
named: aName
! !
!CoffeeShopCustomer class methodsFor: 'instance creation' stamp: 'ja 4/29/2021 23:02:03' prior: 50876576!
named: aName

	
	^self new initializeNamed: aName! !

!methodRemoval: CoffeeShopCustomerGold class #named: stamp: 'ja 4/29/2021 23:02:11'!
named: aName
!

!methodRemoval: CoffeeShopCustomerNormal class #named: stamp: 'ja 4/29/2021 23:02:15'!
named: aName

	!

!methodRemoval: CoffeeShopCustomerSilver class #named: stamp: 'ja 4/29/2021 23:02:18'!
named: aName!
!CoffeeShopCustomer methodsFor: 'initialization' stamp: 'ja 4/29/2021 23:02:51'!
initializeNamed: aName 

	name := aName.
	"type := aType "! !
!CoffeeShopCustomer class methodsFor: 'instance creation' stamp: 'ja 4/29/2021 23:03:19' prior: 50875476!
named: aName ofType: aType

	"^self new initializeNamed: aName ofType: aType"! !

!methodRemoval: CoffeeShopCustomer #initializeNamed:ofType: stamp: 'ja 4/29/2021 23:05:03'!
initializeNamed: aName ofType: aType

	name := aName.
	type := aType !
!CoffeeShopTest methodsFor: 'setUp/tearDown' stamp: 'ja 4/29/2021 23:06:06' prior: 50875199 overrides: 16927572!
setUp

	adaLovelace := CoffeeShopCustomerGold named: 'Ada Lovelace'.
	alanKay := CoffeeShopCustomerSilver named: 'Alan Kay'.
	billGates := CoffeeShopCustomerNormal named: 'Bill Gates' ! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/29/2021 23:06:22'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/29/2021 23:06:24'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/29/2021 23:06:25'!
PASSED!

!methodRemoval: CoffeeShopCustomer class #named:ofType: stamp: 'ja 4/29/2021 23:06:39'!
named: aName ofType: aType

	"^self new initializeNamed: aName ofType: aType"!
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/29/2021 23:09:00' prior: 50875726 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
	aCustomer type = #Gold ifTrue: [ price := (self priceOf: product)/2 ].
	aCustomer type = #Silver ifTrue: [ price := (self priceOf: product)*3/4 ].
	aCustomer type = #Normal ifTrue: [ price := (self priceOf: product)*9/10 ].
	
	price _ aCustomer price.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/29/2021 23:11:44' prior: 50876674 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
"	aCustomer type = #Gold ifTrue: [ price := (self priceOf: product)/2 ].
	aCustomer type = #Silver ifTrue: [ price := (self priceOf: product)*3/4 ].
	aCustomer type = #Normal ifTrue: [ price := (self priceOf: product)*9/10 ]."
	
	price _ aCustomer valuationOfReward: self price.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !
!CoffeeShopCustomerGold methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:12:56'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward / 2 .

	! !
!CoffeeShopCustomerNormal methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:13:10'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward / 2 .! !
!CoffeeShopCustomerSilver methodsFor: 'no messages' stamp: 'ja 4/29/2021 23:13:16'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward / 2 .! !
!CoffeeShopCustomerSilver methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:13:26' prior: 50876718!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .! !
!CoffeeShopCustomerNormal methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:13:35' prior: 50876713!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/29/2021 23:14:32' prior: 50876691 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
"	aCustomer type = #Gold ifTrue: [ price := (self priceOf: product)/2 ].
	aCustomer type = #Silver ifTrue: [ price := (self priceOf: product)*3/4 ].
	aCustomer type = #Normal ifTrue: [ price := (self priceOf: product)*9/10 ]."
	
	price _ aCustomer valuationOfCombo2Reward: self price.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:14:56'!
valuationOfCombo2Reward: aPriceOfReward

	^ aPriceOfReward / 2 .

	! !

!methodRemoval: CoffeeShopCustomerGold #valuationOfReward: stamp: 'ja 4/29/2021 23:14:56'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward / 2 .

	!
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:15:09'!
valuationOfCombo1Reward: aPriceOfReward



	! !
!CoffeeShopCustomerNormal methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:15:23'!
valuationOfCombo2Reward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .! !
!CoffeeShopCustomerNormal methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:15:33'!
valuationOfCombo1Reward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .! !

!methodRemoval: CoffeeShopCustomerNormal #valuationOfReward: stamp: 'ja 4/29/2021 23:15:35'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .!
!CoffeeShopCustomerSilver methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:15:44'!
valuationOfCombo2Reward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .! !
!CoffeeShopCustomerSilver methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:15:49'!
valuationOfCombo1Reward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .! !

!methodRemoval: CoffeeShopCustomerSilver #valuationOfReward: stamp: 'ja 4/29/2021 23:15:52'!
valuationOfReward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .!
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/29/2021 23:17:31' prior: 50875676 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
	aCustomer type = #Gold ifTrue: [ price := 75*peso ].
	aCustomer type = #Silver ifTrue: [ price := 83*peso ].
	aCustomer type = #Normal ifTrue: [ price := 97*peso ].
	
	price  _ aCustomer valuationOfCombo1Reward.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:17:58'!
valuationOfCombo1Reward



	! !
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/29/2021 23:18:03' prior: 50876817!
valuationOfCombo1Reward



	! !

!methodRemoval: CoffeeShopCustomerGold #valuationOfCombo1Reward: stamp: 'ja 4/29/2021 23:18:03'!
valuationOfCombo1Reward: aPriceOfReward



	!

!methodRemoval: CoffeeShopCustomerNormal #valuationOfCombo1Reward: stamp: 'ja 4/29/2021 23:18:12'!
valuationOfCombo1Reward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .!

!methodRemoval: CoffeeShopCustomerSilver #valuationOfCombo1Reward: stamp: 'ja 4/29/2021 23:18:16'!
valuationOfCombo1Reward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .!

----QUIT----(29 April 2021 23:22:23) CuisUniversity-4532.image priorSource: 17392849!

----STARTUP---- (30 April 2021 22:47:53) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:50:43' prior: 50876736 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
"	aCustomer type = #Gold ifTrue: [ price := (self priceOf: product)/2 ].
	aCustomer type = #Silver ifTrue: [ price := (self priceOf: product)*3/4 ].
	aCustomer type = #Normal ifTrue: [ price := (self priceOf: product)*9/10 ]."
	
	price _ aCustomer valuationOfCombo2Reward: self.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:52:18' prior: 50876753!
valuationOfCombo2Reward: aReward

	^ aReward priceForShopCustomerGold.

	! !
!CoffeeShopCustomerGold methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:52:37'!
valuationOfReward: aReward

	^ aReward priceForShopCustomerGold.

	! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:52:54' prior: 50876848 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
"	aCustomer type = #Gold ifTrue: [ price := (self priceOf: product)/2 ].
	aCustomer type = #Silver ifTrue: [ price := (self priceOf: product)*3/4 ].
	aCustomer type = #Normal ifTrue: [ price := (self priceOf: product)*9/10 ]."
	
	price _ aCustomer valuationOfReward: self.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !

!methodRemoval: CoffeeShopCustomerGold #valuationOfCombo2Reward: stamp: 'ja 4/30/2021 22:53:06'!
valuationOfCombo2Reward: aReward

	^ aReward priceForShopCustomerGold.

	!
!CoffeeShopCustomerNormal methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:54:19'!
valuationOfReward: aReward

	^ aReward priceForShopCustomerGold.

	! !
!CoffeeShopCustomerSilver methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:54:26'!
valuationOfReward: aReward

	^ aReward priceForShopCustomerGold.

	! !

!methodRemoval: CoffeeShopCustomerNormal #valuationOfCombo2Reward: stamp: 'ja 4/30/2021 22:54:32'!
valuationOfCombo2Reward: aPriceOfReward

	^ aPriceOfReward * 3 / 4 .!
!CoffeeShopCustomerNormal methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:54:42' prior: 50876899!
valuationOfReward: aReward

	^ aReward priceForShopCustomerNormal.

	! !

!methodRemoval: CoffeeShopCustomerSilver #valuationOfCombo2Reward: stamp: 'ja 4/30/2021 22:54:48'!
valuationOfCombo2Reward: aPriceOfReward

	^ aPriceOfReward * 9 / 10 .!
!CoffeeShopCustomerSilver methodsFor: 'as yet unclassified' stamp: 'ja 4/30/2021 22:54:57' prior: 50876905!
valuationOfReward: aReward

	^ aReward priceForShopCustomerSilver.

	! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:55:53' prior: 50876802 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	product := self rewardedProduct.
	
	"aCustomer type = #Gold ifTrue: [ price := 75*peso ].
	aCustomer type = #Silver ifTrue: [ price := 83*peso ].
	aCustomer type = #Normal ifTrue: [ price := 97*peso ]."
	
	price  _ aCustomer valuationOfReward: self.
	
	^CoffeeShopReward of: product at: price quantity: self productQuantity! !

!methodRemoval: CoffeeShopCustomerGold #valuationOfCombo1Reward stamp: 'ja 4/30/2021 22:56:24'!
valuationOfCombo1Reward



	!
!RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:57:07'!
priceForShopCustomerGold! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:58:26' overrides: 50876951!
priceForShopCustomerGold! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:58:37' overrides: 50876951!
priceForShopCustomerGold! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:58:43'!
priceForShopCustomerNormal! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:58:49'!
priceForShopCustomerSilver! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:59:03'!
priceForShopCustomerNormal! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 22:59:11'!
priceForShopCustomerSilver! !
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 22:59:28' prior: 50876951!
priceForShopCustomerGold

	self subclassResponsibility ! !
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 22:59:37'!
priceForShopCustomerNormal

	self subclassResponsibility ! !
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 22:59:43'!
priceForShopCustomerSilver

	self subclassResponsibility ! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:00:48' prior: 50876959 overrides: 50876979!
priceForShopCustomerGold

	^ self priceOf: product / 2! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:02:55' prior: 50876963 overrides: 50876984!
priceForShopCustomerNormal

	^ self priceOf: product * 3 / 4! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:03:25' prior: 50876967 overrides: 50876989!
priceForShopCustomerSilver

	^ self priceOf: product * 9 / 10! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:04:13' prior: 50876955 overrides: 50876979!
priceForShopCustomerGold

	^ 75*peso! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:04:25' prior: 50876971 overrides: 50876984!
priceForShopCustomerNormal

	^ 83*peso! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:04:36' prior: 50876975 overrides: 50876989!
priceForShopCustomerSilver

	^ 97*peso! !
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 23:06:08'!
priceOf

"	aProduct = #Combo1 ifTrue: [ ^150*peso ].
	aProduct = #Combo2 ifTrue: [ ^120*peso ]."
	
	
	
	self error: 'Invalid combo type'! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:06:21'!
price

	! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:06:33'!
price! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:07:23' prior: 50877034!
price

	^ 150*peso! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:07:35' prior: 50877037!
price

	^ 120*peso! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:08:52' prior: 50876995 overrides: 50876979!
priceForShopCustomerGold

	^ self price / 2! !

	^ self price  * 3 / 4!
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:09:09' prior: 50877001 overrides: 50876984!
priceForShopCustomerNormal

	^ self price  * 3 / 4! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:09:16' prior: 50877007 overrides: 50876989!
priceForShopCustomerSilver

	^ self price * 9 / 10! !
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 23:10:14'!
price

"	aProduct = #Combo1 ifTrue: [ ^150*peso ].
	aProduct = #Combo2 ifTrue: [ ^120*peso ]."
	
	
	
	self error: 'Invalid combo type'! !

!methodRemoval: RewardRule #priceOf stamp: 'ja 4/30/2021 23:10:14'!
priceOf

"	aProduct = #Combo1 ifTrue: [ ^150*peso ].
	aProduct = #Combo2 ifTrue: [ ^120*peso ]."
	
	
	
	self error: 'Invalid combo type'!
!RewardRule methodsFor: 'product price' stamp: 'ja 4/30/2021 23:10:42' prior: 50877066!
price
	
	self error: 'Invalid combo type'! !

!methodRemoval: RewardRule #priceOf: stamp: 'ja 4/30/2021 23:10:52'!
priceOf: aProduct

	aProduct = #Combo1 ifTrue: [ ^150*peso ].
	aProduct = #Combo2 ifTrue: [ ^120*peso ].

	self error: 'Invalid combo type'!
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:11:08' prior: 50876933 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	price  _ aCustomer valuationOfReward: self.
	
	^CoffeeShopReward of: self at: price quantity: self productQuantity! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:11:38' prior: 50876877 overrides: 50875620!
createRewardFor: aCustomer 
	
	| price |
	
	price _ aCustomer valuationOfReward: self.
	
	^CoffeeShopReward of: self at: price quantity: self productQuantity! !
!CoffeeShopReward methodsFor: 'testing' stamp: 'ja 4/30/2021 23:12:58' prior: 50875509!
isForCombo1
	
	^ product isForCombo1 ! !
!CoffeeShopReward methodsFor: 'testing' stamp: 'ja 4/30/2021 23:14:10' prior: 50875513!
isForCombo2
	
	^product isForCombo2! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:14:33'!
isForCombo1! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:14:34'!
isForCombo2! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:14:38' prior: 50877121!
isForCombo2

	^ false! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:14:45' prior: 50877118!
isForCombo1

	^ true! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:15:05'!
isForCombo2

	^ true! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:15:14'!
isForCombo1

	^ false! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:16:40' prior: 50875546!
volumeOf: aProduct

"	aProduct = #Combo1 ifTrue: [ ^250*milliliter ].
	aProduct = #Combo2 ifTrue: [ ^100*milliliter ]."
	aProduct volumeStablishedFor: self.

	self error: 'Invalid product'
	! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:18:43'!
volumeStablishedFor: aCoffeShopSalesSystem

	aCoffeShopSalesSystem volumeForCombo1.! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:19:09'!
volumeStablishedFor: aCoffeShopSalesSystem

	aCoffeShopSalesSystem volumeForCombo2.! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:20:00'!
volumeForCombo2

"	aProduct = #Combo1 ifTrue: [ ^250*milliliter ].
	aProduct = #Combo2 ifTrue: [ ^100*milliliter ]."
! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:20:03'!
volumeForCombo1

"	aProduct = #Combo1 ifTrue: [ ^250*milliliter ].
	aProduct = #Combo2 ifTrue: [ ^100*milliliter ]."
! !
!RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:20:57'!
volumeStablishedFor: aCoffeShopSalesSystem

	self error: 'Invalid product'
	! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:21:20' prior: 50877169!
volumeForCombo1

	^250*milliliter 
	
! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:21:34' prior: 50877162!
volumeForCombo2

	^100*milliliter 
! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:22:24' prior: 50877141!
volumeOf: aProduct

	aProduct volumeStablishedFor: self.

	self error: 'Invalid product'
	! !
!CoffeeShopSalesSystem methodsFor: 'product volume' stamp: 'ja 4/30/2021 23:22:31' prior: 50877192!
volumeOf: aProduct

	^ aProduct volumeStablishedFor: self.	! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:24:37'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:24:37'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:24:37'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:24:37'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:24:37'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:24:37'!
ERROR!
!CoffeeShopTest methodsFor: 'test objects' stamp: 'ja 4/30/2021 23:25:41' prior: 50875209!
combo1

	^Combo1RewardRule new! !
!CoffeeShopTest methodsFor: 'test objects' stamp: 'ja 4/30/2021 23:26:00' prior: 50875213!
combo2

	^ Combo2RewardRule new! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:26:27'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:26:27'!
FAILURE!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:26:27'!
FAILURE!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:26:27'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:26:27'!
FAILURE!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:26:27'!
FAILURE!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:26:27'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:26:27'!
ERROR!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:26:59'!
PASSED!
!CoffeeShopTest methodsFor: 'test objects' stamp: 'HAW 9/20/2019 17:21:01' prior: 50877264!
combo2

	^#Combo2! !
!CoffeeShopTest methodsFor: 'test objects' stamp: 'HAW 9/20/2019 17:15:53' prior: 50877260!
combo1

	^#Combo1! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:30:15'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:30:15'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:30:15'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:30:15'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:30:15'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:30:15'!
ERROR!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:30:34'!
ERROR!
!CoffeeShopTest methodsFor: 'test objects' stamp: 'ja 4/30/2021 23:32:33' prior: 50877332!
combo1

	^ Combo1RewardRule new! !
!CoffeeShopTest methodsFor: 'test objects' stamp: 'ja 4/30/2021 23:32:45' prior: 50877328!
combo2

	^ Combo2RewardRule new! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/30/2021 23:33:33' prior: 50875909!
test02CanQuerySalesByCustomer

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	
	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct rewardedProduct = self combo1 rewardedProduct ].! !

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:33:36'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:33:39'!
PASSED!
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/30/2021 23:34:29' prior: 50875940!
test03SalesAreDistinguishedByCustomer

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: alanKay of: self combo2.

	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct rewardedProduct = self combo1 rewardedProduct ].

	self assserThatCustomer: alanKay registerSales: 1 fromCombo: [ :aProduct | aProduct rewardedProduct = self combo2 rewardedProduct].! !
!CoffeeShopTest methodsFor: 'tests - sales' stamp: 'ja 4/30/2021 23:34:33' prior: 50877421!
test03SalesAreDistinguishedByCustomer

	salesSystem := CoffeeShopSalesSystem new.

	salesSystem registerSaleTo: adaLovelace of: self combo1.
	salesSystem registerSaleTo: alanKay of: self combo2.

	self assserThatCustomer: adaLovelace registerSales: 1 fromCombo: [ :aProduct | aProduct rewardedProduct = self combo1 rewardedProduct ].

	self assserThatCustomer: alanKay registerSales: 1 fromCombo: [ :aProduct | aProduct rewardedProduct = self combo2 rewardedProduct ].! !

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:34:35'!
PASSED!

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:34:37'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:34:45'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:34:47'!
FAILURE!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:34:47'!
FAILURE!
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:39:20' prior: 50877150 overrides: 50877176!
volumeStablishedFor: aCoffeShopSalesSystem

	^aCoffeShopSalesSystem volumeForCombo1.! !

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:39:24'!
PASSED!
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:39:42' prior: 50877156 overrides: 50877176!
volumeStablishedFor: aCoffeShopSalesSystem

	^aCoffeShopSalesSystem volumeForCombo2.! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:39:46'!
FAILURE!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:39:46'!
FAILURE!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:39:46'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:39:46'!
FAILURE!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:39:46'!
FAILURE!

shopCustomerReward price!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:43:04'!
FAILURE!
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:46:41' prior: 50877056 overrides: 50876984!
priceForShopCustomerNormal

	^ (self price)  * 3 / 4! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:46:57' prior: 50877062 overrides: 50876989!
priceForShopCustomerSilver

	^ (self price) * 9 / 10! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:47:32'!
FAILURE!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:47:32'!
FAILURE!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:47:32'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:47:32'!
FAILURE!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:47:32'!
FAILURE!
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:55:05' prior: 50877555 overrides: 50876984!
priceForShopCustomerNormal

	^ (self price)  * 9 / 10! !
!Combo2RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:55:13' prior: 50877561 overrides: 50876989!
priceForShopCustomerSilver

	^ (self price) * 3 / 4! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:55:40'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:55:40'!
FAILURE!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:55:40'!
FAILURE!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:56:01'!
FAILURE!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:56:01'!
FAILURE!
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:56:36' prior: 50877023 overrides: 50876989!
priceForShopCustomerSilver

	^ 83*peso! !
!Combo1RewardRule methodsFor: 'reward creation' stamp: 'ja 4/30/2021 23:56:43' prior: 50877018 overrides: 50876984!
priceForShopCustomerNormal

	^ 97*peso! !

!testRun: #CoffeeShopTest #test01ThereAreNoSalesWhenSalesSystemIsCreated stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test02CanQuerySalesByCustomer stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test03SalesAreDistinguishedByCustomer stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test04VolumeSoldToCustomerIsZeroWhenCustomerHasNoSaleRegistered stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test05VolumeIs_250_WhenOnlyCombo1WasSoldToCustomer stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test06VolumeIs_100_WhenOnlyCombo2WasSoldToCustomer stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test07VolumeSoldToCustomerIsTheSumOfAllSoldProducts stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test08NoRewardExpectedWhenCustomerHasNotBuyAnything stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test09GoldCustomerGetsRewardedWithOneCombo2With50PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test10SilverCustomerGetsRewardedWithOneCombo2With75PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test11NormalCustomerGetsRewardedWithOneCombo2With90PercentItsPriceWhenRule1Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test12GoldCustomerGetsRewardedWithOneCombo1At75PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test13SilverCustomerGetsRewardedWithOneCombo1At83PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

!testRun: #CoffeeShopTest #test14NormalCustomerGetsRewardedWithOneCombo1At97PesosWhenRule2Holds stamp: 'ja 4/30/2021 23:56:46'!
PASSED!

----QUIT----(30 April 2021 23:57:03) CuisUniversity-4532.image priorSource: 17446084!

----STARTUP---- (2 May 2021 17:13:27) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/jampuero/Documentos/isw1/2020/Parciales/2020-1c/Recuperatorios/ISW1-2020-1C-Recu1erParcial.st----!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 17:16:02'!
PASSED!

Object subclass: #LocomotiveState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #LocomotiveState category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:22:48'!
Object subclass: #LocomotiveState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

LocomotiveState subclass: #LocomotiveStateManual
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #LocomotiveStateManual category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:23:04'!
LocomotiveState subclass: #LocomotiveStateManual
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

LocomotiveState subclass: #LocomotiveStateAutomatic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #LocomotiveStateAutomatic category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:23:09'!
LocomotiveState subclass: #LocomotiveStateAutomatic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!LocomotiveState methodsFor: 'no messages' stamp: 'ja 5/2/2021 17:23:39'!
step! !
!LocomotiveState methodsFor: 'as yet unclassified' stamp: 'ja 5/2/2021 17:23:47' prior: 50878206!
step
	
	self subclassResponsibility ! !
!LocomotiveStateAutomatic methodsFor: 'no messages' stamp: 'ja 5/2/2021 17:23:54' overrides: 50878210!
step! !
!LocomotiveStateManual methodsFor: 'no messages' stamp: 'ja 5/2/2021 17:23:59' overrides: 50878210!
step! !

!classDefinition: #Locomotive category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:24:39'!
Object subclass: #Locomotive
	instanceVariableNames: 'motor breaksChain odometersChain proximitySensor manual controlState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!Locomotive methodsFor: 'moving' stamp: 'ja 5/2/2021 17:24:36' prior: 50877950!
step
	
	controlState step. 
	manual ifFalse:
	[
	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]
	]
	ifTrue:
	[
			self inFrontOfAnObstacle
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
	]
! !

!classDefinition: #Locomotive category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:25:43'!
Object subclass: #Locomotive
	instanceVariableNames: 'motor breaksChain odometersChain proximitySensor manual controlState stateControl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!Locomotive methodsFor: 'moving' stamp: 'ja 5/2/2021 17:25:41' prior: 50878232!
step
	
	stateControl step. 
	manual ifFalse:
	[
	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]
	]
	ifTrue:
	[
			self inFrontOfAnObstacle
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
	]
! !

Object subclass: #Locomotive
	instanceVariableNames: 'motor breaksChain odometersChain proximitySensor manual stateControl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #Locomotive category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:25:52'!
Object subclass: #Locomotive
	instanceVariableNames: 'motor breaksChain odometersChain proximitySensor manual stateControl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!Locomotive methodsFor: 'initialization' stamp: 'ja 5/2/2021 17:27:59' prior: 50877987!
initializeWithOdometers: aChainOfOdometers withProximitySensor: aProximitySensor withMotor: aLocomotiveMotor withBreaks: aChainOfBreaks 

	odometersChain := aChainOfOdometers.
	proximitySensor := aProximitySensor.
	motor := aLocomotiveMotor.
	breaksChain := aChainOfBreaks.
	manual _ LocomotiveStateAutomatic with: self.! !
!LocomotiveState class methodsFor: 'no messages' stamp: 'ja 5/2/2021 17:30:26'!
with: aLocomotive
	
	^ self new initializeWith: aLocomotive ! !

!classDefinition: #LocomotiveState category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 17:30:53'!
Object subclass: #LocomotiveState
	instanceVariableNames: 'locomotive'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!LocomotiveState methodsFor: 'as yet unclassified' stamp: 'ja 5/2/2021 17:30:51'!
initializeWith: aLocomotive

	locomotive _ aLocomotive ! !
!Locomotive methodsFor: 'moving' stamp: 'ja 5/2/2021 17:32:17' prior: 50878263!
step
	
	stateControl step. 
	"manual ifFalse:
	[
	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]
	]
	ifTrue:
	[
			self inFrontOfAnObstacle
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
	]"
! !
!LocomotiveStateManual methodsFor: 'as yet unclassified' stamp: 'ja 5/2/2021 17:36:53' prior: 50878219 overrides: 50878210!
step

	locomotive stepWhenLocomotiveIsManual.! !
!LocomotiveStateAutomatic methodsFor: 'as yet unclassified' stamp: 'ja 5/2/2021 17:37:27' prior: 50878215 overrides: 50878210!
step
	
	locomotive stepWhenLocomotiveIsAutomatic.! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 17:40:36'!
stepWhenLocomotiveIsAutomatic! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 17:40:41'!
stepWhenLocomotiveIsManual! !
!Locomotive methodsFor: 'initialization' stamp: 'ja 5/2/2021 17:43:38' prior: 50878301!
initializeWithOdometers: aChainOfOdometers withProximitySensor: aProximitySensor withMotor: aLocomotiveMotor withBreaks: aChainOfBreaks 

	odometersChain := aChainOfOdometers.
	proximitySensor := aProximitySensor.
	motor := aLocomotiveMotor.
	breaksChain := aChainOfBreaks.
	stateControl _ LocomotiveStateAutomatic with: self.! !
!Locomotive methodsFor: 'initialization' stamp: 'ja 5/2/2021 17:43:51' prior: 50878372!
initializeWithOdometers: aChainOfOdometers withProximitySensor: aProximitySensor withMotor: aLocomotiveMotor withBreaks: aChainOfBreaks 

	odometersChain := aChainOfOdometers.
	proximitySensor := aProximitySensor.
	motor := aLocomotiveMotor.
	breaksChain := aChainOfBreaks.
	manual _ false.
	stateControl _ LocomotiveStateAutomatic with: self.! !
!Locomotive methodsFor: 'initialization' stamp: 'ja 5/2/2021 17:43:56' prior: 50878386!
initializeWithOdometers: aChainOfOdometers withProximitySensor: aProximitySensor withMotor: aLocomotiveMotor withBreaks: aChainOfBreaks 

	odometersChain := aChainOfOdometers.
	proximitySensor := aProximitySensor.
	motor := aLocomotiveMotor.
	breaksChain := aChainOfBreaks.
	"manual _ false."
	stateControl _ LocomotiveStateAutomatic with: self.! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 17:50:14' prior: 50878368!
stepWhenLocomotiveIsManual

	self inFrontOfAnObstacle
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 17:50:28' prior: 50878364!
stepWhenLocomotiveIsAutomatic

	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]! !
!Locomotive methodsFor: 'moving' stamp: 'ja 5/2/2021 17:51:02' prior: 50878332!
step
	
	stateControl step. 

! !
!Locomotive methodsFor: 'pilot' stamp: 'ja 5/2/2021 17:52:57' prior: 50878002!
manual

	stateControl _ LocomotiveStateManual with: self.! !
!Locomotive methodsFor: 'pilot' stamp: 'ja 5/2/2021 17:53:16' prior: 50877999!
automatic

	stateControl _ LocomotiveStateAutomatic with: self.! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 17:53:35'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 17:53:35'!
PASSED!
!Locomotive methodsFor: 'condition' stamp: 'ja 5/2/2021 17:54:12' prior: 50877979!
inFrontOfAnObstacle
	
	^proximitySensor obstacleSensed! !
!Locomotive methodsFor: 'condition' stamp: 'ja 5/2/2021 17:55:30' prior: 50877974!
enteringCurve
	
	^odometersChain first < odometersChain last! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 18:44:40'!
decelerateMotorAndCheckObstacle
	""
	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 18:45:13' prior: 50878491!
decelerateMotorAndCheckObstacle
	motor decelerate.
	self inFrontOfAnObstacle
		ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
		ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
	! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 18:46:35' prior: 50878421!
stepWhenLocomotiveIsAutomatic

	self enteringCurve
		ifTrue: [ self decelerateMotorAndCheckObstacle ]
		ifFalse:[
			self decelerateMotorAndCheckObstacle 
				]! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:46:38'!
FAILURE!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:46:38'!
PASSED!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:46:38'!
FAILURE!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:46:46'!
FAILURE!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:46:46'!
PASSED!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:46:46'!
FAILURE!
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 18:47:14' prior: 50878517!
stepWhenLocomotiveIsAutomatic

	self enteringCurve
		ifTrue: [ self decelerateMotorAndCheckObstacle ]
		ifFalse:[ self decelerateMotorAndCheckObstacle ]! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 17:50:28' prior: 50878591!
stepWhenLocomotiveIsAutomatic

	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]]
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]! !

!methodRemoval: Locomotive #decelerateMotorAndCheckObstacle stamp: 'ja 5/2/2021 18:52:20'!
decelerateMotorAndCheckObstacle
	motor decelerate.
	self inFrontOfAnObstacle
		ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]
		ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
	!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:52:24'!
PASSED!

Object subclass: #ProximityCurve
	instanceVariableNames: 'obstacleDistance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #ProximityCurve category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 18:56:00'!
Object subclass: #ProximityCurve
	instanceVariableNames: 'obstacleDistance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 18:56:48' prior: 50878599!
stepWhenLocomotiveIsAutomatic

	self enteringCurve
		ifTrue: [motor decelerate.
			self inFrontOfAnObstacle
				ifTrue: [breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [breaksChain do:[:eachBreak | eachBreak breakFree]]]
				
		ifFalse:[
			self inFrontOfAnObstacle
				ifTrue: [motor decelerate. breaksChain do:[:eachBreak | eachBreak break]]
				ifFalse: [motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree]
					]
				]! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 18:56:54'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 18:56:54'!
PASSED!
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 19:01:30' prior: 50878668!
stepWhenLocomotiveIsAutomatic

	
			
	self inFrontOfAnObstacle ifTrue: [ motor decelerate. breaksChain do:[:eachBreak | eachBreak break] ]
		ifFalse:[
			self enteringCurve ifTrue: [ motor decelerate . breaksChain do:[:eachBreak | eachBreak breakFree]]
						 ifFalse: [ motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree] ]
			]! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 19:01:33'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 19:01:33'!
PASSED!
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 19:01:47' prior: 50878714!
stepWhenLocomotiveIsAutomatic

	
			
	self inFrontOfAnObstacle ifTrue: [ motor decelerate. breaksChain do:[:eachBreak | eachBreak break] ]
						ifFalse:[
							self enteringCurve ifTrue: [ motor decelerate . breaksChain do:[:eachBreak | eachBreak breakFree]]
										 ifFalse: [ motor accelerate. breaksChain do:[:eachBreak | eachBreak breakFree] ]
							]! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 19:03:07' prior: 50878757!
stepWhenLocomotiveIsAutomatic

	
			
	self inFrontOfAnObstacle ifTrue: [ motor decelerate. breaksChain do:[:eachBreak | eachBreak break] ]
						ifFalse:[
							self enteringCurve ifTrue: [ motor decelerate ]
										 ifFalse: [ motor accelerate].
										 breaksChain do:[:eachBreak | eachBreak breakFree]
							]! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test02LocomotiveInAutomaticModeDeceleratesAndBrealsInFrontOfAnObstacle stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test03LocomotiveInAutomaticModeDeceleratesEnteringACurve stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test04LocomotiveInAutomaticModeDeceleratesAndBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test05LocomotiveInManualModeBreaksInFrontOfAnObstacle stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test06LocomotiveInManualModeDoesntBreakEnteringACurve stamp: 'ja 5/2/2021 19:03:12'!
PASSED!

!testRun: #LocomotiveTest #test07LocomotiveInManualModeBreaksInFrontOfAnObstacleAndEnteringACurve stamp: 'ja 5/2/2021 19:03:12'!
PASSED!
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 19:03:27' prior: 50878771!
stepWhenLocomotiveIsAutomatic

	
			
	self inFrontOfAnObstacle ifTrue: [ motor decelerate. breaksChain do:[:eachBreak | eachBreak break] ]
						ifFalse:[
							self enteringCurve ifTrue: [ motor decelerate ] ifFalse: [ motor accelerate].
										 breaksChain do:[:eachBreak | eachBreak breakFree]
							]! !
!Locomotive methodsFor: 'private' stamp: 'ja 5/2/2021 19:03:50' prior: 50878813!
stepWhenLocomotiveIsAutomatic

	
			
	self inFrontOfAnObstacle ifTrue: [ motor decelerate. breaksChain do:[:eachBreak | eachBreak break] ]
						ifFalse:[
							self enteringCurve ifTrue: [ motor decelerate ] 
											ifFalse: [ motor accelerate].
										 breaksChain do:[:eachBreak | eachBreak breakFree]
							]! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:20:54' prior: 50877793!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	self assert: locomotive speedingUp.
	self deny: locomotive enteringCurve.
	self deny: locomotive inFrontOfAnObstacle.
	self deny: locomotive breaking.
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:26:37' prior: 50878839!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	self assert: locomotive speedingUp.
	self deny: locomotive enteringCurve.
	self deny: locomotive inFrontOfAnObstacle.
	self deny: locomotive breaking.
	
	self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] enteringCurve: [:cosaANegar | self deny: cosaANegar ] inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] breaking:  [:cosaANegar | self deny: cosaANegar ].
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:28:24'!
speedingUp: aBlock1 enteringCurve: aBlock2 inFrontOfAnObstacle: aBlock3 breaking: aBlock4 for: aLocomotive
	
	aBlock1 value: aLocomotive speedingUP.
	
	"self assert: locomotive speedingUp.
	self deny: locomotive enteringCurve.
	self deny: locomotive inFrontOfAnObstacle.
	self deny: locomotive breaking.
	"! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:28:29' prior: 50878885!
speedingUp: aBlock1 enteringCurve: aBlock2 inFrontOfAnObstacle: aBlock3 breaking: aBlock4 for: aLocomotive
	
	aBlock1 value: aLocomotive speedUp .
	
	"self assert: locomotive speedingUp.
	self deny: locomotive enteringCurve.
	self deny: locomotive inFrontOfAnObstacle.
	self deny: locomotive breaking.
	"! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:29:10' prior: 50878898!
speedingUp: aBlock1 enteringCurve: aBlock2 inFrontOfAnObstacle: aBlock3 breaking: aBlock4 for: aLocomotive
	
	aBlock1 value: aLocomotive speedUp .
	aBlock2 value: aLocomotive enteringCurve .
	aBlock3 value: aLocomotive inFrontOfAnObstacle .
	aBlock4 value: aLocomotive breaking .
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:29:18' prior: 50878859!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	self assert: locomotive speedingUp.
	self deny: locomotive enteringCurve.
	self deny: locomotive inFrontOfAnObstacle.
	self deny: locomotive breaking.
	
	self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] enteringCurve: [:cosaANegar | self deny: cosaANegar ] inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive .
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:29:33' prior: 50878923!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.

	self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive .
	
	! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:29:58'!
ERROR!

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:29:58'!
ERROR!
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:30:12' prior: 50878911!
speedingUp: aBlock1 enteringCurve: aBlock2 inFrontOfAnObstacle: aBlock3 breaking: aBlock4 for: aLocomotive
	
	aBlock1 value: aLocomotive speedingUp .
	aBlock2 value: aLocomotive enteringCurve .
	aBlock3 value: aLocomotive inFrontOfAnObstacle .
	aBlock4 value: aLocomotive breaking .
	! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:30:15'!
PASSED!
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:31:32' prior: 50878950!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	
	self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive .
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:34:15' prior: 50878997!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive xxx yyy |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	xxx _ OrderedCollection  with: [ self assert: locomotive speedingUp].
	yyy _ OrderedCollection with: [ self deny: locomotive enteringCurve.] with: [self deny: locomotive inFrontOfAnObstacle.] with:[ self deny: locomotive breaking ].
	
	"self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive ."
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:35:06' prior: 50879020!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive xxx yyy |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	xxx _ OrderedCollection  with: [ self assert: locomotive speedingUp].
	yyy _ OrderedCollection with: [ self deny: locomotive enteringCurve.] with: [self deny: locomotive inFrontOfAnObstacle.] with:[ self deny: locomotive breaking ].
	
	self assertXXX: xxx andDeny: yyy.
	
	"self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive ."
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:35:44'!
assertXXX: xxx andDeny: yyy.
	
	xxx do:[ :a | a value ].
	yyy do:[:b | b value].
	
	
	! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:35:51'!
PASSED!

!classDefinition: #LocomotiveTest category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 19:38:21'!
TestCase subclass: #LocomotiveTest
	instanceVariableNames: 'odometerSimulatorWithNoMovement proximitySimulatorWithNoObstacle proximitySimulatorWithObstacle odometerSimulatorWithFrictionAhead odometerSimulatorMovingWithNoFriction arregloDeCosasParaAsertar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!

!classDefinition: #LocomotiveTest category: 'ISW1-2020-1C-Recu1erParcial' stamp: 'ja 5/2/2021 19:38:22'!
TestCase subclass: #LocomotiveTest
	instanceVariableNames: 'odometerSimulatorWithNoMovement proximitySimulatorWithNoObstacle proximitySimulatorWithObstacle odometerSimulatorWithFrictionAhead odometerSimulatorMovingWithNoFriction arregloDeCosasParaAsertar arregloDeCosasParaDenegar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Recu1erParcial'!
!LocomotiveTest methodsFor: 'setUp' stamp: 'ja 5/2/2021 19:38:18' prior: 50877922 overrides: 16927572!
setUp

	odometerSimulatorWithNoMovement _ # (0 0 0 0 0).
	odometerSimulatorWithFrictionAhead _ # (10 11 12 12 12).
	odometerSimulatorMovingWithNoFriction _ # (11 11 11 11 11).
	proximitySimulatorWithNoObstacle _ ProximitySimulator clear.
	proximitySimulatorWithObstacle _ ProximitySimulator obstacle.
	
	arregloDeCosasParaAsertar _ OrderedCollection new.
	arregloDeCosasParaDenegar _ OrderedCollection new.! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:41:32' prior: 50879051!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	arregloDeCosasParaAsertar add: locomotive speedingUp.
	arregloDeCosasParaDenegar add: locomotive enteringCurve; add: locomotive inFrontOfAnObstacle; add: locomotive breaking .
	
	"self assertXXX: xxx andDeny: yyy."
	
	"self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive ."
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:42:00' prior: 50879138!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	arregloDeCosasParaAsertar add: locomotive speedingUp.
	arregloDeCosasParaDenegar add: locomotive enteringCurve; add: locomotive inFrontOfAnObstacle; add: locomotive breaking .
	
	self assertAndDeny.
	
	"self speedingUp: [:cosaAAsertar | self assert: cosaAAsertar ] 
		enteringCurve: [:cosaANegar | self deny: cosaANegar ] 
		inFrontOfAnObstacle:  [:cosaANegar | self deny: cosaANegar ] 
		breaking:  [:cosaANegar | self deny: cosaANegar ] for: locomotive ."
	
	! !
!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 19:42:52'!
assertAndDeny
	
	arregloDeCosasParaAsertar do:[ :a | self assert: a ].
	arregloDeCosasParaDenegar do:[:b | self deny: b].
	
	
	! !

!testRun: #LocomotiveTest #test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle stamp: 'ja 5/2/2021 19:42:55'!
PASSED!

----QUIT----(2 May 2021 19:55:56) CuisUniversity-4532.image priorSource: 17475615!

----STARTUP---- (2 May 2021 20:17:00) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!LocomotiveTest methodsFor: 'tests' stamp: 'ja 5/2/2021 20:17:06' prior: 50879168!
test01LocomotiveInAutomaticModeAcceleratesWhenNoCurveOrObstacle

	| locomotive |
	
	locomotive _ Locomotive withOdometers: odometerSimulatorWithNoMovement
									withProximitySensor: proximitySimulatorWithNoObstacle
									withMotor: LocomotiveMotor new
									withBreaks: (OrderedCollection with: LocomotiveBreak new). 
	
	locomotive automatic.
	locomotive step.
	
	arregloDeCosasParaAsertar add: locomotive speedingUp.
	arregloDeCosasParaDenegar add: locomotive enteringCurve; add: locomotive inFrontOfAnObstacle; add: locomotive breaking .
	
	self assertAndDeny.
	
	! !

----QUIT----(2 May 2021 20:23:16) CuisUniversity-4532.image priorSource: 17521829!

----STARTUP---- (15 May 2021 18:49:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRoverTest category: '' stamp: 'ja 5/15/2021 18:59:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classRemoval: #MarsRoverTest stamp: 'ja 5/15/2021 18:59:56'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:00:24'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ja 5/15/2021 19:04:27'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:05:06' prior: 50879269!
test01

	! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:15:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:13:43' prior: 50879273!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 facing: #North.
	
	self assert: (mars isInPosition: 1@3 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:15:29' prior: 50879284!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:15:46'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:16:13'!
inPosition: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:17:28' prior: 50879301!
inPosition: aPosition heading: aCardinalPoint 
	
	^ self new initializeInPosition: aPosition heading: aCardinalPoint! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:17:35'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:17:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:17:45'!
initializeInPosition: aPosition heading: aCardinalPoint 
	self shouldBeImplemented.
	position := aPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:17:48' prior: 50879324!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position := aPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 19:18:04' prior: 50879332!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position _ aPosition.
	head _ aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:07'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:23'!
isInPosition: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:29' prior: 50879348!
isInPosition: aPoint heading: aSymbol 
	
	^ true! !

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:18:35'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 19:18:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:18:55'!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:19:53' prior: 50879375!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:20:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:04' prior: 50879354!
isInPosition: aPoint heading: aCardinalPoint
	
	^ position = aPoint and:[ head  = aCardinalPoint ]! !

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:21:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:23'!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:21:33' prior: 50879406!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:26:53' prior: 50879414!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:28:12' prior: 50879422!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:28:23' prior: 50879430!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:29:59'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:30:09'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:01' prior: 50879448!
process: aCommands

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:14' prior: 50879453!
process: aCommands

	position + 0@1.

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:31:44' prior: 50879457!
process: commands

	position + 0@1.

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:31:59'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:32:12' prior: 50879462!
process: commands

	position + (0@1).

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:13'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:32:42' prior: 50879469!
process: commands

	position _ position + (0@1).

	! !

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:32:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:35:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:36:38'!
test01CorrectInitialPosition

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test01 stamp: 'ja 5/15/2021 19:36:38'!
test01

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (mars isInPosition: 1@3 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:37:32'!
test03MoveForward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ja 5/15/2021 19:37:32'!
test03

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:37:49'!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:38:04' prior: 50879526!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).! !

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:40:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:42:09' prior: 50879476!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ]
	
	

	! !

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:42:15'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:43:24'!
test05TurnRight

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).! !

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:43:26'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:44:28' prior: 50879546!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ head _ #East]
	
	

	! !

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:44:35'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:44:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:44:58'!
test05TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:45:12'!
test06TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !

!methodRemoval: MarsRoverTest #test05TurnLeft stamp: 'ja 5/15/2021 19:45:12'!
test05TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:45:16'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:45:57' prior: 50879578!
process: commands
	
	commands = 'f' ifTrue: [ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ head _ #East].
	commands = 'l' ifTrue: [ head _ #West]
	
	

	! !

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 19:46:00'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 19:46:00'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:58:48'!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 19:59:34' prior: 50879657!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 19:59:35'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:00:50' prior: 50879670!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:00:51'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:18' prior: 50879686!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:01:20'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:28' prior: 50879702!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:01:40' prior: 50879719!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:02:18'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:02:47' prior: 50879732!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:02:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:06:31' prior: 50879629!
process: commands
	
	commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:08:02'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:02'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:11'!
invalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:38' prior: 50879800!
invalidCommandErrorDescription
	
	^ 'Invalid command'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:08:41' prior: 50879805!
invalidCommandErrorDescription
	
	^ 'Invalid command.'! !

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:08:43'!
FAILURE!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:09:20'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:09:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:12:20'!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 0@3 heading: #East).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:12:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:14' prior: 50879764!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:29' prior: 50879851!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:45' prior: 50879866!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:14:49' prior: 50879872!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:15:09'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:16:22'!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	aCommand = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	aCommand = 'r' ifTrue: [ ^ head _ #East ].
	aCommand = 'l' ifTrue: [ ^ head _ #West ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:16:40'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:16:40'!
ERROR!

Object subclass: #MarsRoverHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHead category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:17:38'!
Object subclass: #MarsRoverHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRenamed: #MarsRoverHead as: #MarsRoverHeading stamp: 'ja 5/15/2021 20:20:01'!
Smalltalk renameClassNamed: #MarsRoverHead as: #MarsRoverHeading!

MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #North category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:10'!
MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #West category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:14'!
MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #East category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:17'!
MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #South category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:20:20'!
MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:22:42' prior: 50879307!
inPosition: aPosition heading: aCardinalPoint 
	
	^ self new initializeInPosition: aPosition heading: aCardinalPoint! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 5/15/2021 20:23:53' prior: 50879339!
initializeInPosition: aPosition heading: aCardinalPoint 
	
	position _ aPosition.
	head _ MarsRoverHeading for: aCardinalPoint.! !
!MarsRoverHeading class methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:24:49'!
for: aCardinalPoint

	aCardinalPoint = #North ifTrue: [ ^ North new]! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:25:59' prior: 50880009!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:28:37' prior: 50879896!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	aCommand = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	aCommand = 'r' ifTrue: [ ^ head _ head turnRight ].
	aCommand = 'l' ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRoverHeading methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:29:05'!
turnRight

	self subclassResponsibility ! !
!East methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:29:42' overrides: 50880038!
turnRight

	^ South new.! !
!North methodsFor: 'nil' stamp: 'ja 5/15/2021 20:29:57' overrides: 50880038!
turnRight

	^ East new.! !
!South methodsFor: 'no messages' stamp: 'ja 5/15/2021 20:30:15' overrides: 50880038!
turnRight

	^ West new.! !
!West methodsFor: 'nil' stamp: 'ja 5/15/2021 20:30:27' overrides: 50880038!
turnRight

	^ North new.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:30:42'!
turnLeft

	^ South new.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:30:55'!
turnLeft

	^ East new.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:07'!
turnLeft

	^ West new.! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:22'!
turnLeft

	^ North new.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:31:37'!
turnLeft

	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:33:51' prior: 50880025!
processACommand: aCommand

	aCommand = 'f' ifTrue: [ ^ position _ position + head moveForward ].
	aCommand = 'b' ifTrue: [ ^ position _ position + head moveBackward ].
	aCommand = 'r' ifTrue: [ ^ head _ head turnRight ].
	aCommand = 'l' ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:08'!
moveForward

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:30' overrides: 50880093!
moveForward

	^ 1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:34:44' overrides: 50880093!
moveForward

	^ 0@1! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:07' overrides: 50880093!
moveForward

	^ 0@-1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:23' overrides: 50880093!
moveForward

	^ -1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:39'!
moveBackward

	^ 1@0! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:48'!
moveBackward

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:35:55'!
moveBackward

	^ 0@-1! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:36:04'!
moveBackward

	^ -1@0.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:36:11'!
moveBackward

	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:38:30' prior: 50879393!
isInPosition: aPoint heading: aCardinalPoint
	
	^ position = aPoint and:[ head isHeading = aCardinalPoint ]! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:38:48'!
isHeading

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:03' overrides: 50880141!
isHeading

	^ #East.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:13' overrides: 50880141!
isHeading

	^ #East.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:19' prior: 50880150 overrides: 50880141!
isHeading

	^ #North.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:28' overrides: 50880141!
isHeading

	^ #South.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:39:35' overrides: 50880141!
isHeading

	^ #West.! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:39:48'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:39:48'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:39:48'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:40:20' prior: 50879879!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	"commands = 'f' ifTrue: [ ^ position _ position + (0@1) ].
	commands = 'b' ifTrue: [ ^ position _ position - (0@1) ].
	commands = 'r' ifTrue: [ ^ head _ #East ].
	commands = 'l' ifTrue: [ ^ head _ #West ]."
	
	
	

	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:40:25' prior: 50880189!
process: aCommandsList
	
	aCommandsList do: [:aCommand | self processACommand: aCommand ].
	
	
	
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:40:29'!
ERROR!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:40:29'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:40:29'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:41:43' prior: 50880079!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + head moveForward ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackward ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:41:45'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:41:47'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:41:47'!
FAILURE!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:41:47'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:43:36' prior: 50879839!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	self assert: (mars isInPosition: 0@3 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:44:00' prior: 50880271!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 0@4 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:44:02'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:45:34' prior: 50880281!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	"mars process: 'flbrbr'."
	mars process: 'flb'.
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@4 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:45:35'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:45:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:21' prior: 50880296!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	"mars process: 'flb'."
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@3 heading: #West).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:23'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:29' prior: 50880332!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	"mars process: 'flb'."
	
	"self assert: (mars isInPosition: 0@3 heading: #East)."
	self assert: (mars isInPosition: 2@3 heading: #East).! !

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:46:31'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:46:31'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:46:36' prior: 50880347!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:12'!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbxr'.
	
	self assert: (mars isInPosition: 2@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:22' prior: 50880392!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbxr'.
	
	
	
	self assert: (mars isInPosition: 2@3 heading: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:47:52' prior: 50880401!
test09ProcessIncorrectCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	mars process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 2@3 heading: #North)].
	! !

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:48:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:51:38'!
test10IncorrectCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!testRun: #MarsRoverTest #test10IncorrectCardinalPoint stamp: 'ja 5/15/2021 20:51:45'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:04'!
test10InvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!methodRemoval: MarsRoverTest #test10IncorrectCardinalPoint stamp: 'ja 5/15/2021 20:52:07'!
test10IncorrectCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:19'!
test07InvalidCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].! !

!methodRemoval: MarsRoverTest #test07IncorrectCommand stamp: 'ja 5/15/2021 20:52:19'!
test07IncorrectCommand

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ mars process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: mars invalidCommandErrorDescription.
			self assert: (mars isInPosition: 1@3 heading: #North)].!
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:46' prior: 50880015!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	MarsRover invalidCardinalPointErrorDescription.! !
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:52:53' prior: 50880487!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	self error: MarsRover invalidCardinalPointErrorDescription.! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:53:16'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:16'!
ERROR!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:16'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:53:27'!
invalidCardinalPointErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:53:49' prior: 50880541!
invalidCardinalPointErrorDescription
	
	^ 'Invalid cardinal point.'! !

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:53'!
FAILURE!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 20:53:58'!
PASSED!

Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:57:04'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverHeading class methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:58:36' prior: 50880499!
for: aCardinalPoint

	aCardinalPoint = #East ifTrue: [ ^ East new].
	aCardinalPoint = #North ifTrue: [ ^ North new].
	aCardinalPoint = #South ifTrue: [ ^ South new].
	aCardinalPoint = #West ifTrue: [ ^ West new].
	
	self error: MarsRover invalidCardinalPointErrorDescription.! !

Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-Exercise' stamp: 'ja 5/15/2021 20:58:43'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 20:59:09' prior: 50880230!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + head moveForwardFor: self ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackwardFor: self ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 1@0.! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 0@-1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ 0@1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	^ -1@0! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:08'!
moveForward: aMarsRover

	self subclassResponsibility ! !

!methodRemoval: East #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 1@0.!

!methodRemoval: South #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 0@-1!

!methodRemoval: North #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ 0@1!

!methodRemoval: West #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	^ -1@0!

!methodRemoval: MarsRoverHeading #moveForward stamp: 'ja 5/15/2021 21:00:09'!
moveForward

	self subclassResponsibility !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 0@-1! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ 0@1! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	^ -1@0! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:00:32'!
moveForwardFor: aMarsRover

	self subclassResponsibility ! !

!methodRemoval: South #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 0@-1!

!methodRemoval: East #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 1@0.!

!methodRemoval: North #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ 0@1!

!methodRemoval: West #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	^ -1@0!

!methodRemoval: MarsRoverHeading #moveForward: stamp: 'ja 5/15/2021 21:00:32'!
moveForward: aMarsRover

	self subclassResponsibility !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:01:04' prior: 50880674 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardEast.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:01:46'!
moveForwardEast

	^ 1@0
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:05'!
moveForwardNorth

	^ 0@1
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:16'!
moveForwardSouth

	^ 0@-1
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:30'!
moveForwardWest

	^ -1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:02:46'!
moveBackwardWest

	^ 1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:00'!
moveBackwardEast

	^ -1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:09'!
moveBackwardNorth

	^ 0@-1! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:17'!
moveBackwardSouth

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:03:49' prior: 50880678 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardNorth! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:08' prior: 50880670 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardSouth ! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:16' prior: 50880682 overrides: 50880686!
moveForwardFor: aMarsRover

	^ aMarsRover moveForwardWest ! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ -1@0.! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ 1@0! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	^ 0@1! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40'!
moveBackward: aMarsRover

	self subclassResponsibility ! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:40' overrides: 50880776!
moveBackward: aMarsRover

	^ 0@-1! !

!methodRemoval: East #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ -1@0.!

!methodRemoval: West #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 1@0!

!methodRemoval: South #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 0@1!

!methodRemoval: MarsRoverHeading #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	self subclassResponsibility !

!methodRemoval: North #moveBackward stamp: 'ja 5/15/2021 21:04:40'!
moveBackward

	^ 0@-1!
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	^ 1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	^ -1@0.! !
!MarsRoverHeading methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55'!
moveBackwardFor: aMarsRover

	self subclassResponsibility ! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55' overrides: 50880808!
moveBackwardFor: aMarsRover

	^ 0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:04:55' overrides: 50880808!
moveBackwardFor: aMarsRover

	^ 0@-1! !

!methodRemoval: West #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 1@0!

!methodRemoval: East #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ -1@0.!

!methodRemoval: MarsRoverHeading #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	self subclassResponsibility !

!methodRemoval: South #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 0@1!

!methodRemoval: North #moveBackward: stamp: 'ja 5/15/2021 21:04:55'!
moveBackward: aMarsRover

	^ 0@-1!
!East methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:13' prior: 50880804 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardEast ! !
!North methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:30' prior: 50880818 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardNorth ! !
!South methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:38' prior: 50880813 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardSouth ! !
!West methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:05:47' prior: 50880800 overrides: 50880808!
moveBackwardFor: aMarsRover

	^ aMarsRover moveBackwardWest ! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:05:50'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:05:50'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:05:50'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:06:21'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:06:21'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:06:21'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:07:16'!
ERROR!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:07:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:08:04' prior: 50880620!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + (head moveForwardFor: self) ].
	aCommand = $b ifTrue: [ ^ position _ position + head moveBackwardFor: self ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:08:08'!
ERROR!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:08:08'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:08:08'!
ERROR!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:08:08'!
FAILURE!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:08:08'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 5/15/2021 21:08:22' prior: 50880924!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ position _ position + (head moveForwardFor: self) ].
	aCommand = $b ifTrue: [ ^ position _ position + (head moveBackwardFor: self) ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/15/2021 21:08:25'!
PASSED!

----QUIT----(15 May 2021 21:59:37) CuisUniversity-4532.image priorSource: 17522690!

----STARTUP---- (16 May 2021 18:39:57) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 18:48:16'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 18:55:01'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 18:55:01'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:07:47'!
moveForward

	^ position _ position + (head moveForwardFor: self)! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:07:47' prior: 50880966!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ position _ position + (head moveBackwardFor: self) ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:08:00'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:08:00'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:08:32'!
moveBackward

	^ position _ position + (head moveBackwardFor: self)! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:08:32' prior: 50881073!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ head _ head turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:01'!
turnRight

	^ head _ head turnRight! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:01' prior: 50881118!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ self turnRight ].
	aCommand = $l ifTrue: [ ^ head _ head turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:10'!
turnLeft

	^ head _ head turnLeft! !
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 19:09:10' prior: 50881134!
processACommand: aCommand

	aCommand = $f ifTrue: [ ^ self moveForward ].
	aCommand = $b ifTrue: [ ^ self moveBackward ].
	aCommand = $r ifTrue: [ ^ self turnRight ].
	aCommand = $l ifTrue: [ ^ self turnLeft ].
	
	self error: self invalidCommandErrorDescription.
	

	! !

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:17:07'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:19:29'!
PASSED!

!testRun: #MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:19:56'!
PASSED!

!testRun: #MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:19:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ja 5/16/2021 19:22:08' prior: 50879497!
test01CorrectInitialPosition

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:33:56'!
test01MarsRoverStartCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test01CorrectInitialPosition stamp: 'ja 5/16/2021 19:33:56'!
test01CorrectInitialPosition

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:43:52'!
test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	! !

!methodRemoval: MarsRoverTest #test10InvalidCardinalPoint stamp: 'ja 5/16/2021 19:43:52'!
test10InvalidCardinalPoint

	self should: [ MarsRover inPosition: 1@3 heading: #A] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: MarsRover invalidCardinalPointErrorDescription].
	!

!methodRemoval: MarsRoverTest #test02 stamp: 'ja 5/16/2021 19:44:31'!
test02

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	self deny: (mars isInPosition: 1@3 heading: #South).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:45:41'!
test10

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'ffff'. 
	
	self assert: (mars isInPosition: 1@7 heading: #North).! !

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 19:45:45'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:48:53'!
test03MoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03MoveForward stamp: 'ja 5/16/2021 19:48:53'!
test03MoveForward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:49:15'!
test03MarsRoverMoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).! !

!methodRemoval: MarsRoverTest #test03MoveForwardCorrectly stamp: 'ja 5/16/2021 19:49:15'!
test03MoveForwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'f'. 
	
	self assert: (mars isInPosition: 1@4 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:49:36'!
test04MarsRoverMoveBackwardCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test04MoveBackward stamp: 'ja 5/16/2021 19:49:36'!
test04MoveBackward

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'b'. 
	
	self assert: (mars isInPosition: 1@2 heading: #North).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:50:04'!
test05MarsRoverTurnRightCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test05TurnRight stamp: 'ja 5/16/2021 19:50:04'!
test05TurnRight

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'r'. 
	
	self assert: (mars isInPosition: 1@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:50:16'!
test06MarsRoverTurnLeftCorrectly

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).! !

!methodRemoval: MarsRoverTest #test06TurnLeft stamp: 'ja 5/16/2021 19:50:16'!
test06TurnLeft

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	mars process: 'l'. 
	
	self assert: (mars isInPosition: 1@3 heading: #West).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:52:23' prior: 50881321!
test03MarsRoverMoveForwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'f'. 
	
	self assert: (marsRover isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:52:46' prior: 50881338!
test04MarsRoverMoveBackwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'b'. 
	
	self assert: (marsRover isInPosition: 1@2 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:53:03' prior: 50881354!
test05MarsRoverTurnRightCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'r'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:53:14' prior: 50881370!
test06MarsRoverTurnLeftCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'l'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #West).! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 19:53:24'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 19:53:24'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ja 5/16/2021 20:00:22' prior: 50880202!
process: aCommandsList
	
	aCommandsList do: [ :aCommand | self processACommand: aCommand ].
	
	
	
	

	! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:05:23' prior: 50880461!
test07InvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:06:05'!
test07MarsRoverCanNotProcessInvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].! !

!methodRemoval: MarsRoverTest #test07InvalidCommand stamp: 'ja 5/16/2021 20:06:05'!
test07InvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self should: [ marsRover process: 'a' ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 1@3 heading: #North)].!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:07:50'!
test08MarsRoverProcessCommandList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test08ProcessCommandsList stamp: 'ja 5/16/2021 20:07:50'!
test08ProcessCommandsList

	| mars |
	
	mars _ MarsRover inPosition: 1@3 heading: #North.
	
	mars process: 'flbrbr'.
	
	self assert: (mars isInPosition: 2@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:08:29' prior: 50881499!
test08MarsRoverProcessCommandList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:08:42' prior: 50880411!
test09ProcessIncorrectCommandsList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandList stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 20:08:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:08:49'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:09:36'!
test08MarsRoverProcessCommandListCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).! !

!methodRemoval: MarsRoverTest #test08MarsRoverProcessCommandList stamp: 'ja 5/16/2021 20:09:36'!
test08MarsRoverProcessCommandList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'flbrbr'.
	
	self assert: (marsRover isInPosition: 2@3 heading: #East).!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:12:09'!
test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	! !

!methodRemoval: MarsRoverTest #test09ProcessIncorrectCommandsList stamp: 'ja 5/16/2021 20:12:09'!
test09ProcessIncorrectCommandsList

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.

	self should: [ 	marsRover process: 'flbrbxr'. ] 
		raise: Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isInPosition: 2@3 heading: #North)].
	!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:15:21' prior: 50881295!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: 'ffff'. 
	
	self assert: (marsRover isInPosition: 1@7 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:15:37' prior: 50881621!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:15:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:15:39'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:18:15'!
test10MarsRoverDoesNothingIfItNotReceiveCommands

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test10 stamp: 'ja 5/16/2021 20:18:15'!
test10

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:19:35'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:20:39'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:20:39'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:50' prior: 50881386!
test03MarsRoverMoveForwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'f'. 
	
	self assert: (marsRover isInPosition: 1@4 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:54' prior: 50881395!
test04MarsRoverMoveBackwardCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'b'. 
	
	self assert: (marsRover isInPosition: 1@2 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:21:58' prior: 50881404!
test05MarsRoverTurnRightCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'r'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #East).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:22:02' prior: 50881413!
test06MarsRoverTurnLeftCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: 'l'. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #West).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 20:22:12' prior: 50881674!
test10MarsRoverDoesNothingIfItNotReceiveCommands

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	marsRover process: ''. 
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/16/2021 20:22:16'!
PASSED!

----QUIT----(16 May 2021 20:22:26) CuisUniversity-4532.image priorSource: 17579409!

----STARTUP---- (17 May 2021 15:01:05) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01MarsRoverStartCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverDoesNotStartHeadingToAnInvalidCardinalPoint stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMoveForwardCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverMoveBackwardCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnRightCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverTurnLeftCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverCanNotProcessInvalidCommand stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverProcessCommandListCorrectly stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverProcessCommandsListCorrectlyBeforeProcessingInvalidCommand stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesNothingIfItNotReceiveCommands stamp: 'ja 5/17/2021 15:01:22'!
PASSED!

----QUIT----(17 May 2021 15:28:52) CuisUniversity-4532.image priorSource: 17606155!

----STARTUP---- (22 May 2021 23:35:47) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!

!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/22/2021 23:36:08'!
m2

	^ #North! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/22/2021 23:36:08' prior: 50881252!
test01MarsRoverStartCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: self m2.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !
!MarsRoverTest methodsFor: 'testing' stamp: 'ja 5/16/2021 19:33:56' prior: 50881894!
test01MarsRoverStartCorrectly

	| marsRover |
	
	marsRover _ MarsRover inPosition: 1@3 heading: #North.
	
	self assert: (marsRover isInPosition: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #m2 stamp: 'ja 5/22/2021 23:36:42'!
m2

	^ #North!

----QUIT----(22 May 2021 23:39:17) CuisUniversity-4532.image priorSource: 17607458!

----STARTUP---- (26 May 2021 18:39:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(26 May 2021 18:44:42) CuisUniversity-4532.image priorSource: 17608379!

----STARTUP---- (28 May 2021 17:29:39) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(28 May 2021 18:19:25) CuisUniversity-4532.image priorSource: 17608574!

----STARTUP---- (31 May 2021 22:28:53) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(31 May 2021 22:31:44) CuisUniversity-4532.image priorSource: 17608769!

----STARTUP---- (3 June 2021 19:59:21) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #West stamp: 'ja 6/3/2021 19:59:52'!
MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #South stamp: 'ja 6/3/2021 19:59:53'!
MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #North stamp: 'ja 6/3/2021 19:59:54'!
MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #East stamp: 'ja 6/3/2021 19:59:54'!
MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRoverHeading stamp: 'ja 6/3/2021 19:59:55'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRover stamp: 'ja 6/3/2021 19:59:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRoverTest stamp: 'ja 6/3/2021 19:59:57'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

----End fileIn of /home/jampuero/Documentos/isw1/tps-catedra-2021/2021-1c/19-MarsRover-El regreso/MarsRover-WithHeading.st----!

TestCase subclass: #TestZZZ
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #TestZZZ category: 'MarsRover-WithHeading' stamp: 'ja 6/3/2021 20:02:03'!
TestCase subclass: #TestZZZ
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ja 6/3/2021 20:19:06'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestZZZ methodsFor: 'no messages' stamp: 'ja 6/3/2021 20:18:57'!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log  new.
	
	marsRover addLogToPositoin: log.   
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:23:11' prior: 50882534!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:23:31' prior: 50882545!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
       marsRover addLogToHeading: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:25:55' prior: 50882556!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
       marsRover addLogToHeading: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:44:04' prior: 50882568!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:44:04'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:44:13'!
addLogToPositoin: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ja 6/3/2021 20:44:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:44:42' prior: 50882592!
addLogToPositoin: aLog 
	
	log _ aLog.! !
!Log methodsFor: 'no messages' stamp: 'ja 6/3/2021 20:45:06' overrides: 16880927!
size

	^ 1! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:45:18'!
first

	^ '1@2'! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:45:29'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:46:04' prior: 50882580!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:46:05'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:46:05'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:46:17' prior: 50882618!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:46:36' prior: 50882633!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:47:09'!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:44:04' prior: 50882644!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:47:21'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:47:24'!
FAILURE!

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:47:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:48:05' prior: 50882605!
addLogToPositoin: aLog 
	
	log _ aLog.! !
!MarsRover methodsFor: 'command processing' stamp: 'ja 6/3/2021 20:51:01' prior: 50882219!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].
	
	self signalInvalidCommand.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 20:52:30' prior: 50882201!
moveNorth
	
	position := position + (0@1).
	
	log add: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 20:53:04' prior: 50882703!
moveNorth
	
	position := position + (0@1).
	
	log ttt: position.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ja 6/3/2021 20:54:57'!
Object subclass: #Log
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:54:55'!
ttt: aPosition

	records add: aPosition.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:55:14' overrides: 16896425!
initialize

	records _ OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:55:27' prior: 50882609 overrides: 16880927!
size

	^ records size ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:55:43' prior: 50882612!
first

	^ records first asString ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:57:09'!
second

	^ records at: 2 ! !

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:57:36'!
FAILURE!

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:57:36'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:57:59' prior: 50882738!
second

	^ records at: 2 ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:58:03' prior: 50882734!
first

	^ records first ! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 20:58:15' prior: 50882708!
moveNorth
	
	position := position + (0@1).
	
	log ttt: position.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:58:22' prior: 50882720!
ttt: aPosition

	records add: aPosition asString .! !

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:58:28'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/3/2021 20:58:31'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/3/2021 20:58:34'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:59:36' prior: 50882656!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'b'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 20:59:41' prior: 50882770!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 21:01:20'!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:01:59' prior: 50882205!
moveSouth
	
	position := position + (0@-1)
	
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:03' prior: 50882209!
moveWest
	
	position := position + (-1@0)
	
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:07' prior: 50882193!
moveEast
	
	position := position + (1@0)
	
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:20' prior: 50882816!
moveEast
	
	position := position + (1@0).
	self halt.
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:25' prior: 50882811!
moveWest
	
	position := position + (-1@0)
	self halt.
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:27' prior: 50882826!
moveWest
	
	position := position + (-1@0).
	self halt.
	log ttt: position.! !

!testRun: #TestZZZ #test03 stamp: 'ja 6/3/2021 21:02:34'!
ERROR!

!testRun: #TestZZZ #test03 stamp: 'ja 6/3/2021 21:02:34'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:02:51' prior: 50882806!
moveSouth
	
	position := position + (0@-1).
	
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:03:04' prior: 50882831!
moveWest
	
	position := position + (-1@0).
	
	log ttt: position.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/3/2021 21:03:18' prior: 50882821!
moveEast
	
	position := position + (1@0).
	
	log ttt: position.! !

!testRun: #TestZZZ #test03 stamp: 'ja 6/3/2021 21:03:25'!
FAILURE!

!testRun: #TestZZZ #test03 stamp: 'ja 6/3/2021 21:03:25'!
FAILURE!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 21:03:58' prior: 50882794!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	self assert: '1@3' equals: log third.	
	self assert: '1@3' equals: log second.		
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 21:04:34' prior: 50882861!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@1' equals: log second.	
	self assert: '2@1' equals: log third.	
	self assert: '1@1' equals: log fourth.		
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 21:04:48'!
third

	^ records at: 3 ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/3/2021 21:04:54'!
fourth

	^ records at: 4! !

!testRun: #TestZZZ #test03 stamp: 'ja 6/3/2021 21:04:57'!
PASSED!

----QUIT----(3 June 2021 21:14:09) CuisUniversity-4532.image priorSource: 17608964!

----STARTUP---- (5 June 2021 15:25:31) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 15:42:16'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 15:42:18'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 15:42:19'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:46:56'!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: 'North' equals: log first.
	
	! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:47:05'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:47:17'!
addLogToHeading: aLog 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:47:29' prior: 50882925!
addLogToHeading: aLog 
	
	log add: aLog ! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:47:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:48:08' prior: 50882930!
addLogToHeading: aLog 
	
	log _ aLog ! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:48:21'!
FAILURE!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:48:21'!
FAILURE!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:48:41' prior: 50882912!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'North' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:48:47' prior: 50882946!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log first.
	
	! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:48:48'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:49:45' prior: 50882143!
headEast
	
	head := MarsRoverHeadingEast new.
	
	log zzz: head.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:49:53' prior: 50882147!
headNorth
	
	head := MarsRoverHeadingNorth new.
	
		log zzz: head.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:49:59' prior: 50882151!
headSouth
	
	head := MarsRoverHeadingSouth new.
	
		log zzz: head.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:50:04' prior: 50882980!
headSouth
	
	head := MarsRoverHeadingSouth new.
	
	log zzz: head.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:50:12' prior: 50882155!
headWest
	
	head := MarsRoverHeadingWest new.
	
	log zzz: head.	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:50:31' prior: 50882990!
headWest
	
	head := MarsRoverHeadingWest new.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:50:36' prior: 50882985!
headSouth
	
	head := MarsRoverHeadingSouth new.
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:51:20'!
zzz: aHeading

	records add: aHeading asString .! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:51:37'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:52:14' prior: 50882970!
headEast
	
	head := MarsRoverHeadingEast new.
	
	log zzz: 'East'.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 15:52:27' prior: 50882975!
headNorth
	
	head := MarsRoverHeadingNorth new.
	
	log zzz: 'North'.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 15:52:39' prior: 50883004!
zzz: aHeading

	records add: aHeading .! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:52:42'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 15:52:42'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 15:52:42'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 15:52:42'!
FAILURE!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 15:52:42'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 15:52:42'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 15:54:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRover
	instanceVariableNames: 'position head log logPosition logHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 16:05:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log logPosition logHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:10:39' prior: 50882937!
addLogToHeading: aLog 
	
	log _ aLog .
	logPosition  _ true.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:10:49' prior: 50883065!
addLogToHeading: aLog 
	
	log _ aLog .
	logHeading  _ true.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:11:05' prior: 50882685!
addLogToPositoin: aLog 
	
	log _ aLog.
	logPosition _ true ! !
!MarsRover methodsFor: 'initialization' stamp: 'ja 6/5/2021 16:11:39' prior: 50882138!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	logPosition _ false.
	logHeading _ false.
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:11:58' prior: 50883011!
headEast
	
	head := MarsRoverHeadingEast new.
	logHeading ifTrue: [ log zzz: 'East'. ]! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:11:59' prior: 50883087!
headEast
	
	head := MarsRoverHeadingEast new.
	logHeading ifTrue: [ log zzz: 'East' ]! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:12:10' prior: 50883016!
headNorth
	
	head := MarsRoverHeadingNorth new.
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 16:12:25' prior: 50882851!
moveEast
	
	position := position + (1@0).
	logPosition ifTrue: [
	log ttt: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 16:12:34' prior: 50882754!
moveNorth
	
	position := position + (0@1).
	
	logPosition ifTrue: [
	log ttt: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 16:12:39' prior: 50882841!
moveSouth
	
	position := position + (0@-1).
	
	logPosition ifTrue: [
	log ttt: position ]! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 16:12:42' prior: 50882846!
moveWest
	
	position := position + (-1@0).
	
	logPosition ifTrue: [
	log ttt: position ]! !

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:13:22'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:13:25'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:13:26'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 16:13:31'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:13:31'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:13:31'!
PASSED!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:13:31'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:14:22'!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:15:11' prior: 50883142!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log first.
	self assert: 'West' equals: log first.
	self assert: 'North' equals: log first.			
	self assert: 'West' equals: log first.	
	
	! !

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:17:06'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:17:29' prior: 50883099!
headNorth
	
	head := MarsRoverHeadingNorth new.
	logHeading ifTrue: [ log zzz: 'East' ]
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:17:37' prior: 50883171!
headNorth
	
	head := MarsRoverHeadingNorth new.
	logHeading ifTrue: [ log zzz: 'North' ]
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:17:52' prior: 50883000!
headSouth
	
	head := MarsRoverHeadingSouth new.
	logHeading ifTrue: [ log zzz: 'North' ]
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:17:58' prior: 50882995!
headWest
	
	head := MarsRoverHeadingWest new.
	logHeading ifTrue: [ log zzz: 'North' ]
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:18:07' prior: 50883189!
headWest
	
	head := MarsRoverHeadingWest new.
	logHeading ifTrue: [ log zzz: 'West' ]
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 16:18:13' prior: 50883183!
headSouth
	
	head := MarsRoverHeadingSouth new.
	logHeading ifTrue: [ log zzz: 'South' ]
	
	! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 16:18:18'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:18:18'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:18:18'!
PASSED!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:18:18'!
PASSED!

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:18:18'!
FAILURE!

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:18:18'!
FAILURE!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:19:27' prior: 50883153!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: 'North' equals: log fourth .			
	self assert: 'West' equals: log fifth.	
	
	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:19:44'!
fifth

	^ records at: 5! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:19:53'!
sixth

	^ records at: 4! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:20:05' prior: 50883240!
sixth

	^ records at: 6! !

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 16:20:09'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:20:09'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:20:09'!
PASSED!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:20:09'!
PASSED!

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:20:09'!
PASSED!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:20:34'!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: 'North' equals: log fourth .			
	self assert: 'West' equals: log fifth.	
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:21:27' prior: 50883258!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: '0@1' equals: log fourth.
	self assert: 'North' equals: log fifth .			
	self assert: 'West' equals: log sixth .	
	
	! !

!testRun: #TestZZZ #test06 stamp: 'ja 6/5/2021 16:21:28'!
FAILURE!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 16:21:34' prior: 50883275!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: '0@1' equals: log fourth.
	self assert: 'North' equals: log fifth .			
	self assert: 'West' equals: log sixth .	
	
	! !

!testRun: #TestZZZ #test06 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test06 stamp: 'ja 6/5/2021 16:21:35'!
PASSED!

!testRun: #TestZZZ #test06 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test01 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test02 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test03 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test04 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test05 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

!testRun: #TestZZZ #test06 stamp: 'ja 6/5/2021 16:21:40'!
PASSED!

Log subclass: #EmptyLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #EmptyLog category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 16:46:00'!
Log subclass: #EmptyLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #LogState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogState category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 16:46:58'!
Object subclass: #LogState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #EmptyLog stamp: 'ja 6/5/2021 16:47:32'!
Log subclass: #EmptyLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LogState stamp: 'ja 6/5/2021 17:24:38'!
Object subclass: #LogState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #LogObserver
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:24:49'!
Object subclass: #LogObserver
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LogObserver stamp: 'ja 6/5/2021 17:25:02'!
Object subclass: #LogObserver
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #Log as: #LogObserver stamp: 'ja 6/5/2021 17:25:09'!
Smalltalk renameClassNamed: #Log as: #LogObserver!
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50883296!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: '0@1' equals: log fourth.
	self assert: 'North' equals: log fifth .			
	self assert: 'West' equals: log sixth .	
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50882668!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50882782!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@3' equals: log second.	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50882957!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log first.
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50882876!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log first.
	self assert: '1@1' equals: log second.	
	self assert: '2@1' equals: log third.	
	self assert: '1@1' equals: log fourth.		
	
	! !
!TestZZZ methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:25:09' prior: 50883220!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log first.
	self assert: 'South' equals: log second .
	self assert: 'West' equals: log third .
	self assert: 'North' equals: log fourth .			
	self assert: 'West' equals: log fifth.	
	
	! !

LogObserver subclass: #LogObserverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogObserverPosition category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:25:33'!
LogObserver subclass: #LogObserverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

LogObserver subclass: #LogObserverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogObserverHeading category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:25:38'!
LogObserver subclass: #LogObserverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogObserverPosition methodsFor: 'no messages' stamp: 'ja 6/5/2021 17:26:23'!
updatePositon: aPosition

	records add: aPosition asString .! !
!LogObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:27:07'!
updateHeading: aHeading
! !
!LogObserverHeading methodsFor: 'no messages' stamp: 'ja 6/5/2021 17:27:15'!
updatePositon: aPosition

	records add: aPosition asString .! !
!LogObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:27:24'!
updateHeading: aHeading
! !
!LogObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:27:37' prior: 50883525!
updateHeading: aHeading

	records add: aHeading .! !
!LogObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:27:40' prior: 50883520!
updatePositon: aPosition

	! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:23'!
updateHeading: aHeading

	records add: aHeading .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:23' prior: 50883201!
headSouth
	
	head := MarsRoverHeadingSouth new.
	logHeading ifTrue: [ log updateHeading: 'South' ]
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:23' prior: 50883195!
headWest
	
	head := MarsRoverHeadingWest new.
	logHeading ifTrue: [ log updateHeading: 'West' ]
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:23' prior: 50883093!
headEast
	
	head := MarsRoverHeadingEast new.
	logHeading ifTrue: [ log updateHeading: 'East' ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:23' prior: 50883177!
headNorth
	
	head := MarsRoverHeadingNorth new.
	logHeading ifTrue: [ log updateHeading: 'North' ]
	! !

!methodRemoval: LogObserver #zzz: stamp: 'ja 6/5/2021 17:28:23'!
zzz: aHeading

	records add: aHeading .!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:44'!
updatePosition: aPosition

	records add: aPosition asString .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:44' prior: 50883122!
moveWest
	
	position := position + (-1@0).
	
	logPosition ifTrue: [
	log updatePosition: position ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:44' prior: 50883116!
moveSouth
	
	position := position + (0@-1).
	
	logPosition ifTrue: [
	log updatePosition: position ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:44' prior: 50883104!
moveEast
	
	position := position + (1@0).
	logPosition ifTrue: [
	log updatePosition: position ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:44' prior: 50883110!
moveNorth
	
	position := position + (0@1).
	
	logPosition ifTrue: [
	log updatePosition: position ]! !

!methodRemoval: LogObserver #ttt: stamp: 'ja 6/5/2021 17:28:44'!
ttt: aPosition

	records add: aPosition asString .!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:52' prior: 50883539!
updateHeading: aHeading

	self subclassResponsibility ! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:28:59' prior: 50883574!
updatePosition: aPosition

	self subclassResponsibility ! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:29:46'!
returnInfo

	^ records ! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:29:51' prior: 50883619!
returnInfo

	^ records copy! !

!classRenamed: #TestZZZ as: #TestObservers stamp: 'ja 6/5/2021 17:30:25'!
Smalltalk renameClassNamed: #TestZZZ as: #TestObservers!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:30:43' prior: 50883420!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:31:18' prior: 50883431!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	self assert: '1@3' equals: log returnInfo second.	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:31:37' prior: 50883454!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	self assert: '1@1' equals: log returnInfo second.	
	self assert: '2@1' equals: log returnInfo third.	
	self assert: '1@1' equals: log returnInfo fourth.		
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:31:45' prior: 50883443!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:31:58' prior: 50883469!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	self assert: 'South' equals: log returnInfo second .
	self assert: 'West' equals: log returnInfo third .
	self assert: 'North' equals: log returnInfo fourth .			
	self assert: 'West' equals: log returnInfo fifth.	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:32:12' prior: 50883401!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ LogObserver new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	self assert: 'South' equals: log returnInfo second .
	self assert: 'West' equals: log returnInfo third .
	self assert: '0@1' equals: log returnInfo fourth.
	self assert: 'North' equals: log returnInfo fifth .			
	self assert: 'West' equals: log returnInfo sixth .	
	
	! !

!testRun: #TestObservers #test06 stamp: 'ja 6/5/2021 17:32:15'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:32:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log logPosition logHeading observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'ja 6/5/2021 17:32:50' prior: 50883080!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers _ OrderedCollection new.
	! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:33:03'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:33:35' prior: 50883558!
headEast
	
	head := MarsRoverHeadingEast new.
	self notify.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:34:02' prior: 50883564!
headNorth
	
	head := MarsRoverHeadingNorth new.
	self notify.! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:34:06' prior: 50883544!
headSouth
	
	head := MarsRoverHeadingSouth new.
	self notify.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:34:10' prior: 50883551!
headWest
	
	head := MarsRoverHeadingWest new.
	self notify.
	! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 17:34:17' prior: 50883593!
moveEast
	
	position := position + (1@0).
	self notify.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 17:34:26' prior: 50883599!
moveNorth
	
	position := position + (0@1).
	self notify.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 17:34:32' prior: 50883586!
moveSouth
	
	position := position + (0@-1).
	self notify.! !
!MarsRover methodsFor: 'moving' stamp: 'ja 6/5/2021 17:34:36' prior: 50883579!
moveWest
	
	position := position + (-1@0).
	self notify.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:40'!
notify

	observers do: [:anObserver | anObserver updatePosition: self]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58'!
notifyPosition

	observers do: [:anObserver | anObserver updatePosition: self]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883762!
headNorth
	
	head := MarsRoverHeadingNorth new.
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883777!
moveEast
	
	position := position + (1@0).
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883787!
moveSouth
	
	position := position + (0@-1).
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883767!
headSouth
	
	head := MarsRoverHeadingSouth new.
	self notifyPosition.
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883782!
moveNorth
	
	position := position + (0@1).
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883792!
moveWest
	
	position := position + (-1@0).
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883757!
headEast
	
	head := MarsRoverHeadingEast new.
	self notifyPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:35:58' prior: 50883772!
headWest
	
	head := MarsRoverHeadingWest new.
	self notifyPosition.
	! !

!methodRemoval: MarsRover #notify stamp: 'ja 6/5/2021 17:35:58'!
notify

	observers do: [:anObserver | anObserver updatePosition: self]!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:36:15'!
notifyHeading

	observers do: [:anObserver | anObserver updateHeading: self]! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:36:29' prior: 50883841!
headEast
	
	head := MarsRoverHeadingEast new.
	self notifyHeading .! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:36:36' prior: 50883808!
headNorth
	
	head := MarsRoverHeadingNorth new.
	self notifyHeading .! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:36:41' prior: 50883825!
headSouth
	
	head := MarsRoverHeadingSouth new.
	self notifyHeading .
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'ja 6/5/2021 17:36:46' prior: 50883847!
headWest
	
	head := MarsRoverHeadingWest new.
	self notifyHeading .
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:37:30' prior: 50883070!
addLogToHeading: aLog 
	
	observers add: aLog logObserverHeading.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:37:48' prior: 50883075!
addLogToPositoin: aLog 
	
	observers add: aLog logObserverPosition.! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:38:06'!
logObserverHeading! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:38:11' prior: 50883888!
addLogToPositoin: aLog 
	
	observers add: aLog logObserverPosition.! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:38:15'!
logObserverPosition! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:38:51' prior: 50883902!
logObserverPosition

	^ LogObserverPosition new.! !

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 17:44:47'!
ERROR!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 17:44:47'!
ERROR!

!classDefinition: #LogObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:47:34'!
Object subclass: #LogObserver
	instanceVariableNames: 'records logObserverPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 17:47:36'!
Object subclass: #LogObserver
	instanceVariableNames: 'records logObserverPosition logObserverHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:47:33' prior: 50882725 overrides: 16896425!
initialize
	
	logObserverPosition _ LogObserverPosition new.
	logObserverHeading _ LogObserverHeading new.
	records _ OrderedCollection new.! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:47:46' prior: 50883893!
logObserverHeading

	^ logObserverHeading ! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:47:53' prior: 50883906!
logObserverPosition

	^ logObserverPosition ! !

!methodRemoval: LogObserver #fifth stamp: 'ja 6/5/2021 17:48:08'!
fifth

	^ records at: 5!

!methodRemoval: LogObserver #first stamp: 'ja 6/5/2021 17:48:10'!
first

	^ records first !

!methodRemoval: LogObserver #fourth stamp: 'ja 6/5/2021 17:48:12'!
fourth

	^ records at: 4!

!methodRemoval: LogObserver #second stamp: 'ja 6/5/2021 17:48:15'!
second

	^ records at: 2 !

!methodRemoval: LogObserver #sixth stamp: 'ja 6/5/2021 17:48:17'!
sixth

	^ records at: 6!

!methodRemoval: LogObserver #third stamp: 'ja 6/5/2021 17:48:20'!
third

	^ records at: 3 !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:50:28' prior: 50883933 overrides: 16896425!
initialize
	
	self halt.
	logObserverPosition _ LogObserverPosition new.
	logObserverHeading _ LogObserverHeading new.
	records _ OrderedCollection new.! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:52:24' prior: 50883969 overrides: 16896425!
initialize
	
	self halt.
	
	records _ OrderedCollection new.
	logObserverPosition _ LogObserverPosition new.
	logObserverHeading _ LogObserverHeading new.! !
!LogObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:56:49' overrides: 50883978!
initialize! !
!LogObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:56:59' overrides: 50883978!
initialize! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 17:57:22' prior: 50883978 overrides: 16896425!
initialize
	
	records _ OrderedCollection new.
	logObserverPosition _ LogObserverPosition new.
	logObserverHeading _ LogObserverHeading new.! !

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 17:57:30'!
ERROR!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 17:57:30'!
ERROR!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:00:18' prior: 50883995 overrides: 16896425!
initialize
	
	records _ OrderedCollection new.! !

!methodRemoval: LogObserverHeading #initialize stamp: 'ja 6/5/2021 18:00:28'!
initialize!

!methodRemoval: LogObserverPosition #initialize stamp: 'ja 6/5/2021 18:00:33'!
initialize!

Object subclass: #ObserverPosition
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverPosition category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 18:32:29'!
Object subclass: #ObserverPosition
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #ObserverHeading
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverHeading category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 18:32:41'!
Object subclass: #ObserverHeading
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #LogObserver
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/5/2021 18:33:12'!
Object subclass: #LogObserver
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:33:20' prior: 50883941!
logObserverHeading

	! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:33:37' prior: 50883946!
logObserverPosition

	^ ObserverPosition with: self! !
!ObserverPosition class methodsFor: 'no messages' stamp: 'ja 6/5/2021 18:37:54'!
with: anObserver
	
	^ self new initializeWith: anObserver ! !
!ObserverPosition class methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:38:53' prior: 50884065!
with: aFunctionality
	
	^ self new initializeWith: aFunctionality ! !
!ObserverPosition methodsFor: 'no messages' stamp: 'ja 6/5/2021 18:39:20'!
initializeWith: aFunctionality 

	type _ aFunctionality ! !
!ObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:41:53'!
updatePosition: aPosition

	type update: aPosition ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:42:04' prior: 50883802!
notifyPosition

	observers do: [:anObserver | anObserver updatePosition: position]! !
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:43:07' overrides: 16881312!
update: anUpdate

	records add: anUpdate 

	! !

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:43:56'!
FAILURE!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:43:59'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:44:02'!
FAILURE!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:44:02'!
FAILURE!
!ObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:46:46' prior: 50884081!
updatePosition: aPosition

	type update: aPosition asString ! !

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:46:53'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/5/2021 18:46:55'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:46:56'!
ERROR!

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:46:56'!
ERROR!

!methodRemoval: LogObserver #updatePosition: stamp: 'ja 6/5/2021 18:47:38'!
updatePosition: aPosition

	self subclassResponsibility !

!methodRemoval: LogObserver #updateHeading: stamp: 'ja 6/5/2021 18:47:40'!
updateHeading: aHeading

	self subclassResponsibility !

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:48:51'!
ERROR!

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:48:51'!
ERROR!
!ObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:49:29'!
updateHeading: aHeading
! !

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:49:37'!
PASSED!
!ObserverHeading methodsFor: 'no messages' stamp: 'ja 6/5/2021 18:50:08'!
initializeWith: aFunctionality 

	type _ aFunctionality ! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:50:43'!
updatePosition: aPosition

	type update: aPosition asString ! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:51:25'!
updateHeading: aHeading
! !
!ObserverHeading class methodsFor: 'no messages' stamp: 'ja 6/5/2021 18:51:39'!
with: aFunctionality
	
	^ self new initializeWith: aFunctionality ! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:51:51' prior: 50884144!
updatePosition: aPosition

	! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:52:04' prior: 50884149!
updateHeading: aHeading

	type update: aHeading! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:52:34' prior: 50883856!
notifyHeading

	observers do: [:anObserver | anObserver updateHeading: head]! !

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:52:56'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/5/2021 18:52:57'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/5/2021 18:52:59'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/5/2021 18:53:01'!
ERROR!

!testRun: #TestObservers #test04 stamp: 'ja 6/5/2021 18:53:01'!
ERROR!
!LogObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/5/2021 18:53:27' prior: 50884056!
logObserverHeading

	^ ObserverHeading with: self! !

!testRun: #TestObservers #test03 stamp: 'ja 6/5/2021 18:53:34'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/5/2021 18:53:37'!
FAILURE!

!testRun: #TestObservers #test04 stamp: 'ja 6/5/2021 18:53:37'!
FAILURE!

!testRun: #TestObservers #test05 stamp: 'ja 6/5/2021 18:53:44'!
FAILURE!

!testRun: #TestObservers #test05 stamp: 'ja 6/5/2021 18:53:44'!
FAILURE!

----QUIT----(5 June 2021 19:11:31) CuisUniversity-4532.image priorSource: 17639966!

----STARTUP---- (5 June 2021 19:11:34) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


----QUIT----(5 June 2021 19:11:38) CuisUniversity-4532.image priorSource: 17681637!

----STARTUP---- (6 June 2021 15:34:04) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!classRemoval: #LogObserverHeading stamp: 'ja 6/6/2021 15:35:43'!
LogObserver subclass: #LogObserverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #LogObserverPosition stamp: 'ja 6/6/2021 15:35:47'!
LogObserver subclass: #LogObserverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 15:36:05'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 15:36:07'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 15:36:07'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 15:36:07'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 15:36:07'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 15:36:07'!
FAILURE!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 15:36:07'!
FAILURE!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 15:36:07'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:40:21' prior: 50884169!
notifyHeading

	observers do: [:anObserver | anObserver updateHeading: head]! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:05'!
heading
	
	^'East'! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:13'!
heading
	
	^'East'! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:18'!
heading
	
	^'East'! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:22'!
heading
	
	^'East'! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:27' prior: 50884264!
heading
	
	^'West'! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:36' prior: 50884260!
heading
	
	^'South'! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:45' prior: 50884256!
heading
	
	^'North'! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'ja 6/6/2021 15:46:56'!
heading
	
	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:47:11' prior: 50884247!
notifyHeading

	observers do: [:anObserver | anObserver updateHeading: head]! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:47:35' prior: 50884164!
updateHeading: aHeading

	type update: aHeading heading ! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 15:47:40'!
PASSED!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 15:51:10'!
Object subclass: #Window
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:50:58'!
test07

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addLogToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:51:15'!
ERROR!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:51:15'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:51:30'!
logObserverPosition
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:51:56' prior: 50884330!
logObserverPosition
	
	^ ObserverPosition with: self! !

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:51:57'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:52:05'!
returnInfo
	self shouldBeImplemented.! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:52:17' prior: 50884342!
returnInfo
	
	^'1@2'! !

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:52:19'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:52:23'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:52:47' prior: 50884316!
test07

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window returnInfo.	
	
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:53:33'!
addWindowToPositoin: aWindow
	
	observers add: aWindow logObserverPosition.! !

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:54:21'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:54:34'!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window returnInfo.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:54:39' prior: 50884374!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@2' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 15:54:58'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 15:55:29' prior: 50884385!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'b'.
	
	self assert: '1@0' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 15:58:22'!
FAILURE!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 15:58:22'!
FAILURE!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 15:59:25'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:00:10' prior: 50884398!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:00:11'!
FAILURE!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:02:34'!
Object subclass: #Window
	instanceVariableNames: 'view'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:02:32' overrides: 16881312!
update: unUpdate

	view _ unUpdate ! !

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:02:42'!
FAILURE!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:02:42'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:03:01' prior: 50884347!
returnInfo
	
	^view ! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:03:05'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:03:33'!
test09

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:03:35'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:04:08'!
test10

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:04:12'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:04:19'!
addWindowToHeading: aWindow 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:04:31' prior: 50884492!
addWindowToHeading: aWindow 
	
	^ ObserverHeading with: self! !

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:04:32'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:05:46'!
logObserverHeading

	^ ObserverHeading with: self! !

	^ ObserverHeading with: self!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:05:50'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:05:50'!
FAILURE!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:05:50'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:07:39' prior: 50884497!
addWindowToHeading: aWindow 
	
	observers add: aWindow logObserverPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:07:58' prior: 50884535!
addWindowToHeading: aWindow 
	
	observers add: aWindow logObserverHeading ! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:08:01'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:08:18'!
test11

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:08:20'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:08:30'!
test12

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrf'.
	
	self assert: 'South' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:08:32'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:10:34'!
test13

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:10:40'!
FAILURE!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:14:16' prior: 50884436 overrides: 16881312!
update: unUpdate
	
	| aux |
	
	aux _ view.
	view _ ''.
	view _ aux, unUpdate ! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:19:20' prior: 50884610 overrides: 16881312!
update: unUpdate
	
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:19:42'!
updatePosition: unUpdateToPosition
	
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:20:15'!
updateHeading: aHeadingUpdate
	
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:20:27' prior: 50884620!
updatePosition: aPositionUpdate
	
	! !

!methodRemoval: Window #update: stamp: 'ja 6/6/2021 16:20:35'!
update: unUpdate
	
	!

Object subclass: #Log
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:21:10'!
Object subclass: #Log
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #Log as: #Logsdfs stamp: 'ja 6/6/2021 16:21:32'!
Smalltalk renameClassNamed: #Log as: #Logsdfs!

!classRenamed: #LogObserver as: #Log stamp: 'ja 6/6/2021 16:21:39'!
Smalltalk renameClassNamed: #LogObserver as: #Log!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883705!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	self assert: 'South' equals: log returnInfo second .
	self assert: 'West' equals: log returnInfo third .
	self assert: '0@1' equals: log returnInfo fourth.
	self assert: 'North' equals: log returnInfo fifth .			
	self assert: 'West' equals: log returnInfo sixth .	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883674!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883657!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	self assert: '1@1' equals: log returnInfo second.	
	self assert: '2@1' equals: log returnInfo third.	
	self assert: '1@1' equals: log returnInfo fourth.		
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883686!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log returnInfo first.
	self assert: 'South' equals: log returnInfo second .
	self assert: 'West' equals: log returnInfo third .
	self assert: 'North' equals: log returnInfo fourth .			
	self assert: 'West' equals: log returnInfo fifth.	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883632!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:21:39' prior: 50883644!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log returnInfo first.
	self assert: '1@3' equals: log returnInfo second.	
	! !

!classRemoval: #Logsdfs stamp: 'ja 6/6/2021 16:21:59'!
Object subclass: #Logsdfs
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:22:16'!
updatePosition: anUpdate

	records add: anUpdate 

	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:22:43' prior: 50884749!
updatePosition: aPositonUpdate

	self update: aPositonUpdate 

	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:23:00'!
updateHeading: aHeadingUpdate

	self update: aHeadingUpdate 

	! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:24:53'!
createObserverHeading

	^ ObserverHeading with: self! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:24:53'!
createObserverHeading

	^ ObserverHeading with: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:24:53' prior: 50883882!
addLogToHeading: aLog 
	
	observers add: aLog createObserverHeading.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:24:53' prior: 50884541!
addWindowToHeading: aWindow 
	
	observers add: aWindow createObserverHeading ! !

!methodRemoval: Log #logObserverHeading stamp: 'ja 6/6/2021 16:24:53'!
logObserverHeading

	^ ObserverHeading with: self!

!methodRemoval: Window #logObserverHeading stamp: 'ja 6/6/2021 16:24:53'!
logObserverHeading

	^ ObserverHeading with: self!
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:09'!
createObserverPosition

	^ ObserverPosition with: self! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:09'!
createObserverPosition
	
	^ ObserverPosition with: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:09' prior: 50883897!
addLogToPositoin: aLog 
	
	observers add: aLog createObserverPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:09' prior: 50884366!
addWindowToPositoin: aWindow
	
	observers add: aWindow createObserverPosition.! !

!methodRemoval: Log #logObserverPosition stamp: 'ja 6/6/2021 16:25:09'!
logObserverPosition

	^ ObserverPosition with: self!

!methodRemoval: Window #logObserverPosition stamp: 'ja 6/6/2021 16:25:09'!
logObserverPosition
	
	^ ObserverPosition with: self!
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:38' prior: 50884290!
updateHeading: aHeading

	type updateHeading: aHeading heading ! !
!ObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:25:45' prior: 50884106!
updatePosition: aPosition

	type updatePosition: aPosition asString ! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:25:48'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:25:48'!
FAILURE!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:26:33'!
Object subclass: #Window
	instanceVariableNames: 'view headingView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:26:31' prior: 50884624!
updateHeading: aHeadingUpdate
	
	headingView _ aHeadingUpdate 
	! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:26:43'!
Object subclass: #Window
	instanceVariableNames: 'view headingView positionView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:26:40' prior: 50884628!
updatePosition: aPositionUpdate
	
	positionView _ aPositionUpdate ! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:27:17' prior: 50884445!
returnInfo
	
	^ positionView , headingView ! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:27:53' prior: 50884595!
test13

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0East' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:27:59'!
ERROR!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:27:59'!
PASSED!
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:28:42' overrides: 16896425!
initialize

	positionView _ ''.
	headingView _ ''! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:28:49'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:30:14' prior: 50884356!
test07

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window returnInfo.	
	
	
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:32:36' prior: 50884890!
returnInfo
	
	headingView ifEmpty: [^ positionView].
	
	^ positionView , headingView ! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:33:03' prior: 50884982!
returnInfo
	
	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView ! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:37:35' prior: 50884895!
test13

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:37:38'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:37:55'!
test14

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	
	self assert: '' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:37:59'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:38:45' prior: 50885037!
test14

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	
	self assert: '' equals: window returnInfo.	
	
	
	! !

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:38:46'!
PASSED!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:39:29'!
test00

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	! !

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:39:30'!
PASSED!

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 16:39:39'!
PASSED!

Object subclass: #MarsRoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:41:35'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #MarsRoverObserver as: #MarsRoversObserver stamp: 'ja 6/6/2021 16:42:20'!
Smalltalk renameClassNamed: #MarsRoverObserver as: #MarsRoversObserver!

MarsRoversObserver subclass: #ObserverHeading
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverHeading category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:29'!
MarsRoversObserver subclass: #ObserverHeading
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoversObserver subclass: #ObserverPosition
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverPosition category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:33'!
MarsRoversObserver subclass: #ObserverPosition
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoversObserver
	instanceVariableNames: 'typea'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoversObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:45'!
Object subclass: #MarsRoversObserver
	instanceVariableNames: 'typea'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoversObserver subclass: #ObserverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverHeading category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:50'!
MarsRoversObserver subclass: #ObserverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoversObserver subclass: #ObserverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserverPosition category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:53'!
MarsRoversObserver subclass: #ObserverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoversObserver
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoversObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:42:57'!
Object subclass: #MarsRoversObserver
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoversObserver methodsFor: 'no messages' stamp: 'ja 6/6/2021 16:43:17'!
initializeWith: aFunctionality 

	type _ aFunctionality ! !

!methodRemoval: ObserverHeading #initializeWith: stamp: 'ja 6/6/2021 16:43:38'!
initializeWith: aFunctionality 

	type _ aFunctionality !

!methodRemoval: ObserverPosition #initializeWith: stamp: 'ja 6/6/2021 16:43:40'!
initializeWith: aFunctionality 

	type _ aFunctionality !
!MarsRoversObserver class methodsFor: 'no messages' stamp: 'ja 6/6/2021 16:44:04'!
with: aFunctionality
	
	^ self new initializeWith: aFunctionality ! !

!methodRemoval: ObserverHeading class #with: stamp: 'ja 6/6/2021 16:44:20'!
with: aFunctionality
	
	^ self new initializeWith: aFunctionality !

!methodRemoval: ObserverPosition class #with: stamp: 'ja 6/6/2021 16:44:23'!
with: aFunctionality
	
	^ self new initializeWith: aFunctionality !
!MarsRoversObserver methodsFor: 'initialization' stamp: 'ja 6/6/2021 16:44:42'!
updatePosition: aPosition

	self subclassResponsibility ! !
!MarsRoversObserver methodsFor: 'initialization' stamp: 'ja 6/6/2021 16:45:01'!
updateHeading: aHeading

	self subclassResponsibility ! !

Object subclass: #Window
	instanceVariableNames: 'headingView positionView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:46:20'!
Object subclass: #Window
	instanceVariableNames: 'headingView positionView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverTracing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTracing category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:51:44'!
Object subclass: #MarsRoverTracing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverTracing subclass: #Window
	instanceVariableNames: 'headingView positionView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:51:54'!
MarsRoverTracing subclass: #Window
	instanceVariableNames: 'headingView positionView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverTracing subclass: #Log
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 16:51:59'!
MarsRoverTracing subclass: #Log
	instanceVariableNames: 'records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTracing methodsFor: 'no messages' stamp: 'ja 6/6/2021 16:52:49'!
createObserverHeading

	^ ObserverHeading with: self! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:52:58'!
createObserverPosition

	^ ObserverPosition with: self! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:53:25' overrides: 16896425!
initialize

	self subclassResponsibility ! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:53:37'!
returnInfo

	self subclassResponsibility ! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:53:47'!
updateHeading: aHeadingUpdate


	self subclassResponsibility ! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:53:50' prior: 50885410!
updateHeading: aHeadingUpdate

	self subclassResponsibility ! !
!MarsRoverTracing methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:54:00'!
updatePosition: aPositonUpdate

	self subclassResponsibility ! !

!classRenamed: #MarsRoverTracing as: #MarsRoverTracking stamp: 'ja 6/6/2021 16:57:58'!
Smalltalk renameClassNamed: #MarsRoverTracing as: #MarsRoverTracking!
!MarsRoverTracking methodsFor: 'accesing' stamp: 'ja 6/6/2021 16:59:20' overrides: 16881508!
value

	self subclassResponsibility ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:59:37' overrides: 50885431!
value

	^ records copy! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 16:59:46' overrides: 50885431!
value
	
	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView ! !

!methodRemoval: Window #returnInfo stamp: 'ja 6/6/2021 16:59:58'!
returnInfo
	
	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView !

!methodRemoval: Log #returnInfo stamp: 'ja 6/6/2021 17:00:02'!
returnInfo

	^ records copy!

!methodRemoval: MarsRoverTracking #returnInfo stamp: 'ja 6/6/2021 17:00:05'!
returnInfo

	self subclassResponsibility !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:01:36' prior: 50885440 overrides: 50885431!
value
	
	self zzz! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:01:48'!
zzz

	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView ! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:02:22'!
buildValue

	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView ! !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:02:22' prior: 50885461 overrides: 50885431!
value
	
	self buildValue! !

!methodRemoval: Window #zzz stamp: 'ja 6/6/2021 17:02:22'!
zzz

	positionView  ifEmpty: [^ headingView].
	headingView ifEmpty: [^ positionView].
	^ positionView ,' ', headingView !
!Window methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:02:32' prior: 50885479 overrides: 50885431!
value
	
	^self buildValue! !

!methodRemoval: Log #createObserverPosition stamp: 'ja 6/6/2021 17:02:46'!
createObserverPosition

	^ ObserverPosition with: self!

!methodRemoval: Log #createObserverHeading stamp: 'ja 6/6/2021 17:02:48'!
createObserverHeading

	^ ObserverHeading with: self!

!methodRemoval: Window #createObserverHeading stamp: 'ja 6/6/2021 17:03:33'!
createObserverHeading

	^ ObserverHeading with: self!

!methodRemoval: Window #createObserverPosition stamp: 'ja 6/6/2021 17:03:35'!
createObserverPosition
	
	^ ObserverPosition with: self!

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 17:04:07'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 17:04:07'!
ERROR!
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:24' prior: 50884720!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:33' prior: 50884731!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:40' prior: 50884686!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@1' equals: log value second.	
	self assert: '2@1' equals: log value third.	
	self assert: '1@1' equals: log value fourth.		
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:43' prior: 50884675!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:50' prior: 50884702!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: 'North' equals: log value fourth .			
	self assert: 'West' equals: log value fifth.	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:04:59' prior: 50884654!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: '0@1' equals: log value fourth.
	self assert: 'North' equals: log value fifth .			
	self assert: 'West' equals: log value sixth .	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:03' prior: 50884972!
test07

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:05' prior: 50884416!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:07' prior: 50884467!
test09

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:10' prior: 50884480!
test10

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:14' prior: 50884569!
test11

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:23' prior: 50884582!
test12

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrf'.
	
	self assert: 'South' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:26' prior: 50884996!
test13

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:05:28' prior: 50885081!
test14

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	
	self assert: '' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test00 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test01 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test02 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test03 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test04 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test05 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test06 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 17:05:41'!
PASSED!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:08:55'!
test01LogWhitoutProcessCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	! !

!methodRemoval: TestObservers #test00 stamp: 'ja 6/6/2021 17:08:55'!
test00

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:09:05'!
test01LogWhitoutProcessCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	! !

!methodRemoval: TestObservers #test01LogWhitoutProcessCommand stamp: 'ja 6/6/2021 17:09:05'!
test01LogWhitoutProcessCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:09:36'!
test01LogWhitoutProcessingAnyCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	! !

!methodRemoval: TestObservers #test01LogWhitoutProcessCommands stamp: 'ja 6/6/2021 17:09:36'!
test01LogWhitoutProcessCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addLogToHeading: log.
	
	self assert: 0 equals: log size.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:10:10'!
test02LogProcessingAPositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	! !

!methodRemoval: TestObservers #test01 stamp: 'ja 6/6/2021 17:10:10'!
test01

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:10:49'!
test03LogProcessingOnlyPositionCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	! !

!methodRemoval: TestObservers #test02 stamp: 'ja 6/6/2021 17:10:49'!
test02

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:10:56'!
test02LogProcessingOnePositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	! !

!methodRemoval: TestObservers #test02LogProcessingAPositionCommand stamp: 'ja 6/6/2021 17:10:57'!
test02LogProcessingAPositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:12:26'!
test04LogForPositionProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@1' equals: log value second.	
	self assert: '2@1' equals: log value third.	
	self assert: '1@1' equals: log value fourth.		
	
	! !

!methodRemoval: TestObservers #test03 stamp: 'ja 6/6/2021 17:12:26'!
test03

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@1' equals: log value second.	
	self assert: '2@1' equals: log value third.	
	self assert: '1@1' equals: log value fourth.		
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:12:40'!
test03LogForPositionProcessingOnlyPositionCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	! !

!methodRemoval: TestObservers #test03LogProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:12:40'!
test03LogProcessingOnlyPositionCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:12:50'!
test02LogForPositionProcessingOnePositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	! !

!methodRemoval: TestObservers #test02LogProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:12:50'!
test02LogProcessingOnePositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:13:42'!
test05LogForHeadingProcessingOneHeadingCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	
	! !

!methodRemoval: TestObservers #test04 stamp: 'ja 6/6/2021 17:13:42'!
test04

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:14:24'!
test06LogForHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: 'North' equals: log value fourth .			
	self assert: 'West' equals: log value fifth.	
	
	! !

!methodRemoval: TestObservers #test05 stamp: 'ja 6/6/2021 17:14:24'!
test05

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: 'North' equals: log value fourth .			
	self assert: 'West' equals: log value fifth.	
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:15:08'!
test07LogForPositionAndHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: '0@1' equals: log value fourth.
	self assert: 'North' equals: log value fifth .			
	self assert: 'West' equals: log value sixth .	
	
	! !

!methodRemoval: TestObservers #test06 stamp: 'ja 6/6/2021 17:15:08'!
test06

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: '0@1' equals: log value fourth.
	self assert: 'North' equals: log value fifth .			
	self assert: 'West' equals: log value sixth .	
	
	!
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:16:23' prior: 50886018!
test07LogForPositionAndHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'frbrbrfl'.
	
	self assert: 6 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: '0@1' equals: log value fourth.
	self assert: 'North' equals: log value fifth .			
	self assert: 'West' equals: log value sixth .	
	
	! !
!TestObservers methodsFor: 'tests log' stamp: 'ja 6/6/2021 17:18:53' prior: 50886058!
test07LogForPositionAndHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.   

	marsRover process: 'frbrbrfrl'.
	
	self assert: 9 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '0@2' equals: log value third.
	self assert: 'South' equals: log value fourth.
	self assert: '0@3' equals: log value fifth.			
	self assert: 'West' equals: log value sixth.	
	self assert: '-1@3' equals: log value seventh.	
	self assert: 'North' equals: log value eighth.	
	self assert: 'West' equals: log value ninth.		
	! !

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test07 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test08 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test09 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test10 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test11 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test12 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test13 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!

!testRun: #TestObservers #test14 stamp: 'ja 6/6/2021 17:18:54'!
PASSED!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:21:09'!
test08WindowWithoutProcessingAnyCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	
	self assert: '' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test14 stamp: 'ja 6/6/2021 17:21:09'!
test14

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	
	self assert: '' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:21:42'!
test09WindowForPositionProcessingOneCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test07 stamp: 'ja 6/6/2021 17:21:42'!
test07

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:21:59'!
test09WindowForPositionProcessingOnePositionCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test09WindowForPositionProcessingOneCommand stamp: 'ja 6/6/2021 17:21:59'!
test09WindowForPositionProcessingOneCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:22:26' prior: 50885643!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:22:27'!
test10WindowForPositionProcessingOnlyPositionCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test08 stamp: 'ja 6/6/2021 17:22:27'!
test08

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:22:56'!
test11WindowForPositionProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test09 stamp: 'ja 6/6/2021 17:22:56'!
test09

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:23:26'!
test12WindowForHeadingProcessingOneHeadingCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test10 stamp: 'ja 6/6/2021 17:23:26'!
test10

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:23:43'!
test13WindowForHeadingProcessingOnlyHeadingCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test11 stamp: 'ja 6/6/2021 17:23:43'!
test11

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:24:00'!
test14WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrf'.
	
	self assert: 'South' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test12 stamp: 'ja 6/6/2021 17:24:00'!
test12

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrf'.
	
	self assert: 'South' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:24:50'!
test15WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test13 stamp: 'ja 6/6/2021 17:24:50'!
test13

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:25:31' prior: 50886246!
test11WindowForPositionProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'frb'.
	
	self assert: '0@2' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test11WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:25:34'!
PASSED!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:26:04' prior: 50886307!
test14WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test14WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:26:09'!
PASSED!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:28:47'!
test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test10WindowForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:28:47'!
test10WindowForPositionProcessingOnlyPositionCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:28:59'!
test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ff'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:29:11' prior: 50886405!
test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:29:17' prior: 50886381!
test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:29:19' prior: 50886429!
test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:29:31' prior: 50886417!
test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '2@1' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:30:25'!
test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #South.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '1@0' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:30:30'!
PASSED!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:30:49'!
test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #West.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'ffb'.
	
	self assert: '0@1' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test12WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test13WindowForHeadingProcessingOnlyHeadingCommands stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test14WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:30:53'!
PASSED!

!testRun: #TestObservers #test15WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:30:53'!
PASSED!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:31:08'!
test14WindowForPositionProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'frb'.
	
	self assert: '0@2' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test11WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:31:08'!
test11WindowForPositionProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover process: 'frb'.
	
	self assert: '0@2' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:31:16'!
test15WindowForHeadingProcessingOneHeadingCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test12WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:31:16'!
test12WindowForHeadingProcessingOneHeadingCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:31:24'!
test16WindowForHeadingProcessingOnlyHeadingCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test13WindowForHeadingProcessingOnlyHeadingCommands stamp: 'ja 6/6/2021 17:31:24'!
test13WindowForHeadingProcessingOnlyHeadingCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:31:37'!
test17WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test14WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:31:37'!
test14WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:31:51'!
test18WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test15WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:31:51'!
test15WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:32:36'!
test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommands stamp: 'ja 6/6/2021 17:32:36'!
test16WindowForHeadingProcessingOnlyHeadingCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rr'.
	
	self assert: 'South' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:32:48' prior: 50886653!
test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'North' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:33:10'!
test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:33:26'!
test120WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test17WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:33:26'!
test17WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:33:34'!
test20WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test120WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:33:34'!
test120WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:33:42'!
test21WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !

!methodRemoval: TestObservers #test18WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:33:42'!
test18WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:34:01'!
test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #Soth.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'Soth' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:34:14'!
test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #West.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'West' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:34:17'!
ERROR!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:17'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:34:17'!
ERROR!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:34:29' prior: 50886774!
test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #South.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'Soth' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:34:30'!
FAILURE!
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:34:38' prior: 50886884!
test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #South.
	
	window _ Window new.
	
	marsRover addWindowToHeading: window .
	marsRover process: 'rl'.
	
	self assert: 'South' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:34:39'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:35:25'!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addWindowToPositoin: window .
	marsRover addWindowToHeading: window .
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:35:41' prior: 50886994!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addWindowToPositoin: window.
	marsRover addWindowToHeading: window.
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:36:42' prior: 50887007!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.
	marsRover addWindowToPositoin: window.
	marsRover addWindowToHeading: window.
	
	self assert: 0 equals: log size.
	self assert: '' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:36:44'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:36:44'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:39:24'!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addWindowToPositoin: window.
	
	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.
	self assert: '1@3' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:39:27'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:39:27'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:40:33'!
test24LogForPositionAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:40:34'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:40:34'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:41:33'!
test25LogForHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToHeading: log.
	marsRover addLogToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:41:34'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:41:34'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:42:03'!
test26LogForHeadingAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToHeading: log.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:42:04'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:42:04'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:43:10'!
test27LogForPositionAndHeadingAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: 'East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:43:12'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:43:12'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:43:45'!
test28LogForPositionAndHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.
	marsRover addLogToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: '1@2' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:43:46'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:43:46'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:44:51'!
test29LogForPositionAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToPositoin: window.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:45:07'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:45:07'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:45:29'!
test30LogForHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToHeading: log.
	marsRover addLogToPositoin: window.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:45:32'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:46:23'!
test31LogForPositionAndHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.
	marsRover addLogToPositoin: window.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: '1@2 East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:46:28'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:46:29'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:46:33' prior: 50888058!
test31LogForPositionAndHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToHeading: log.
	marsRover addLogToPositoin: window.
	marsRover addLogToHeading: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:46:46' prior: 50887122!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addWindowToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:46:58' prior: 50888216!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addWindowToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:47:04' prior: 50888233!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addWindowToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:08'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:47:10'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:47:11'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54'!
addHeadingObserverFor: aLog 
	
	observers add: aLog createObserverHeading.! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887334!
test25LogForHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addHeadingObserverFor: log.
	marsRover addLogToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887444!
test26LogForHeadingAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addHeadingObserverFor: log.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887928!
test30LogForHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addHeadingObserverFor: log.
	marsRover addLogToPositoin: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50888196!
test31LogForPositionAndHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: log.
	marsRover addLogToPositoin: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887678!
test28LogForPositionAndHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: log.
	marsRover addLogToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50885962!
test05LogForHeadingProcessingOneHeadingCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addHeadingObserverFor: log.   

	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50885793!
test01LogWhitoutProcessingAnyCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.   
	marsRover addHeadingObserverFor: log.
	
	self assert: 0 equals: log size.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887802!
test29LogForPositionAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addLogToPositoin: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887227!
test24LogForPositionAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50887558!
test27LogForPositionAndHeadingAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: log.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:54' prior: 50885984!
test06LogForHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addHeadingObserverFor: log.   

	marsRover process: 'rrrfrl'.
	
	self assert: 5 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: 'South' equals: log value second .
	self assert: 'West' equals: log value third .
	self assert: 'North' equals: log value fourth .			
	self assert: 'West' equals: log value fifth.	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:55' prior: 50886079!
test07LogForPositionAndHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: log.   

	marsRover process: 'frbrbrfrl'.
	
	self assert: 9 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '0@2' equals: log value third.
	self assert: 'South' equals: log value fourth.
	self assert: '0@3' equals: log value fifth.			
	self assert: 'West' equals: log value sixth.	
	self assert: '-1@3' equals: log value seventh.	
	self assert: 'North' equals: log value eighth.	
	self assert: 'West' equals: log value ninth.		
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:48:55' prior: 50887021!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addLogToPositoin: log.
	marsRover addHeadingObserverFor: log.
	marsRover addWindowToPositoin: window.
	marsRover addWindowToHeading: window.
	
	self assert: 0 equals: log size.
	self assert: '' equals: window value.	
	
	
	! !

!methodRemoval: MarsRover #addLogToHeading: stamp: 'ja 6/6/2021 17:48:55'!
addLogToHeading: aLog 
	
	observers add: aLog createObserverHeading.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21'!
addPositionObserverFor: aLog 
	
	observers add: aLog createObserverPosition.! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50885881!
test04LogForPositionProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addPositionObserverFor: log.   

	marsRover process: 'fbrfb'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@1' equals: log value second.	
	self assert: '2@1' equals: log value third.	
	self assert: '1@1' equals: log value fourth.		
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50885938!
test02LogForPositionProcessingOnePositionCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addPositionObserverFor: log.   

	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888537!
test29LogForPositionAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50885911!
test03LogForPositionProcessingOnlyPositionCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addPositionObserverFor: log.   

	marsRover process: 'ff'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@3' equals: log value second.	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888609!
test07LogForPositionAndHeadingProcessingManyCommands

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.   

	marsRover process: 'frbrbrfrl'.
	
	self assert: 9 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '0@2' equals: log value third.
	self assert: 'South' equals: log value fourth.
	self assert: '0@3' equals: log value fifth.			
	self assert: 'West' equals: log value sixth.	
	self assert: '-1@3' equals: log value seventh.	
	self assert: 'North' equals: log value eighth.	
	self assert: 'West' equals: log value ninth.		
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888494!
test28LogForPositionAndHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.
	marsRover addPositionObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888555!
test24LogForPositionAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888526!
test01LogWhitoutProcessingAnyCommand

	| marsRover log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	
	marsRover addPositionObserverFor: log.   
	marsRover addHeadingObserverFor: log.
	
	self assert: 0 equals: log size.
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888571!
test27LogForPositionAndHeadingAndWindowForHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second .
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888473!
test31LogForPositionAndHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 2 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: 'East' equals: log value second.
	self assert: '1@2 East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888635!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.
	marsRover addWindowToPositoin: window.
	marsRover addWindowToHeading: window.
	
	self assert: 0 equals: log size.
	self assert: '' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888249!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addWindowToPositoin: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888423!
test25LogForHeadingAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addHeadingObserverFor: log.
	marsRover addPositionObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:49:21' prior: 50888455!
test30LogForHeadingAndWindowForPositionAndHeading

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addHeadingObserverFor: log.
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: 'East' equals: log value first.
	self assert: '1@2 East' equals: window value.	
	
	
	! !

!methodRemoval: MarsRover #addLogToPositoin: stamp: 'ja 6/6/2021 17:49:21'!
addLogToPositoin: aLog 
	
	observers add: aLog createObserverPosition.!

!methodRemoval: MarsRover #addWindowToPositoin: stamp: 'ja 6/6/2021 17:49:28'!
addWindowToPositoin: aWindow
	
	observers add: aWindow createObserverPosition.!

!methodRemoval: MarsRover #addWindowToHeading: stamp: 'ja 6/6/2021 17:49:30'!
addWindowToHeading: aWindow 
	
	observers add: aWindow createObserverHeading !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:50:05' prior: 50888655!
addPositionObserverFor: aMarsRoverTracking 
	
	observers add: aMarsRoverTracking createObserverPosition.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:50:13' prior: 50888417!
addHeadingObserverFor: aMarsRoverTracking 
	
	observers add: aMarsRoverTracking createObserverHeading.! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:51:32' prior: 50886151!
test08WindowWithoutProcessingAnyCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover addHeadingObserverFor: window .
	
	self assert: '' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:51:42' prior: 50888929!
test08WindowWithoutProcessingAnyCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	
	self assert: '' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:51:54' prior: 50886192!
test09WindowForPositionProcessingOnePositionCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'f'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:08' prior: 50886441!
test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'ffb'.
	
	self assert: '1@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:14' prior: 50886453!
test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'ffb'.
	
	self assert: '2@1' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:19' prior: 50886465!
test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #South.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'ffb'.
	
	self assert: '1@0' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:24' prior: 50886481!
test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #West.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'ffb'.
	
	self assert: '0@1' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:30' prior: 50886534!
test14WindowForPositionProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window .
	marsRover process: 'frb'.
	
	self assert: '0@2' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:38' prior: 50886557!
test15WindowForHeadingProcessingOneHeadingCommand

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'r'.
	
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:43' prior: 50886677!
test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'rl'.
	
	self assert: 'North' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:51' prior: 50886689!
test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'rl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:55' prior: 50886900!
test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #South.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'rl'.
	
	self assert: 'South' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:52:58' prior: 50886786!
test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #West.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'rl'.
	
	self assert: 'West' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:53:03' prior: 50886724!
test20WindowForHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addHeadingObserverFor: window .
	marsRover process: 'rrfl'.
	
	self assert: 'East' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests window' stamp: 'ja 6/6/2021 17:53:08' prior: 50886747!
test21WindowForPositionAndHeadingProcessingManyCommands

	| marsRover window |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ Window new.
	
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	marsRover process: 'rrflb'.
	
	self assert: '0@0 East' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:53:11'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:53:11'!
PASSED!
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:53:26' prior: 50888835!
test22LogAndWindowWithoutProcessingAnyCommand

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addHeadingObserverFor: log.
	marsRover addPositionObserverFor: window.
	marsRover addHeadingObserverFor: window.
	
	self assert: 0 equals: log size.
	self assert: '' equals: window value.	
	
	
	! !
!TestObservers methodsFor: 'tests log-window' stamp: 'ja 6/6/2021 17:53:38' prior: 50888851!
test23LogForPositionAndWindowForPosition

	| marsRover window log |
	
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	log _ Log new.
	window _ Window new.
	
	marsRover addPositionObserverFor: log.
	marsRover addPositionObserverFor: window.
	
	marsRover process: 'fr'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log value first.
	self assert: '1@2' equals: window value.	
	
	
	! !

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:03'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:54:41'!
PASSED!
!MarsRoversObserver class methodsFor: 'instance creation' stamp: 'ja 6/6/2021 17:55:18' prior: 50885317!
with: aTracker
	
	^ self new initializeWith: aTracker ! !
!MarsRoversObserver methodsFor: 'initialization' stamp: 'ja 6/6/2021 17:55:26' prior: 50885303!
initializeWith: aTracker 

	type _ aTracker ! !

!classDefinition: #MarsRoversObserver category: 'MarsRover-WithHeading' stamp: 'ja 6/6/2021 17:55:34'!
Object subclass: #MarsRoversObserver
	instanceVariableNames: 'tracker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoversObserver methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:55:34' prior: 50889430!
initializeWith: aTracker 

	tracker _ aTracker ! !
!ObserverHeading methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:55:34' prior: 50884823 overrides: 50885336!
updateHeading: aHeading

	tracker updateHeading: aHeading heading ! !
!ObserverPosition methodsFor: 'as yet unclassified' stamp: 'ja 6/6/2021 17:55:34' prior: 50884829 overrides: 50885331!
updatePosition: aPosition

	tracker updatePosition: aPosition asString ! !

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:55:43'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:55:44'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 17:56:25'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 17:56:26'!
PASSED!

----QUIT----(6 June 2021 17:58:40) CuisUniversity-4532.image priorSource: 17681832!

----STARTUP---- (6 June 2021 18:15:57) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test01 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:17'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:17:24'!
PASSED!

!testRun: #TestObservers #test01LogWhitoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test02LogForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test03LogForPositionProcessingOnlyPositionCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test04LogForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test05LogForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test06LogForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test07LogForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test08WindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test09WindowForPositionProcessingOnePositionCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test10WindowForPositionProcessingOnlyPositionCommandsHeadingNorth stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test11WindowForPositionProcessingOnlyPositionCommandsHeadingEast stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test12WindowForPositionProcessingOnlyPositionCommandsHeadingSouth stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test13WindowForPositionProcessingOnlyPositionCommandsHeadingWest stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test14WindowForPositionProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test15WindowForHeadingProcessingOneHeadingCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test16WindowForHeadingProcessingOnlyHeadingCommandsEndingNorth stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test17WindowForHeadingProcessingOnlyHeadingCommandsEndingEast stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test18WindowForHeadingProcessingOnlyHeadingCommandsEndingSouth stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test19WindowForHeadingProcessingOnlyHeadingCommandsEndingWest stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test20WindowForHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test21WindowForPositionAndHeadingProcessingManyCommands stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test22LogAndWindowWithoutProcessingAnyCommand stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test23LogForPositionAndWindowForPosition stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test24LogForPositionAndWindowForHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test25LogForHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test26LogForHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test27LogForPositionAndHeadingAndWindowForHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test28LogForPositionAndHeadingAndWindowForPosition stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test29LogForPositionAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test30LogForHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!

!testRun: #TestObservers #test31LogForPositionAndHeadingAndWindowForPositionAndHeading stamp: 'ja 6/6/2021 18:18:41'!
PASSED!