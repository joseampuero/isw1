

----SNAPSHOT----(26 June 2021 13:46:06) Cuis5.0-4533.image priorSource: 18276143!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:47:25' prior: 50903983 overrides: 50903584!
parse

	| previous newString |
	
	previous _ stringToParse first asUppercase.
	newString _ String with: previous.
	stringToParse do:[:aChar | | newChar |
		previous isSeparator
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		previous _ aChar].
	
	^ newString ! !

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:47:46'!
FAILURE!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:47:46'!
FAILURE!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:48:43' prior: 50904009 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ String with: previous.
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[index = 0])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		previous _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:48:48' prior: 50904033 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[index = 0])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		previous _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:48:51' prior: 50904050 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[index = 0])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		previous _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:48:59' prior: 50904066 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		previous _ aChar].
	
	^ newString ! !

1 increment .!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:49:56' prior: 50904082 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString ! !

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:50:07'!
FAILURE!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:50:07'!
FAILURE!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:50:34' prior: 50904099 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [newString _ newString, aChar asString ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:51:08' prior: 50904124 overrides: 50903584!
parse

	| previous newString index|
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString ! !

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:51:12'!
PASSED!

!testRun: #CustomStringParserTest #test01CanNotParseAnEmptyString stamp: 'ja 6/26/2021 13:51:12'!
PASSED!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:51:12'!
PASSED!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:51:55'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:51:56'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous2 newString1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

Object subclass: #CustomStringParser
	instanceVariableNames: 'stringToParse previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

Object subclass: #CustomStringParser
	instanceVariableNames: 'stringToParse previous1 newString1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:53:20' prior: 50904141 overrides: 50903584!
parse

	| previous newString index |
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:53:45' prior: 50904201 overrides: 50903584!
parse

	| p newString index |
	
	p _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(p isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.
		p _ aChar].
	
	^ newString ! !
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:54:04' prior: 50904219 overrides: 50903584!
parse

	| p n index |
	
	p _ stringToParse first .
	index _ 0.
	n _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(p isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				n _ n, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [n _ n, aChar asString] ].
		index _ index + 1.
		p _ aChar].
	
	^ n ! !

CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:54:14'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:54:35' prior: 50904236 overrides: 50903584!
parse

	| p n index |
	
	p _ stringToParse first .
	index _ 0.
	n _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(p isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				n _ n, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [n _ n, aChar asString] ].
		index _ index + 1.
		p _ aChar].
	
	^ n ! !

CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:54:43'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:55:35'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:55:37'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: 'previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!
!CustomStringParserForNameTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:55:34' prior: 50904267 overrides: 50903584!
parse

	| index |
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		(previous isSeparator or:[ index = 0 ])
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString! !

!testRun: #CustomStringParserTest #test01CanNotParseAnEmptyString stamp: 'ja 6/26/2021 13:55:43'!
PASSED!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:55:43'!
PASSED!

!classRenamed: #CustomStringParserForMessageErrorDescription as: #CustomStringParserForMessageError stamp: 'ja 6/26/2021 13:56:59'!
Smalltalk renameClassNamed: #CustomStringParserForMessageErrorDescription as: #CustomStringParserForMessageError!
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:57:00' prior: 50903662!
test01CanNotParseAnEmptyString

	self should: [CustomStringParserForNameTest toParser: ''] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomStringParser canNotParseAnEmptyStringErrorDescription].
		
	self should: [CustomStringParserForMessageError toParser: ''] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomStringParser canNotParseAnEmptyStringErrorDescription]! !

Object subclass: #CustomStringParserForMessageError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForMessageError category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:57:14'!
Object subclass: #CustomStringParserForMessageError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

CustomStringParser subclass: #CustomStringParserForMessageError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForMessageError category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 13:57:23'!
CustomStringParser subclass: #CustomStringParserForMessageError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!testRun: #CustomStringParserTest #test01CanNotParseAnEmptyString stamp: 'ja 6/26/2021 13:57:30'!
PASSED!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 13:57:30'!
PASSED!
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:58:13'!
test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen

	| nameTest |
	
	nameTest _ (CustomStringParserForNameTest toParser: 'esto es un nombre de test') parse.
	
	self assert: nameTest equals: 'EstoEsUnNombreDeTest'.! !
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 13:59:01' prior: 50904401!
test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen

	| nameTest |
	
	nameTest _ (CustomStringParserForMessageError toParser: 'estoEsUnMombreDeErrorDescription') parse.
	
	self assert: nameTest equals: 'EstoEsUnNombreDeTest'.! !
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:00:21' prior: 50904412!
test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen

	| errorMessage |
	
	errorMessage _ (CustomStringParserForMessageError toParser: 'esteEsUnMensajeDeErrorErrorDescription') parse.
	
	self assert: errorMessage equals: 'Este es un mensaje de error.'.! !

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:00:28'!
FAILURE!

!classRenamed: #CustomStringParserForMessageError as: #CustomStringParserForErrorMessage stamp: 'ja 6/26/2021 14:01:02'!
Smalltalk renameClassNamed: #CustomStringParserForMessageError as: #CustomStringParserForErrorMessage!
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:01:02' prior: 50904423!
test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen

	| errorMessage |
	
	errorMessage _ (CustomStringParserForErrorMessage toParser: 'esteEsUnMensajeDeErrorErrorDescription') parse.
	
	self assert: errorMessage equals: 'Este es un mensaje de error.'.! !
!CustomStringParserTest methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:01:02' prior: 50904347!
test01CanNotParseAnEmptyString

	self should: [CustomStringParserForNameTest toParser: ''] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomStringParser canNotParseAnEmptyStringErrorDescription].
		
	self should: [CustomStringParserForErrorMessage toParser: ''] 
		raise: Error 
		withExceptionDo: [:anError | self assert: anError messageText equals: CustomStringParser canNotParseAnEmptyStringErrorDescription]! !

CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParserForNameTest category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 14:01:40'!
CustomStringParser subclass: #CustomStringParserForNameTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

Object subclass: #CustomStringParser
	instanceVariableNames: 'stringToParse previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

!classDefinition: #CustomStringParser category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 14:01:54'!
Object subclass: #CustomStringParser
	instanceVariableNames: 'stringToParse previous newString'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!

'esto es' withBlanksTrimmed.!

'esto es' uncapitalized .!

'esto es' separateKeywords .!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:38:36' prior: 50903577 overrides: 50903584!
parse

	| index |
	
	previous _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 0 ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString].
		
		previous isUppercase 
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.
		previous _ aChar].
	
	^ newString! !

!classDefinition: #CustomStringParserForErrorMessage category: 'Custom-String-Parser' stamp: 'ja 6/26/2021 14:39:16'!
CustomStringParser subclass: #CustomStringParserForErrorMessage
	instanceVariableNames: 'following'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Custom-String-Parser'!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:39:14' prior: 50904509 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 0.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 0 ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString].
		
		following isUppercase 
			ifTrue: [ newChar _ aChar asUppercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.].
	
	^ newString! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:44:03' prior: 50904538 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newChar _ aChar asLowercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:44:31' prior: 50904557 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, ' '. 
				newChar _ aChar asLowercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:44:56' prior: 50904579 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase ,' '. 
				newChar _ aChar asLowercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:45:23' prior: 50904602 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString,' '. 
				newChar _ aChar asLowercase.
				newString _ newString, newChar asString ] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:45:37' prior: 50904625 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString,' '] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:45:59' prior: 50904649 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ 
				aChar isSeparator ifFalse: [newString _ newString, aChar asString] ].
		index _ index + 1.]
		].
	! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:46:47' prior: 50904670 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ].
		index _ index + 1.]]! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:47:11' prior: 50904691 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ].
		index _ index + 1]]! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:47:26' prior: 50904712 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ].
		index _ index + 1]
	]! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:47:51' prior: 50904733 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:47:57'!
FAILURE!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:47:57'!
FAILURE!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:48:30' prior: 50904754 overrides: 50903584!
parse

	| index |
	
	following _ stringToParse first .
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:48:34'!
FAILURE!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:48:34'!
FAILURE!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:51:28' prior: 50904784 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse.
	
	following _ stringToParse copyFrom: 1 to: (stringToParse size - 'ErrorDescription' size).
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:51:47'!
FAILURE!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:51:47'!
FAILURE!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:52:18' prior: 50904814 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse.
	
	following _ stringToParse first.
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:52:21' prior: 50904847 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse copyFrom: 1 to: (stringToParse size - 'ErrorDescription' size)..
	
	following _ stringToParse first.
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test01CanNotParseAnEmptyString stamp: 'ja 6/26/2021 14:52:32'!
PASSED!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 14:52:32'!
PASSED!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:52:32'!
FAILURE!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:52:32'!
FAILURE!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:52:45' prior: 50904869 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse copyFrom: 1 to: (stringToParse size - 'ErrorDescription' size)..
	
	following _ stringToParse first.
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString,'.' ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test01CanNotParseAnEmptyString stamp: 'ja 6/26/2021 14:52:48'!
PASSED!

!testRun: #CustomStringParserTest #test02CanParseToNameTestWhenStringInputHasSpacesBetweenThen stamp: 'ja 6/26/2021 14:52:48'!
PASSED!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:52:48'!
PASSED!
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:53:02' prior: 50904910 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse copyFrom: 1 to: (stringToParse size - 'ErrorDescription' size).
	
	following _ stringToParse first.
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString,'.' ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:53:31'!
maxIndex

	^ stringToParse size - 'ErrorDescription' size! !
!CustomStringParserForErrorMessage methodsFor: 'as yet unclassified' stamp: 'ja 6/26/2021 14:53:31' prior: 50904947 overrides: 50903584!
parse

	| index |
	
	stringToParse _ stringToParse copyFrom: 1 to: (self maxIndex).
	
	following _ stringToParse first.
	index _ 1.
	newString _ ''.
	
	stringToParse do:[:aChar | | newChar |
		index = 1 
		ifTrue: [newChar _ aChar asUppercase.
			newString _ newString, newChar asString]
		ifFalse: [
			following _ stringToParse at: index + 1 ifAbsent:[^ newString, aChar asLowercase asString,'.' ].
			following isUppercase 
			ifTrue: [ newString _ newString, aChar asLowercase asString separateKeywords] 
			ifFalse: [ newString _ newString, aChar asLowercase asString ]].
		index _ index + 1
	]! !

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:54:37'!
PASSED!

!testRun: #CustomStringParserTest #test03CanParseToMessageErrorWhenStringInputHasUppercaseBetweenThen stamp: 'ja 6/26/2021 14:54:41'!
PASSED!

----SNAPSHOT----(26 June 2021 14:54:47) Cuis5.0-4533.image priorSource: 18315334!

----QUIT----(26 June 2021 14:54:53) Cuis5.0-4533.image priorSource: 18347416!